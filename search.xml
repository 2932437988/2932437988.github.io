<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1760. 袋子里最少数目的球</title>
    <url>/2022/12/20/1760-%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E7%9B%AE%E7%9A%84%E7%90%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1760-袋子里最少数目的球"><a href="#1760-袋子里最少数目的球" class="headerlink" title="1760. 袋子里最少数目的球"></a><a href="https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag/description/">1760. 袋子里最少数目的球</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumSize</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> maxOperations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = *<span class="built_in">max_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> y = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> ops = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x: nums) &#123;</span><br><span class="line">                ops += (x - <span class="number">1</span>) / y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ops &lt;= maxOperations) &#123;</span><br><span class="line">                ans = y;</span><br><span class="line">                right = y - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = y + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(nlogC)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1106. 解析布尔表达式</title>
    <url>/2022/11/05/LeetCode/1106-%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1106-解析布尔表达式"><a href="#1106-解析布尔表达式" class="headerlink" title="1106. 解析布尔表达式"></a><a href="https://leetcode.cn/problems/parsing-a-boolean-expression/description/">1106. 解析布尔表达式</a></h1><p>给你一个以字符串形式表述的 布尔表达式（boolean） expression，返回该式的运算结果。</p>
<p>有效的表达式需遵循以下约定：</p>
<ul>
<li>“t”，运算结果为 True</li>
<li>“f”，运算结果为 False</li>
<li>“!(expr)”，运算过程为对内部表达式 expr 进行逻辑 非的运算（NOT）</li>
<li>“&amp;(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 与的运算（AND）</li>
<li>“|(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 或的运算（OR）</li>
</ul>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：expression = &quot;!(f)&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：expression = &quot;|(f,t)&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：expression = &quot;&amp;(t,f)&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：expression = &quot;|(&amp;(t,f,t),!(t))&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= expression.length &lt;= 20000</li>
<li>expression[i] 由 {‘(‘, ‘)’, ‘&amp;’, ‘|’, ‘!’, ‘t’, ‘f’, ‘,’} 中的字符组成。</li>
<li>expression 是以上述形式给出的有效表达式，表示一个布尔值。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">parseBoolExpr</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> n = expression.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> c = expression[i];</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c != <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> t = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (stk.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">char</span> val = stk.<span class="built_in">top</span>();</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span> (val == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">                        t++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        f++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">char</span> op = stk.<span class="built_in">top</span>();</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(f == <span class="number">1</span> ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(f == <span class="number">0</span> ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(t &gt; <span class="number">0</span> ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>1235. 规划兼职工作</title>
    <url>/2022/10/22/LeetCode/1235-%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1235-规划兼职工作"><a href="#1235-规划兼职工作" class="headerlink" title="1235. 规划兼职工作"></a><a href="https://leetcode.cn/problems/maximum-profit-in-job-scheduling/">1235. 规划兼职工作</a></h1><p>你打算利用空闲时间来做兼职工作赚些零花钱。</p>
<p>这里有 n 份兼职工作，每份工作预计从 startTime[i] 开始到 endTime[i] 结束，报酬为 profit[i]。</p>
<p>给你一份兼职工作表，包含开始时间 startTime，结束时间 endTime 和预计报酬 profit 三个数组，请你计算并返回可以获得的最大报酬。</p>
<p>注意，时间上出现重叠的 2 份工作不能同时进行。</p>
<p>如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。</p>
<p>示例 1：</p>
<p><img src="http://img.x-17.top/leetcode/sample1_1584.png" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]</span><br><span class="line">输出：120</span><br><span class="line">解释：</span><br><span class="line">我们选出第 1 份和第 4 份工作， </span><br><span class="line">时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。</span><br></pre></td></tr></table></figure><br>示例 2：</p>
<p><img src="http://img.x-17.top/leetcode/sample22_1584.png" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]</span><br><span class="line">输出：150</span><br><span class="line">解释：</span><br><span class="line">我们选择第 1，4，5 份工作。 </span><br><span class="line">共获得报酬 150 = 20 + 70 + 60。</span><br></pre></td></tr></table></figure><br>示例 3：</p>
<p><img src="http://img.x-17.top/leetcode/sample3_1584.png" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= startTime.length == endTime.length == profit.length &lt;= $5 * 10^4$</li>
<li>1 &lt;= startTime[i] &lt; endTime[i] &lt;= $10^9$</li>
<li>1 &lt;= profit[i] &lt;= $10^4$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jobScheduling</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;startTime, vector&lt;<span class="type">int</span>&gt; &amp;endTime, vector&lt;<span class="type">int</span>&gt; &amp;profit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = startTime.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">jobs</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            jobs[i] = &#123;startTime[i], endTime[i], profit[i]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job1, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job2) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> job1[<span class="number">1</span>] &lt; job2[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="built_in">upper_bound</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">begin</span>() + i - <span class="number">1</span>, jobs[i - <span class="number">1</span>][<span class="number">0</span>], [&amp;](<span class="type">int</span> st, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> st &lt; job[<span class="number">1</span>];</span><br><span class="line">            &#125;) - jobs.<span class="built_in">begin</span>();</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[k] + jobs[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(nlogn)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>1441. 用栈操作构建数组</title>
    <url>/2022/10/15/LeetCode/1441-%E7%94%A8%E6%A0%88%E6%93%8D%E4%BD%9C%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1441-用栈操作构建数组"><a href="#1441-用栈操作构建数组" class="headerlink" title="1441. 用栈操作构建数组"></a><a href="https://leetcode.cn/problems/build-an-array-with-stack-operations/">1441. 用栈操作构建数组</a></h1><p>给你一个数组 target 和一个整数 n。每次迭代，需要从  list = { 1 , 2 , 3 …, n } 中依次读取一个数字。</p>
<p>请使用下述操作来构建目标数组 target ：</p>
<ul>
<li>“Push”：从 list 中读取一个新元素， 并将其推入数组中。</li>
<li>“Pop”：删除数组中的最后一个元素。</li>
<li>如果目标数组构建完成，就停止读取更多元素。<br>题目数据保证目标数组严格递增，并且只包含 1 到 n 之间的数字。</li>
</ul>
<p>请返回构建目标数组所用的操作序列。如果存在多个可行方案，返回任一即可。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：target = [1,3], n = 3</span><br><span class="line">输出：[&quot;Push&quot;,&quot;Push&quot;,&quot;Pop&quot;,&quot;Push&quot;]</span><br><span class="line">解释： </span><br><span class="line">读取 1 并自动推入数组 -&gt; [1]</span><br><span class="line">读取 2 并自动推入数组，然后删除它 -&gt; [1]</span><br><span class="line">读取 3 并自动推入数组 -&gt; [1,3]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：target = [1,2,3], n = 3</span><br><span class="line">输出：[&quot;Push&quot;,&quot;Push&quot;,&quot;Push&quot;]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：target = [1,2], n = 4</span><br><span class="line">输出：[&quot;Push&quot;,&quot;Push&quot;]</span><br><span class="line">解释：只需要读取前 2 个数字就可以停止。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= target.length &lt;= 100</li>
<li>1 &lt;= n &lt;= 100</li>
<li>1 &lt;= target[i] &lt;= n</li>
<li>target 严格递增</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题其实就是模拟压栈出栈操作，使得一个从1到n的递增序列最终成为在栈中的target序列。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">buildArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; target, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;target.<span class="built_in">size</span>();)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target[i]==flag)&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="string">&quot;Push&quot;</span>);</span><br><span class="line">                flag++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="string">&quot;Push&quot;</span>);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="string">&quot;Pop&quot;</span>);</span><br><span class="line">                flag++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>复杂度分析：</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1460. 通过翻转子数组使两个数组相等</title>
    <url>/2022/08/24/LeetCode/1460-%E9%80%9A%E8%BF%87%E7%BF%BB%E8%BD%AC%E5%AD%90%E6%95%B0%E7%BB%84%E4%BD%BF%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/make-two-arrays-equal-by-reversing-sub-arrays/">https://leetcode.cn/problems/make-two-arrays-equal-by-reversing-sub-arrays/</a> 给你两个长度相同的整数数组 target 和 arr 。每一步中，你可以选择 arr 的任意 非空子数组 并将它翻转。你可以执行此过程任意次。 如果你能让 arr 变得与 target 相同，返回 True；否则，返回 False 。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = [1,2,3,4], arr = [2,4,1,3]</span><br><span class="line">输出：true</span><br><span class="line">解释：你可以按照如下步骤使 arr 变成 target：</span><br><span class="line">1- 翻转子数组 [2,4,1] ，arr 变成 [1,4,2,3]</span><br><span class="line">2- 翻转子数组 [4,2] ，arr 变成 [1,2,4,3]</span><br><span class="line">3- 翻转子数组 [4,3] ，arr 变成 [1,2,3,4]</span><br><span class="line">上述方法并不是唯一的，还存在多种将 arr 变成 target 的方法。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = [7], arr = [7]</span><br><span class="line">输出：true</span><br><span class="line">解释：arr 不需要做任何翻转已经与 target 相等。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = [3,7,9], arr = [3,7,11]</span><br><span class="line">输出：false</span><br><span class="line">解释：arr 没有数字 9 ，所以无论如何也无法变成 target 。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target.length == arr.length</span><br><span class="line">1 &lt;= target.length &lt;= 1000</span><br><span class="line">1 &lt;= target[i] &lt;= 1000</span><br><span class="line">1 &lt;= arr[i] &lt;= 1000</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>如果target和arr的长度为1，那么只需要判断二者是否相等即可； 如果它们的长度大于一，以二为例，只要它们的元素都相等，就可以通过最多一次交换得到相同的两个数组；同理可证，可在不改变其他数字位置的情况下交换任意两个数字的位置，因此，只需判断两数组所包含的元素是否完全相等即可。 解法一：利用map存储出现的整数及次数，比较是否相等即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool canBeEqual(vector&lt;int&gt;&amp; target, vector&lt;int&gt;&amp; arr) &#123;</span><br><span class="line">        if(target.size()==1)&#123;</span><br><span class="line">            if(target[0]==arr[0])</span><br><span class="line">                return true;</span><br><span class="line">            else</span><br><span class="line">                return false;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            map&lt;int,int&gt; t;</span><br><span class="line">            map&lt;int,int&gt; a;</span><br><span class="line">            for(int i=0;i&lt;target.size();i++)&#123; </span><br><span class="line">                if(t.count(target[i]))&#123; </span><br><span class="line">                    t[target[i]]++; </span><br><span class="line">                &#125;else&#123; </span><br><span class="line">                    t[target[i]]=1; </span><br><span class="line">                &#125; </span><br><span class="line">                if(a.count(arr[i]))&#123; </span><br><span class="line">                    a[arr[i]]++; </span><br><span class="line">                &#125;else&#123; </span><br><span class="line">                    a[arr[i]]=1; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            for(auto it=t.begin(),ia=a.begin();it!=t.end(),ia!=a.end();it++,ia++)&#123; </span><br><span class="line">                if(it-&gt;first!=ia-&gt;firstit-&gt;second!=ia-&gt;second)&#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>解法二：排序后比较即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool canBeEqual(vector&lt;int&gt;&amp; target, vector&lt;int&gt;&amp; arr) &#123;</span><br><span class="line">        sort(target.begin(),target.end());</span><br><span class="line">        sort(arr.begin(),arr.end());</span><br><span class="line">        for(int i=0;i&lt;target.size();i++)&#123;</span><br><span class="line">            if(target[i]!=arr[i])&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1464. 数组中两元素的最大乘积</title>
    <url>/2022/08/26/LeetCode/1464-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/">https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/</a> 给你一个整数数组 nums，请你选择数组的两个不同下标 i 和 j，使 (nums[i]-1)*(nums[j]-1) 取得最大值。 请你计算并返回该式的最大值。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,4,5,2]</span><br><span class="line">输出：12 </span><br><span class="line">解释：如果选择下标 i=1 和 j=2（下标从 0 开始），则可以获得最大值，(nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,5,4,5]</span><br><span class="line">输出：16</span><br><span class="line">解释：选择下标 i=1 和 j=3（下标从 0 开始），则可以获得最大值 (5-1)*(5-1) = 16 。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,7]</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 &lt;= nums.length &lt;= 500</span><br><span class="line">1 &lt;= nums[i] &lt;= 10^3</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>解法一：数据最多是500，而暴力求解时间复杂度是\(O(n^2)\),显然可以通过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProduct(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for(int i=0;i&lt;nums.size()-1;i++)&#123;</span><br><span class="line">            for(int j=i+1;j&lt;nums.size();j++)&#123;</span><br><span class="line">                ans=max(ans,(nums[i]-1)*(nums[j]-1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(n^2)\)</li>
<li>空间复杂度：\(O(1)\)</li>
</ul>
<p>解法二：根据题意我们只需要找出最大值和次大值即可，所以可以排序实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProduct(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        return (nums[nums.size()-1]-1)*(nums[nums.size()-2]-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(nlogn)\)</li>
<li>空间复杂度：\(O(1)\)</li>
</ul>
<p>解法三：一次遍历维护最大值和次大值即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProduct(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int a=max(nums[0],nums[1]),b=min(nums[0],nums[1]);</span><br><span class="line">        for(int i=2;i&lt;nums.size();i++)&#123;</span><br><span class="line">            int c=a;</span><br><span class="line">            a=max(a,nums[i]);</span><br><span class="line">            if(a==nums[i])&#123;</span><br><span class="line">                b=max(c,b);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                b=max(b,nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (a-1)*(b-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(n)\)</li>
<li>空间复杂度：\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1470. 重新排列数组</title>
    <url>/2022/08/29/LeetCode/1470-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/shuffle-the-array/">https://leetcode.cn/problems/shuffle-the-array/</a> 给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,…,xn,y1,y2,…,yn] 的格式排列。 请你将数组按 [x1,y1,x2,y2,…,xn,yn] 格式重新排列，返回重排后的数组。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,5,1,3,4,7], n = 3</span><br><span class="line">输出：[2,3,5,4,1,7]</span><br><span class="line">解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,4,3,2,1], n = 4</span><br><span class="line">输出：[1,4,2,3,3,2,4,1]</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2,2], n = 2</span><br><span class="line">输出：[1,2,1,2]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>\(1 &lt;= n &lt;= 500\)</li>
<li>\(nums.length == 2n\)</li>
<li>\(1 &lt;= nums[i] &lt;= 10^3\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按题意模拟即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector shuffle(vector&lt;int&gt;&amp; nums, int n) &#123;</span><br><span class="line">        vector ans;</span><br><span class="line">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">            ans.push_back(nums[i]);</span><br><span class="line">            ans.push_back(nums[i+n]);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(n)\)</li>
<li>空间复杂度：\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT 6.1810 Operating System Engineering</title>
    <url>/2022/10/08/MIT-6-1810-Operating-System-Engineering/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>课程地址:<a href="https://pdos.csail.mit.edu/6.1810/2022/index.html">https://pdos.csail.mit.edu/6.1810/2022/index.html</a><br>新坑，MIT 6.1810</p>
<h1 id="6-1810-2022-Lecture-1-O-S-overview"><a href="#6-1810-2022-Lecture-1-O-S-overview" class="headerlink" title="6.1810 2022 Lecture 1: O/S overview"></a>6.1810 2022 Lecture 1: O/S overview</h1></blockquote>
<div class="tabs" id="lecture-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#lecture-1-1">Overview</button></li><li class="tab"><button type="button" data-href="#lecture-1-2">Class structure</button></li><li class="tab"><button type="button" data-href="#lecture-1-3">Introduction to UNIX system calls</button></li><li class="tab"><button type="button" data-href="#lecture-1-4">examples</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="lecture-1-1"><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><span class="bubble-content">6.1810 goals</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">Understand operating system (O/S) design and implementation<br>Hands-on experience extending a small O/S<br>Hands-on experience writing systems software</span>&lt;/span&gt;<br><span class="bubble-content">What is the purpose of an O/S?</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">Abstract the hardware for convenience and portability<br>Multiplex the hardware among many applications<br>Isolate applications in order to contain bugs<br>Allow sharing among cooperating applications<br>Control sharing for security<br>Don’t get in the way of high performance<br>Support a wide range of applications</span>&lt;/span&gt;<br><span class="bubble-content">Organization: layered picture</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">[user/kernel diagram]<br>- user applications: vi，gcc，DB，&amp;c<br>- kernel services<br>- h/w: CPU，RAM，disk，net，&amp;c<br>we care a lot about the interfaces and internal kernal structure</span>&lt;/span&gt;<br><span class="bubble-content">What services does ans O/S kernel typically provide?</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">process (a running program)<br>memory allocation<br>file contents<br>file names，directories<br>access control (security)<br>many others: users，IPC，network，time，terminals</span>&lt;/span&gt;<br><span class="bubble-content">What’s the application / kernel interface?</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">“System calls”<br>Examples，in C，from UNIX (e.g. Linux，macOS，FreeBSD):<br>&nbsp;&nbsp;&nbsp;&nbsp;fd = open(out”，1);<br>&nbsp;&nbsp;&nbsp;&nbsp;write(fd，”hello\n”，6);<br>&nbsp;&nbsp;&nbsp;&nbsp;pid = fork();<br>There look like function calls but they aren’t”</span>&lt;/span&gt;<br><span class="bubble-content">Why is O/S design+implementation hard and interesting?</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">many design tensions:<br>- efficient vs abstract/portable/general-purpose<br>- powerful vs simple interfaces<br>- flexible vs secure<br>features interact: <br>&nbsp;&nbsp;&nbsp;&nbsp;fd = open;<br>&nbsp;&nbsp;&nbsp;&nbsp;fork()<br>uses are varied: laptops，smart-phones，cloud，virtual machines，embedded<br>evolving hardware: NVRAM，multi-core，fast networks<br>unforgiving environment: quirky h/w，hard to debug</span>&lt;/span&gt;<br><span class="bubble-content">You’ll be glad you took this coourse if you…</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">care about what gose on under the hood<br>like infrastructure<br>need to track down bugs or security problems<br>care about high performance</span>&lt;/span&gt;</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lecture-1-2"><h2 id="Class-structure"><a href="#Class-structure" class="headerlink" title="Class structure"></a>Class structure</h2><p><span class="bubble-content">Online course information:</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;"><a href="https://pdos.csail.mit.edu/6.1810/">https://pdos.csail.mit.edu/6.1810/</a> — schedule，assignments，labs<br>Piazza — announcements，discussion，lab help</span>&lt;/span&gt;<br><span class="bubble-content">Lectures</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">O/S ideas<br>case study of xv6，a small O/S，via code and xv6 book<br>lab background<br>O/S papers<br>submit a question about each reading，before lecture.</span>&lt;/span&gt;<br><span class="bubble-content">Labs:</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">The point: hands-on experience<br>Mostly one week each.<br>Three kinds:<br>&nbsp;&nbsp;&nbsp;&nbsp;Systems programming (due next week…)<br>&nbsp;&nbsp;&nbsp;&nbsp;O/S primitives，e.g. thread switching.<br>&nbsp;&nbsp;&nbsp;&nbsp;O/S kernel extensions to xv6，e.g. network.<br>Use piazza to ask/answer lab questions.<br>Discussion is great，but please do not look at others’ solutions!</span>&lt;/span&gt;<br><span class="bubble-content">Grading:</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">70% labs，based on tests (the same tests you run).<br>20% lab check-oof meetings: we’ll ask you about randomly-selected labs.<br>10% home-work and class/piazza discussion.<br>No exams，no quizzes.<br>Note that most of the grade is from labs. Start them early!</span>&lt;/span&gt;</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lecture-1-3"><h2 id="Introduction-to-UNIX-system-calls"><a href="#Introduction-to-UNIX-system-calls" class="headerlink" title="Introduction to UNIX system calls"></a>Introduction to UNIX system calls</h2><details class="folding-tag" blue><summary> Introduction to UNIX system calls </summary>
              <div class='content'>
              <div class="note success simple"><p>Applications see the O/S via system calls; that interface will be a big focus.<br>let’s start by looking at how programs use system calls.<br>you’ll use these system calls in the first lab.<br>and extend and improve them in subsequent labs.<br>I’ll show some examples, and run them on xv6.<br>xv6 has similar structure to UNIX systems such as Linux.</p></div><details class="folding-tag" red><summary> but much simpler -- you'll be able to digest all of xv6 </summary>              <div class='content'>              <p>accompanying book explains how xv6 works, and why</p>              </div>            </details><details class="folding-tag" red><summary> why UNIX? </summary>              <div class='content'>              <p>open source, well documented, clean design, widely used<br>studying xv6 will help if you ever need to look inside Linux</p>              </div>            </details><details class="folding-tag" red><summary> xv6 has two roles in 6.1810: </summary>              <div class='content'>              <p>example of core functions: virtual memory, multi-core, interrupts, &amp;c<br>starting point for most of the labs</p>              </div>            </details><div class="note success simple"><p>xv6 runs on RISC-V, as in 6.004<br>you’ll run xv6 under the qemu machine emulator</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> copy.c </summary>
              <div class='content'>
              <p><p class='p red'>copy input to output</p></p><div class="note success simple"><p>read bytes from input, write them to the output</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">copy</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>copy.c is written in C<br>Kernighan and Ritchie (K&amp;R) book is good for learning C<br>you can find these example programs via the schedule on the web site</p></div><details class="folding-tag" red><summary> read() and write() are system calls </summary>              <div class='content'>              <div class="note success simple"><p><wavy>first</wavy> read()/write() argument is a “file descriptor” (fd)<br>passed to kernel to tell it which “open file” to read/write<br>must previously have been opened<br>an FD connects to a file/device/socket/&amp;c<br>a process can open many files, have many FDs<br>UNIX convention: fd 0 is “standard input”, 1 is “standard output”</p></div><div class="note success simple"><p><wavy>second</wavy> read() argument is a pointer to some memory into which to read</p></div><div class="note success simple"><p><wavy>third</wavy> argument is the number of bytes to read<br>read() may read less, but not more</p></div><div class="note success simple"><p><wavy>return value:</wavy> number of bytes actually read, or -1 for error</p></div><div class="note success simple"><p><wavy>note:</wavy> copy.c does not care about the format of the data<br>UNIX I/O is 8-bit bytes<br>interpretation is application-specific, e.g. database records, C source, &amp;c</p></div>              </div>            </details><div class="note red icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>where do file descriptors come from?</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> open.c </summary>
              <div class='content'>
              <p><p class='p red'>create a file</p><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">open</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br></pre></td></tr></table></figure></p><div class="note success simple"><p>open() creates a file, <wavy>returns a file descriptor (or -1 for error)</wavy><br>FD is a small integer<br>FD indexes into a per-process table maintained by kernel<br>[user/kernel diagram]</p></div><span class="bubble-content">different processes have different FD name-spaces</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">i.e. FD 1 usually means different things to different processes</span></span><div class="note red icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>these examples ignore errors — don’t be this sloppy!</p></div><div class="note success simple"><p>Figure 1.2 in the xv6 book lists system call arguments/return<br>or look at UNIX man pages, e.g. “man 2 open”</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> what happens when a program calls a system call like open()? </summary>
              <div class='content'>
              <div class="note success simple"><p>looks like a function call, but it’s actually a special instruction<br>hardware saves some user registers<br>hardware increases privilege level<br>hardware jumps to a known “entry point” in the kernel<br>now running C code in the kernel<br>kernel calls system call implementation<br>sys_open() looks up name in file system<br>it might wait for the disk<br>it updates kernel data structures (file block cache, FD table)<br>restore user registers<br>reduce privilege level<br>jump back to calling point in the program, which resumes<br>we’ll see more detail later in the course</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> shell </summary>
              <div class='content'>
              <div class="note success simple"><p>I’ve been typing to UNIX’s command-line interface, the shell.<br>the shell prints the “$” prompts.<br>the shell lets you run UNIX command-line utilities<br>useful for system management, messing with files, development, scripting</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> &gt; out</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep x &lt; out</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>UNIX supports other styles of interaction too<br>window systems, GUIs, servers, routers, &amp;c.<br>but time-sharing via the shell was the original focus of UNIX.<br>we can exercise many system calls via the shell.</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> fork.c </summary>
              <div class='content'>
              <p><p class='p red'>create a new process</p></p><div class="note success simple"><p>the shell creates a new process for each command you type, e. g. for</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello</span></span><br></pre></td></tr></table></figure>the fork() system call creates a new process<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fork</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>the kernel makes a copy of the calling process<br>instructions, data, registers, file descriptors, current directory<br>“parent” and “child” process<br>only difference: <emp>fork() returns a pid in parent, 0 in child a pid (process ID) is an interger,kernel gives each process a different pid</emp><br>thus:<br>fork.c’s “fork() returned” executes in <em>both</em> processes<br>the “if(pid == 0)” allows code to distinguish<br>ok, fork lets us create a new process</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>how can we run a program in that process?</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> exec.c </summary>
              <div class='content'>
              <p><p class='p red'>replace calling process with an executable file</p></p><div class="note success simple"><p>how does the shell run a program, e. g.</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> a b c</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>a program is stored in a file: instructions and initial memory created by the compiler and linker<br>so there’s a file called echo, containing instructions</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">exec</span></span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>exec() replaces current process with an executable file<br>discards instructions and memory from the file<br>preserves file descriptors<br>exec(filename, argument-array)<br>argument-array holds command-line arguments; exec passes to main()<br>cat uesr/echo.c<br>echo.c shows how a program looks at its command-line arguments</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> forkexec.c </summary>
              <div class='content'>
              <p><p class='p red'>fork() a new process，exec() a program</p><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">forkexec</span></span><br></pre></td></tr></table></figure></p><div class="note success simple"><p>forkexec.c contains a common UNIX idiom:<br>fork() a child process<br>exec() a command in the child<br>parent wait()s for child to finish<br>the shell does fork/exec/wait for every command you type<br>after wait(), the shell prints the next prompt<br>to run in the background — &amp; — the shell skips the wait()<br>exit(status) -&gt; wait(&amp;status)<br>status convention: 0 = success, 1 = command encountered an error<br>note: the fork() copies, but exec() discards the copied memory<br>this may seem wasteful<br>you’ll transparently eliminate the copy in the “copy-on-write” lab</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> refirect.c </summary>
              <div class='content'>
              <p><p class='p red'>redirect the output of a command</p></p><div class="note success simple"><p>what does the shell do for this?</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello &gt; out</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>answer: fork, change FD 1 in child, exec echo</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redirect</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>note: open() always chooses lowest unused FD; 1 due to close(1).<br>fork, FDs, and exec interact nicely to implement I/O redirection<br>separate fork-then-exec give child a chance to change FDs before exec FDs provide indirection<br>commands just use FDs 0 and 1, don’t have to know where they go exec preserves the FDs that sh set up<br>thus: only sh has to know about I/O redirection, not each program</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> design decisions </summary>
              <div class='content'>
              <div class="note success simple"><p>It’s worth asking “why” about design decisions:<br>Why these I/O and process abstractions?<br>Why not something else?<br>Why provide a file system?<br>Why not let programs ues the disk their own way?<br>Why FDs?<br>Why not pass a filename to write()?<br>Why are files streams of bytes, not disk blocks or formatted records?<br>Why not combine fork() and exec()?<br>The UNIX design works well, but we will see other designs!</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> pipe1.c </summary>
              <div class='content'>
              <p><p class='p red'>communicate through a pipe</p></p><div class="note success simple"><p>how does the shell implement</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> | grep x</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pipe1</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>an FD can refer to a “pipe”, as well as a file<br>the pipe() system call creates two FDs<br>read from the first FD<br>write to the seconnd FD<br>the hernel maintains a buffer for each pipe<br>[u/k diagram]<br>write() appends to the buffer<br>read() waits until there is data</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> pipe2.c </summary>
              <div class='content'>
              <p><p class='p red'>communicate between process</p></p><div class="note success simple"><p>pipes combine well with fork() to implement ls | grep x<br>shell creates a pipe,<br>then forks (twice),<br>then connects ls’s FD 1 to pipe’s write FD,<br>and grep’s FD 0 to the pipe<br>[diagram]</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pipe -- a simplified version</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>pipes are a separate abstraction, but combine well w/ fork()</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> list.c </summary>
              <div class='content'>
              <p><p class='p red'>list files in a directory</p></p><div class="note success simple"><p>how does ls get a list of the files in a directory?<br>you can open a directory and read it -&gt; file names<br>“.” is a pseudo-name for a process’s current directory<br>see ls.c for more details</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> Summary </summary>
              <div class='content'>
              <div class="note success simple"><p>We’ve looked at UNIX’s I/O, file system, and process abstractions.<br>The interfaces are simple — just integers and I/O buffers.<br>The abstractions combine well, e. g. for I/O rediretion.</p></div>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lecture-1-4"><div class="tabs" id="examples"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#examples-1">copy.c</button></li><li class="tab"><button type="button" data-href="#examples-2">echo.c</button></li><li class="tab"><button type="button" data-href="#examples-3">exec.c</button></li><li class="tab"><button type="button" data-href="#examples-4">fork.c</button></li><li class="tab"><button type="button" data-href="#examples-5">forkexec.c</button></li><li class="tab"><button type="button" data-href="#examples-6">list.c</button></li><li class="tab"><button type="button" data-href="#examples-7">open.c</button></li><li class="tab"><button type="button" data-href="#examples-8">pipe1.c</button></li><li class="tab"><button type="button" data-href="#examples-9">pipe2.c</button></li><li class="tab"><button type="button" data-href="#examples-10">redirect.c</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="examples-1"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// copy.c: copy input to output.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="type">int</span> n = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    write(<span class="number">1</span>, buf, n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; argc; i++)&#123;</span><br><span class="line">    write(<span class="number">1</span>, argv[i], <span class="built_in">strlen</span>(argv[i]));</span><br><span class="line">    <span class="keyword">if</span>(i + <span class="number">1</span> &lt; argc)&#123;</span><br><span class="line">      write(<span class="number">1</span>, <span class="string">&quot; &quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      write(<span class="number">1</span>, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-3"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// exec.c: replace a process with an executable file</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *argv[] = &#123; <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;this&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">  exec(<span class="string">&quot;echo&quot;</span>, argv);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;exec failed!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-4"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fork.c: create a new process</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line"></span><br><span class="line">  pid = fork();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;fork() returned %d\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-5"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forkexec.c: fork then exec</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> pid, status;</span><br><span class="line"></span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="type">char</span> *argv[] = &#123; <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;THIS&quot;</span>, <span class="string">&quot;IS&quot;</span>, <span class="string">&quot;ECHO&quot;</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    exec(<span class="string">&quot;echo&quot;</span>, argv);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;exec failed!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent waiting\n&quot;</span>);</span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the child exited with status %d\n&quot;</span>, status);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-6"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list.c: list file names in the current directory</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> &#123;</span></span><br><span class="line">  ushort inum;</span><br><span class="line">  <span class="type">char</span> name[<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> fd;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">e</span>;</span></span><br><span class="line"></span><br><span class="line">  fd = open(<span class="string">&quot;.&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span>(read(fd, &amp;e, <span class="keyword">sizeof</span>(e)) == <span class="keyword">sizeof</span>(e))&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.name[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, e.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-7"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// open.c: create a file, write to it.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/fcntl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> fd = open(<span class="string">&quot;out&quot;</span>, O_WRONLY | O_CREATE | O_TRUNC);</span><br><span class="line">  write(fd, <span class="string">&quot;ooo\n&quot;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-8"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pipe1.c: communication over a pipe</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> fds[<span class="number">2</span>];</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a pipe, with two FDs in fds[0], fds[1].</span></span><br><span class="line">  pipe(fds);</span><br><span class="line">  </span><br><span class="line">  write(fds[<span class="number">1</span>], <span class="string">&quot;this is pipe1\n&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  n = read(fds[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, buf, n);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-9"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pipe2.c: communication between two processes</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n, pid;</span><br><span class="line">  <span class="type">int</span> fds[<span class="number">2</span>];</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// create a pipe, with two FDs in fds[0], fds[1].</span></span><br><span class="line">  pipe(fds);</span><br><span class="line"></span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">    write(fds[<span class="number">1</span>], <span class="string">&quot;this is pipe2\n&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    n = read(fds[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    write(<span class="number">1</span>, buf, n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="examples-10"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/fcntl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// redirect.c: run a command with output redirected</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line"></span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">    close(<span class="number">1</span>);</span><br><span class="line">    open(<span class="string">&quot;out&quot;</span>, O_WRONLY | O_CREATE | O_TRUNC);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *argv[] = &#123; <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;this&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;redirected&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    exec(<span class="string">&quot;echo&quot;</span>, argv);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;exec failed!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wait((<span class="type">int</span> *) <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="Lab-util-Unix-utilities"><a href="#Lab-util-Unix-utilities" class="headerlink" title="Lab util: Unix utilities"></a>Lab util: Unix utilities</h1><div class="tabs" id="lab:xv6-and-unix-utilities"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#lab:xv6-and-unix-utilities-1">Boot xv6(easy)</button></li><li class="tab"><button type="button" data-href="#lab:xv6-and-unix-utilities-2">sleep(easy)</button></li><li class="tab"><button type="button" data-href="#lab:xv6-and-unix-utilities-3">pingpong(easy)</button></li><li class="tab"><button type="button" data-href="#lab:xv6-and-unix-utilities-4">primes(moderate)/(hard)</button></li><li class="tab"><button type="button" data-href="#lab:xv6-and-unix-utilities-5">find(moderate)</button></li><li class="tab"><button type="button" data-href="#lab:xv6-and-unix-utilities-6">xargs(moderate)</button></li><li class="tab"><button type="button" data-href="#lab:xv6-and-unix-utilities-7">Optional challenge exercises</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="lab:xv6-and-unix-utilities-1"><details class="folding-tag" blue><summary> requirement </summary>
              <div class='content'>
              <div class="note success simple"><p>You can do these labs on an Athena machine or on your own computer. If you use your own computer, have a look at the <a href="https://pdos.csail.mit.edu/6.1810/2022/tools.html">lab tools page</a> for setup tips.</p><p>If you use Athena, you must use an x86 machine; that is, <code>uname -a</code> should mention <code>i386 GNU/Linux</code> or <code>i686 GNU/Linux</code> or x86_64 GNU/Linux. You can log into a public Athena host with<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -X athena.dialup.mit.edu</span><br></pre></td></tr></table></figure><br>We have set up the appropriate compilers and simulators for you on Athena. To use them, run<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">add -f 6.828</span><br></pre></td></tr></table></figure><br>You must run this command every time you log in (or add it to your <code>~/.environment</code> file). If you get obscure errors while compiling or running <code>qemu</code>, check that you added the course locker.<br>Fetch the git repository for the xv6 source for the lab:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2022</span></span><br><span class="line">Cloning into &#x27;xv6-labs-2022&#x27;...</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> xv6-labs-2022</span></span><br></pre></td></tr></table></figure><br>The repo is setup so that git checkouts the <code>util</code> branch when cloning the repo.<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">Onbranch util</span><br><span class="line">Your branch is up to date with &#x27;origin/util&#x27;.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><br>The xv6-labs-2022 repository differs slightly from the book’s xv6-riscv; it mostly adds some files. If you are curious look at the git log:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><br>The files you will need for this and subsequent lab assignments are distributed using the Git version control system. For each of the labs you will checkout (git checkout util) a version of xv6 tailored for that lab. To learn more about Git, take a look at the Git user’s manual, or, you may find this CS-oriented overview of Git useful. Git allows you to keep track of the changes you make to the code. For example, if you are finished with one of the exercises, and want to checkpoint your progress, you can commit your changes by running:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -am <span class="string">&#x27;my solution for util lab exercise 1&#x27;</span></span></span><br><span class="line">Create commit 60d2135: my solution for util lab exercise 1</span><br><span class="line">    1 file changed, 1 insertions(+), 0 deletions(-)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><br>You can keep track of your changes by using the <code>git diff</code> command. Running <code>git diff</code> will display the changes to your code since your last commit, and <code>git diff origin/util</code> will display the changes relative to the initial util code. Here, origin/util is the name of the git branch with the initial code you downloaded for the class.<br>Build and run xv6:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make qemu</span></span><br></pre></td></tr></table></figure><br>If you type <code>ls</code> at the prompt, you should see output similar to the following:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure><br>These are the files that <code>mkfs</code> includess in the initial file system; most are programs you can run. You just ran one of them:ls.<br>xv6 has no <code>ps</code> command, but, if you type <kbd>Ctrl</kbd> - <kbd>p</kbd>, the kernel will print information about each process. If you try it now, you’ll see two lines: one for <code>init</code>, and one for <code>sh</code>.<br>To quit qemu type: <kbd>Ctrl</kbd>-<kbd>a</kbd> <kbd>x</kbd> (press <kbd>Ctrl</kbd> and <kbd>a</kbd> at the same time, followed by <kbd>x</kbd>).</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><h4 id="Grading-and-hand-in-procedure"><a href="#Grading-and-hand-in-procedure" class="headerlink" title="Grading and hand-in procedure"></a>Grading and hand-in procedure</h4><p>You can run <code>make grade</code> to test your solutions with the grading program. The TAs will use the same grading program to assign your lab submission a grade. Separately, we will also have check-off meetings for labs(see <a href="https://pdos.csail.mit.edu/6.1810/2022/general.html#grading">Grading policy</a>).<br>The lab code comes with GNU Make rules to make submission easier. After committing your final changes to the lab, type <code>make handin</code> to subtime your lab. For detailed instructions on how to submit see <a href="https://pdos.csail.mit.edu/6.1810/2022/labs/util.html#submit">below</a>.</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> code </summary>
              <div class='content'>
              <p><span class='p center logo large'>关于实验</span></p><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>因为阿里云服务器挂载网站并且是centos操作系统，虚拟机又会导致我的电脑卡顿，因而我选择了在云服务器利用docker容器安装Ubuntu完成整个实验。(后续会写docker学习文章，一定不鸽，咕咕咕)</p></div><div class="note success simple"><p>首先，自己配置好环境哈！<br>然后安装课程所需<a href="https://pdos.csail.mit.edu/6.1810/2022/tools.html">软件</a><br>我的环境是Ubuntu 20.04，因此运行命令<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu</span><br></pre></td></tr></table></figure><br>之后你可以按照上面的note中提供的shell命令去运行！<br>如果你不使用Athena，请忽略前两条指令；请注意我在部分代码块中加入了预期的运行结果，你可以通过进行<code>$</code>区分。</p></div>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lab:xv6-and-unix-utilities-2"><details class="folding-tag" blue><summary> requirement </summary>
              <div class='content'>
              <div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>Implement the UNIX program <code>sleep</code> for xv6; your <code>sleep</code> should pause for a user-specified number of ticks. A tick is a notion of time defined dy the xv6 hernel, namely the time between two interrupts from the timer chip. Your solution should be in the file <code>user/sleep.c</code>.</p></div><div class="note success simple"><p>Some hints:</p><ul><li>Before you start coding, read Chapter 1 of the <a href="">xv6 book</a>.</li><li>Look at some of the other programs in <code>user/</code>(e.g., <code>user/echo.c</code>, <code>user/grep.c</code>,and <code>user/rm.c</code>) to see how you can obtain the command-line arguments passed to a proggram.</li><li>If the user forgets to pass an argument, sleep should print an error message.</li><li>Use the system call <code>sleep</code>.</li><li>See <code>kernel/sysproc.c</code> for the xv6 kernel code that implements the <code>sleep</code> system call (look for <code>sys_sleep</code>), <code>user/user.h</code> for the C definition of <code>sleep</code> callable from a user program, and <code>user/usys.s</code> for the assembler code that jumps from user code into the kernel for <code>sleep</code>.</li><li><code>main</code> should call <code>exit(0)</code> when it is done.</li><li>Add your <code>sleep</code> program to <code>UPROGS</code> in Makefile; once you’ve done that, <code>make qemu</code> will compile your program and you’ll be able to run it from the xv6 shell.</li><li>Look at Kernighan and Ritchie’s book <span class='p green'>The C programming language (second edition)</span>(K&amp;R) to learn about C.</li></ul><p>Run the program from the xv6 shell:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make qemu</span></span><br><span class="line">...</span><br><span class="line">init: starting sh</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sleep</span> 10</span></span><br><span class="line">(nothing happens for a little while)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure></p><p>Your solution is correct if your program pauses when run as shown above. Run <code>make grade</code> to see if you indeed pass the sleep tests.<br>Note that <code>make grade</code> runs all tests, including the ones for the assignments below. If you want to run the grade tests for one assignment, type:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./grade-lab-util <span class="built_in">sleep</span></span></span><br></pre></td></tr></table></figure><br>This will run the grade tests that match “sleep”. Or, you can type:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make GRADEFLAGS=<span class="built_in">sleep</span> grade</span></span><br></pre></td></tr></table></figure><br>which does the same.</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> code </summary>
              <div class='content'>
              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;must only 1 argument for sleep\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sleeptime = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;nothing happens for %d seconds\n&quot;</span>, sleeptime);</span><br><span class="line">    sleep(sleeptime);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lab:xv6-and-unix-utilities-3"><details class="folding-tag" blue><summary> requirement </summary>
              <div class='content'>
              <div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>Write a program that uses UNIX system calls to “ping-pong” abyte between two processes over a pair of pipes, one for each direction. The parent should send a byte to the child; the child should print “<pid>:received ping”, where <pid> is its process ID, write the byte on the pipe to the parent, and exit; the parent should read the byte from the child, print “<pid>:received pong”, and exit. Your solution should be in the file <code>user/pingpong.c</code></p></div><div class="note success simple"><p>Some hints:</p><ul><li>Use <code>pipe</code> to create a pipe.</li><li>Use <code>fork</code> to create a child.</li><li>Use <code>read</code> to from a pipe, and <code>write</code> to a pipe.</li><li>Use <code>getpid</code> to find the process ID of the calling process.</li><li>Add the program to `UPROGS’ in Makefile.</li><li>User programs on xv6 have a limited set of library functions available to them. You can see the list in <code>user/user.h</code>; the source (other than for system calls) is in <code>user/ulib.c, user/printf.c,</code> and <code>user/umalloc.c</code>.</li></ul><p>Run the program from the xv6 shell and it should produce the following output:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make qemu</span></span><br><span class="line">...</span><br><span class="line">init: starting sh</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pingpong</span></span><br><span class="line">4: received ping</span><br><span class="line">3: received pong</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><br>Your solution is correct if your program exchanges a byte between two processes and produces output as shown above.</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> code </summary>
              <div class='content'>
              <p><div class="note success simple"><p>首先，很明显，我们需要两条管道传递信息。<br>对于管道传参 <code>int pipefd[2]</code>，<code>pipefd[0]</code>为管道读端，<code>pipefd[1]</code>为管道写端。<br>而且读取成功的情况下，<code>pipe</code>函数会返回读取到的字节数。<br>记得使用<code>fork</code>创建子进程，以及使用<code>read, write, close</code>对管道进行操作。</p></div><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span>                                 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd1[<span class="number">2</span>],fd2[<span class="number">2</span>];</span><br><span class="line">    <span class="type">char</span> buffer[] = &#123;<span class="string">&#x27;X&#x27;</span>&#125;;</span><br><span class="line">    pipe(fd1);</span><br><span class="line">    pipe(fd2);</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">        close(fd1[<span class="number">1</span>]);</span><br><span class="line">        close(fd2[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(read(fd1[<span class="number">0</span>], buffer, <span class="keyword">sizeof</span>(buffer)) != <span class="keyword">sizeof</span>(buffer)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a--&gt;b read error!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: received ping\n&quot;</span>, getpid());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(write(fd2[<span class="number">1</span>], buffer, <span class="keyword">sizeof</span>(buffer)) != <span class="keyword">sizeof</span>(buffer)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;b--&gt;a write error!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        close(fd1[<span class="number">0</span>]);</span><br><span class="line">        close(fd2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(write(fd1[<span class="number">1</span>], buffer, <span class="keyword">sizeof</span>(buffer)) != <span class="keyword">sizeof</span>(buffer)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a--&gt;b write error!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(read(fd2[<span class="number">0</span>], buffer, <span class="keyword">sizeof</span>(buffer)) != <span class="keyword">sizeof</span>(buffer)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;b--&gt;a read error!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: received pong\n&quot;</span>, getpid());</span><br><span class="line">        &#125;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lab:xv6-and-unix-utilities-4"><details class="folding-tag" blue><summary> requirement </summary>
              <div class='content'>
              <div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>Write a concurrent version of prime sieve using pipes. This idea is due to Doug Mcllroy, inventor of Unix pipes. The picture halfway down <a href="http://swtch.com/~rsc/thread/">this page</a> and the surrounding text explain how to do it. Your solution should be in the file <code>user/primes.c</code>.</p></div><div class="note success simple"><p>Your goal is to use <code>pipe</code> and <code>fork</code> to set up the pipeline. The first process feeds the numbers 2 through 35 into the pipeline. For each prime number, you will arrange to create one process that reads from its left neighbor over a pipe and writes to its right neighbor over another pipe. Since xv6 has limited number of file descriptors and processes, the first process can stop at 35.<br>Some hints:</p><ul><li>Be careful to close file descriptors that a process doesn’t need, because otherwise your program will run xv6 out of resources before the first process reaches 35.</li><li>Once the first process reaches 35, it should wait until the entire pipeline terminates, including all children, grandchildren, &amp;c. Thus the main primes process should only exit after all the output has been printed, and after all the other primes processes have exited.</li><li>Hint: <code>read</code> returns zero when the write-side of a pipe is closed.</li><li>It’s simplest to directly write 32-bit (4-byte) <code>int</code>s to the pipes, rather than using formatted <code>ASCII I/O</code>.</li><li>You should create the processes in the pipeline only as they are needed.</li><li>Add the program to <code>UPROGS</code> in Makefile.</li></ul><p>Your solution is correct if it implements a pipe-based sieve and produces the following output:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make qemu</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">primes</span></span><br></pre></td></tr></table></figure></p></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> code </summary>
              <div class='content'>
              <p><div class="note success simple"><p>这个实验的关键是利用<code>pipe</code>和<code>fork</code>，详细思想请看上个<code>note</code>给出的链接。<br>主要思想就是保证管道头部的数字为素数并删除在管道中是该数字倍数的数，其余的数写入下一个管道，如此反复。</p></div><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span>* input, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> p[<span class="number">2</span>],i;</span><br><span class="line">    <span class="type">int</span> prime = *input;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;prime %d\n&quot;</span>, input);</span><br><span class="line">    pipe(p);</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            temp = *(input+i);</span><br><span class="line">            write(p[<span class="number">1</span>], (<span class="type">char</span>*)(&amp;temp), <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">while</span>(read(p[<span class="number">0</span>], buffer, <span class="number">4</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            temp = *((<span class="type">int</span>*)buffer);</span><br><span class="line">            <span class="keyword">if</span>(temp % prime != <span class="number">0</span>) &#123;</span><br><span class="line">                *input = temp;</span><br><span class="line">                input += <span class="number">1</span>;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        func(input - counter, counter);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input[<span class="number">34</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( ; i &lt; <span class="number">34</span>; i++) &#123;</span><br><span class="line">        input[i] = i + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    func(input, <span class="number">34</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></p>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lab:xv6-and-unix-utilities-5"><details class="folding-tag" blue><summary> requirement </summary>
              <div class='content'>
              <div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>Write a simple version of the UNIX find program: find all the files in a directory tree with a specific name. Your solution should be in the file <code>user/find.c</code>.</p></div><div class="note success simple"><p>Some hints:</p><ul><li>Look at <code>user/ls.c</code> to see how to read directories.</li><li>Use recursion to allow find to descend into sub-directories.</li><li>Don’t recurse into “.” and “..”.</li><li>Changes to the file system persist across runs of qemu; to get a clean file system run <code>make clean</code> and then <code>make qemu</code>.</li><li>You’ll need to use C strings. Have a look at K&amp;R (the C book), for example Section 5.5.</li><li>Note that == does not compare strings like in Python. Use strcmp() instead.</li><li>Add the program to <code>UPROGS</code> in Makefile.</li></ul><p>Your solution is correct if produces the following output (when the file system contains the files <code>b, a/b</code> and <code>a/aa/b</code>):<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make qemu</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> &gt; b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> a</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> &gt; a/b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> a/aa</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> &gt; a/aa/b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . b</span></span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure></p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> code </summary>
              <div class='content'>
              <p><div class="note success simple"><p>根据提示，我们可以根据<code>ls.c</code>文件编写<code>find.c</code>文件。<br>find和ls的异同</p></p><p><ul></p><p><li>find需要找到指定目录中所有文件名为filename的文件，并打印路径+文件名</li></p><p><li>ls打印出指定目录中的所有目录项</li></p><p><li>都需要输入<code>path</code>参数</li></p><p><li>都需要判断<code>path</code>参数所指向的文件类型</li></p><p><li>都需要遍历目录项并读取目录项的名字</li></p><p><li>find还需要给定<code>filename</code>参数</li></p><p><li>find需要递归遍历指定目录中的所有子目录</li><br>&lt;/ul&gt;</p><p><p>因此，我们实现find需要在ls的基础上添加递归遍历子目录并查找指定文件名的操作，同时需要忽略掉<code>.</code>、<code>..</code>，防止重复递归。</p><br>&lt;/div&gt;<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span>                                 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/fs.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line">        </span><br><span class="line"><span class="type">char</span>* <span class="title function_">fmtname</span><span class="params">(<span class="type">char</span> *path)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> buf[DIRSIZ + <span class="number">1</span>];</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(p = path + <span class="built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="string">&#x27;/&#x27;</span>; p--);            </span><br><span class="line">    p++;    </span><br><span class="line">            </span><br><span class="line">    memmove(buf, p, <span class="built_in">strlen</span>(p) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;       </span><br><span class="line">    </span><br><span class="line"><span class="type">void</span> <span class="title function_">eq_print</span><span class="params">(<span class="type">char</span> *fileName, <span class="type">char</span> *findName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fmtname(fileName), findName) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">        </span><br><span class="line"><span class="type">void</span> <span class="title function_">find</span><span class="params">(<span class="type">char</span> *path, <span class="type">char</span>* name)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">512</span>], *p;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">de</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((fd = open(path, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: connot open %s\n&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fstat(fd, &amp;st) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: connot stat %s\n&quot;</span>, path);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(st.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> T_FILE:</span><br><span class="line">        eq_print(path, name);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> T_DIR:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(path) + <span class="number">1</span> + DIRSIZ +<span class="number">1</span> &gt; <span class="keyword">sizeof</span> buf) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;find: path too long\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">strcpy</span>(buf, path);</span><br><span class="line">        p = buf + <span class="built_in">strlen</span>(buf);</span><br><span class="line">        *p++ = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span>(read(fd, &amp;de, <span class="keyword">sizeof</span>(de)) == <span class="keyword">sizeof</span>(de)) &#123;  </span><br><span class="line">            <span class="keyword">if</span>(de.inum == <span class="number">0</span> || de.inum == <span class="number">1</span> || <span class="built_in">strcmp</span>(de.name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(de.name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            memmove(p, de.name, <span class="built_in">strlen</span>(de.name));</span><br><span class="line">            p[<span class="built_in">strlen</span>(de.name)] = <span class="number">0</span>;</span><br><span class="line">            find(buf, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;please input: find &lt;path&gt; &lt;fileName&gt;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    find(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lab:xv6-and-unix-utilities-6"><details class="folding-tag" blue><summary> requirement </summary>
              <div class='content'>
              <div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>Write a simple version of the UNIX xargs program: its arguments describe a command to run, it reads lines from the standard input, and it runs the command for each line, appending the line to the command’s arguments. Your solution should be in the file <code>user/xargs.c</code>.</p></div><div class="note success simple"><p>The following example illustrates xarg’s behavior:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello too | xargs <span class="built_in">echo</span> <span class="built_in">bye</span></span></span><br><span class="line">bye hello too</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><br>Note that the command here is “echo bye” and the additional arguments are “hello too”, making the command “echo bye hello too”, which outputs “bye hello too”.<br>Please note that xargs on UNIX makes an optimization where it will feed more than argument to the command at a time.<br>We don’t expect you to make this optimization. To make xargs on UNIX behave the way we want it to for this lab, please run it with the -n option set to 1. For instance<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">(<span class="built_in">echo</span> 1 : <span class="built_in">echo</span> 2) | xargs -n 1 <span class="built_in">echo</span></span></span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br>Some hints:</p><ul><li>Use <code>fork</code> and <code>exec</code> to invoke the command on each line of input. Use <code>wait</code> in the parent to wait for the child to complete the command.</li><li>To read individual lines of input, read a character at a time until a newline (‘\n’) appears.</li><li>lernel/param.h declars MAXARG, which may be useful if you need to declare an argv array.</li><li>Add the program to <code>UPROGS</code> in Makefile.</li><li>Changes to the file system persist across runs of qemu; to get a clean file system run make clean and then make qemu.</li></ul><p>xargs, find, and grep combine well:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . b | xargs grep hello</span></span><br></pre></td></tr></table></figure><br>will run “grep hello” on each file named b in the directories below “.”.<br>To test your solution for xargs, run the shell script xargstest.sh. Your solution is correct if it produces the following output:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make qemu</span></span><br><span class="line">...</span><br><span class="line">init: starting sh</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh &lt; xargstest.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">$ $ $ $ $ hello</span></span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">$</span></span><br></pre></td></tr></table></figure><br>You may have to go back and fix bugs in your find program. The output has many $ because the xv6 shell doesn’t realize it is processing commands from a file instead of from the console, and prints a $ for each command in the file.</p></div>
              </div>
            </details>

<details class="folding-tag" blue><summary> code </summary>
              <div class='content'>
              <p><div class="note success simple"><p><code>xargs</code>命令是一种管道命令，<code>|</code>即为管道，他会将管道前面的命令的输出作为后面命令的标准输入。</p></div><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span>                                 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="type">char</span>* exec_argv[MAXARG], buf[<span class="number">512</span>];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>; i &lt; argc; ++i)</span><br><span class="line">        exec_argv[i - <span class="number">1</span>] = argv[i];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = read(<span class="number">0</span>, buf + idx, <span class="keyword">sizeof</span>(<span class="type">char</span>))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[idx] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                buf[idx] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++idx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span> &amp;&amp; idx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        exec_argv[argc - <span class="number">1</span>] = buf;</span><br><span class="line">        <span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">            exec(exec_argv[<span class="number">0</span>], exec_argv);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lab:xv6-and-unix-utilities-7"><details class="folding-tag" blue><summary> requirement </summary>
              <div class='content'>
              <ul><li>Write an uptime program that prints the uptime in terms of ticks using the <code>uptime</code> system call.(easy)</li><li>Support regular expressions in name matching for <code>find. grep.c</code> has some primitive support for regular expressions.(easy)</li><li>The xv6 shell(user/sh.c) is just another user program and you can improve it. It is a minimal shell and lacks many features found in real shell. For example, modify the shell to not print a $ when processing shell commands from a file(moderate), modify the shell to support wait(easy), modify the shell to support lists of commands, separated by “;”(moderate), modify the shell to support sub-shells by implementing “(“ and “)” (moderate), modify the shell to support tab completion(easy), modify the shell to keep a history of passed shell commands(moderate), or anything else you would like your shell to do.(If you are very ambitious, you may have to modify the kermel to support the kernel features you need; xv6 doesn’t support mach.) </li></ul>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>MIT 6.1810</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>1475. 商品折扣后的最终价格</title>
    <url>/2022/09/01/LeetCode/1475-%E5%95%86%E5%93%81%E6%8A%98%E6%89%A3%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E4%BB%B7%E6%A0%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/">https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/</a> 给你一个数组 prices ，其中 prices[i] 是商店里第 i 件商品的价格。 商店里正在进行促销活动，如果你要买第 i 件商品，那么你可以得到与 prices[j] 相等的折扣，其中 j 是满足 j &gt; i 且 prices[j] &lt;= prices[i] 的 最小下标 ，如果没有满足条件的 j ，你将没有任何折扣。 请你返回一个数组，数组中第 i 个元素是折扣后你购买商品 i 最终需要支付的价格。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [8,4,6,2,3]</span><br><span class="line">输出：[4,2,4,2,3]</span><br><span class="line">解释：</span><br><span class="line">商品 0 的价格为 price[0]=8 ，你将得到 prices[1]=4 的折扣，所以最终价格为 8 - 4 = 4 。</span><br><span class="line">商品 1 的价格为 price[1]=4 ，你将得到 prices[3]=2 的折扣，所以最终价格为 4 - 2 = 2 。</span><br><span class="line">商品 2 的价格为 price[2]=6 ，你将得到 prices[3]=2 的折扣，所以最终价格为 6 - 2 = 4 。</span><br><span class="line">商品 3 和 4 都没有折扣。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：[1,2,3,4,5]</span><br><span class="line">解释：在这个例子中，所有商品都没有折扣。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [10,1,1,6]</span><br><span class="line">输出：[9,0,1,6]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= prices.length &lt;= 500</li>
<li>1 &lt;= prices[i] &lt;= 10^3</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按题意直接遍历即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector finalPrices(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class="line">        vector a;</span><br><span class="line">        for(int i=0;i&lt;prices.size()-1;i++)&#123;</span><br><span class="line">            int flag=1;</span><br><span class="line">            for(int j=i+1;j&lt;prices.size();j++)&#123; </span><br><span class="line">                if(prices[i]&gt;=prices[j])&#123;</span><br><span class="line">                    a.push_back(prices[i]-prices[j]);</span><br><span class="line">                    flag=0;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag)&#123;</span><br><span class="line">                a.push_back(prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a.push_back(prices[prices.size()-1]);</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n^2)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1582. 二进制矩阵中的特殊位置</title>
    <url>/2022/09/04/LeetCode/1582-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/special-positions-in-a-binary-matrix/">https://leetcode.cn/problems/special-positions-in-a-binary-matrix/</a> 给你一个大小为 rows x cols 的矩阵 mat，其中 mat[i][j] 是 0 或 1，请返回 矩阵 mat 中特殊位置的数目 。 特殊位置 定义：如果 mat[i][j] == 1 并且第 i 行和第 j 列中的所有其他元素均为 0（行和列的下标均 从 0 开始 ），则位置 (i, j) 被称为特殊位置。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,0,0],</span><br><span class="line">  [0,0,1],</span><br><span class="line">  [1,0,0]]</span><br><span class="line">输出：1</span><br><span class="line">解释：(1,2) 是一个特殊位置，因为 mat[1][2] == 1 且所处的行和列上所有其他元素都是 0</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,0,0],</span><br><span class="line">  [0,1,0],</span><br><span class="line">  [0,0,1]]</span><br><span class="line">输出：3</span><br><span class="line">解释：(0,0), (1,1) 和 (2,2) 都是特殊位置</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[0,0,0,1],</span><br><span class="line">  [1,0,0,0],</span><br><span class="line">  [0,1,1,0],</span><br><span class="line">  [0,0,0,0]]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[0,0,0,0,0],</span><br><span class="line">  [1,0,0,0,0],</span><br><span class="line">  [0,1,0,0,0],</span><br><span class="line">  [0,0,1,0,0],</span><br><span class="line">  [0,0,0,1,1]]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>rows == mat.length</li>
<li>cols == mat[i].length</li>
<li>1 &lt;= rows, cols &lt;= 100</li>
<li>mat[i][j] 是 0 或 1</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>模拟即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numSpecial(vector&lt;vector&lt;int&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        vector&lt;int&gt; h;</span><br><span class="line">        vector&lt;int&gt; s;</span><br><span class="line">        for(int i=0;i&lt;mat.size();i++)&#123;</span><br><span class="line">            int num=0;</span><br><span class="line">            for(int j=0;j&lt;mat[i].size();j++)&#123;</span><br><span class="line">                num+=mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            h.push_back(num);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;mat[0].size();i++)&#123;</span><br><span class="line">            int num=0;</span><br><span class="line">            for(int j=0;j&lt;mat.size();j++)&#123;</span><br><span class="line">                num+=mat[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            s.push_back(num);</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for(int i=0;i&lt;h.size();i++)&#123;</span><br><span class="line">            for(int j=0;j&lt;s.size();j++)&#123;</span><br><span class="line">                if(h[i]==1&amp;&amp;s[j]==1&amp;&amp;mat[i][j]==1)&#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(m*n)\)</li>
<li>空间复杂度\(O(m+n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>docker使用手册</title>
    <url>/2022/10/10/docker%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CentOS-Docker-安装"><a href="#CentOS-Docker-安装" class="headerlink" title="CentOS Docker 安装"></a>CentOS Docker 安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>
<p>设置仓库<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \</span></span><br><span class="line"><span class="language-bash">    --add-repo \</span></span><br><span class="line"><span class="language-bash">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><br>安装Docker EC<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 最新版本</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span></span><br><span class="line">// 特定版本</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span></span><br></pre></td></tr></table></figure><br>安装Ubuntu<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull ubuntu:[version]</span></span><br></pre></td></tr></table></figure></p>
<h1 id="docker-基础命令"><a href="#docker-基础命令" class="headerlink" title="docker 基础命令"></a>docker 基础命令</h1><p>启动docker<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><br>关闭docker<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><br>重启docker<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><br>查看docker运行状态<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><br>查看docker版本号信息<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><br>docker帮助<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker --help</span><br><span class="line">docker pull --help</span><br></pre></td></tr></table></figure></p>
<h1 id="docker-镜像命令"><a href="#docker-镜像命令" class="headerlink" title="docker 镜像命令"></a>docker 镜像命令</h1><p>查看服务器中docker镜像列表<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br></pre></td></tr></table></figure><br>搜索镜像<br>拉取镜像<br>运行镜像<br>删除镜像<br>强制删除镜像<br>保存镜像<br>加载镜像<br>查看镜像<br>镜像标签</p>
<h1 id="docker-容器命令"><a href="#docker-容器命令" class="headerlink" title="docker 容器命令"></a>docker 容器命令</h1><p>查看正在运行容器列表<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><br>查看所有容器<br>运行容器<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name [name] [CONTAINER:VERSION]</span></span><br></pre></td></tr></table></figure><br>进入容器<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it [name] /bin/bash</span></span><br></pre></td></tr></table></figure><br>未完待续，睡了睡了</p>
]]></content>
      <categories>
        <category>使用教程</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>1592. 重新排列单词间的空格</title>
    <url>/2022/09/07/LeetCode/1592-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/rearrange-spaces-between-words/">https://leetcode.cn/problems/rearrange-spaces-between-words/</a> 给你一个字符串 text ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 text 至少包含一个单词 。 请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化 该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾 ，这也意味着返回的字符串应当与原 text 字符串的长度相等。 返回 重新排列空格后的字符串 。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot; this is a sentence &quot;</span><br><span class="line">输出：&quot;this is a sentence&quot;</span><br><span class="line">解释：总共有 9 个空格和 4 个单词。可以将 9 个空格平均分配到相邻单词之间，相邻单词间空格数为：9 / (4-1) = 3 个。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot; practice makes perfect&quot;</span><br><span class="line">输出：&quot;practice makes perfect &quot;</span><br><span class="line">解释：总共有 7 个空格和 3 个单词。7 / (3-1) = 3 个空格加上 1 个多余的空格。多余的空格需要放在字符串的末尾。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;hello world&quot;</span><br><span class="line">输出：&quot;hello world&quot;</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot; walks udp package into bar a&quot;</span><br><span class="line">输出：&quot;walks udp package into bar a &quot;</span><br></pre></td></tr></table></figure>
<p>示例 5：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= text.length &lt;= 100</li>
<li>text 由小写英文字母和 ‘ ‘ 组成</li>
<li>text 中至少包含一个单词</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>模拟</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string reorderSpaces(string text) &#123;</span><br><span class="line">        list&lt;char&gt; a;</span><br><span class="line">        vector&lt;string&gt; b;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for(int i=0;i&lt;text.length();i++)&#123;</span><br><span class="line">            if(text[i]==&#x27; &#x27;)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                string s;</span><br><span class="line">                while(!a.empty())&#123;</span><br><span class="line">                    s+=a.front();</span><br><span class="line">                    a.pop_front();</span><br><span class="line">                &#125;</span><br><span class="line">                if(!s.empty())&#123;</span><br><span class="line">                    b.push_back(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                a.push_back(text[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string s1;</span><br><span class="line">        while(!a.empty())&#123;</span><br><span class="line">            s1+=a.front();</span><br><span class="line">            a.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        if(!s1.empty())&#123;</span><br><span class="line">            b.push_back(s1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int n=b.size()-1;</span><br><span class="line">        string s=&quot;&quot;;</span><br><span class="line">        s+=b[0];</span><br><span class="line">        if(n==0)&#123;</span><br><span class="line">            for(int i=0;i&lt;ans;i++)&#123;</span><br><span class="line">                s+=&#x27; &#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            for(int i=1;i&lt;b.size();i++)&#123;</span><br><span class="line">                for(int j=0;j&lt;ans/n;j++)&#123;</span><br><span class="line">                    s+=&#x27; &#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">                s+=b[i];</span><br><span class="line">            &#125;</span><br><span class="line">            for(int i=0;i&lt;ans%n;i++)&#123;</span><br><span class="line">                s+=&#x27; &#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1598. 文件夹操作日志搜集器</title>
    <url>/2022/09/09/LeetCode/1598-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/crawler-log-folder/">https://leetcode.cn/problems/crawler-log-folder/</a> 每当用户执行变更文件夹操作时，LeetCode 文件系统都会保存一条日志记录。 下面给出对变更操作的说明： “../“ ：移动到当前文件夹的父文件夹。如果已经在主文件夹下，则 继续停留在当前文件夹 。 “./“ ：继续停留在当前文件夹。 “x/“ ：移动到名为 x 的子文件夹中。题目数据 保证总是存在文件夹 x 。 给你一个字符串列表 logs ，其中 logs[i] 是用户在 ith 步执行的操作。 文件系统启动时位于主文件夹，然后执行 logs 中的操作。 执行完所有变更文件夹操作后，请你找出 返回主文件夹所需的最小步数 。 示例 1： <img src="https://x-17.top/wp-content/uploads/2022/09/sample_11_1957-300x58.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：logs = [&quot;d1/&quot;,&quot;d2/&quot;,&quot;../&quot;,&quot;d21/&quot;,&quot;./&quot;]</span><br><span class="line">输出：2</span><br><span class="line">解释：执行 &quot;../&quot; 操作变更文件夹 2 次，即可回到主文件夹</span><br></pre></td></tr></table></figure>
<p>示例 2： <img src="https://x-17.top/wp-content/uploads/2022/09/sample_22_1957-300x128.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：logs = [&quot;d1/&quot;,&quot;d2/&quot;,&quot;./&quot;,&quot;d3/&quot;,&quot;../&quot;,&quot;d31/&quot;]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：logs = [&quot;d1/&quot;,&quot;../&quot;,&quot;../&quot;,&quot;../&quot;]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= logs.length &lt;= 103</li>
<li>2 &lt;= logs[i].length &lt;= 10</li>
<li>logs[i] 包含小写英文字母，数字，’.’ 和 ‘/‘</li>
<li>logs[i] 符合语句中描述的格式</li>
<li>文件夹名称由小写英文字母和数字组成</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>遍历比较字符串是否为”../“和”./“，不是则记录值加一，是”../“且记录值不为0则记录值减一。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minOperations(vector&lt;string&gt;&amp; logs) &#123;</span><br><span class="line">        string s1=&quot;./&quot;,s2=&quot;../&quot;;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for(int i=0;i&lt;logs.size();i++)&#123;</span><br><span class="line">            if(logs[i]==s2)&#123;</span><br><span class="line">                if(ans) ans--;</span><br><span class="line">            &#125;else if(logs[i]!=s1)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1608. 特殊数组的特征值</title>
    <url>/2022/09/12/LeetCode/1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/special-array-with-x-elements-greater-than-or-equal-x/">https://leetcode.cn/problems/special-array-with-x-elements-greater-than-or-equal-x/</a>给你一个非负整数数组 nums 。如果存在一个数 x ，使得 nums 中恰好有 x 个元素 大于或者等于 x ，那么就称 nums 是一个 特殊数组 ，而 x 是该数组的 特征值 。 注意： x 不必 是 nums 的中的元素。 如果数组 nums 是一个 特殊数组 ，请返回它的特征值 x 。否则，返回 -1 。可以证明的是，如果 nums 是特殊数组，那么其特征值 x 是 唯一的 。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,5]</span><br><span class="line">输出：2</span><br><span class="line">解释：有 2 个元素（3 和 5）大于或等于 2 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0]</span><br><span class="line">输出：-1</span><br><span class="line">解释：没有满足题目要求的特殊数组，故而也不存在特征值 x 。</span><br><span class="line">如果 x = 0，应该有 0 个元素 &gt;= x，但实际有 2 个。</span><br><span class="line">如果 x = 1，应该有 1 个元素 &gt;= x，但实际有 0 个。</span><br><span class="line">如果 x = 2，应该有 2 个元素 &gt;= x，但实际有 0 个。</span><br><span class="line">x 不能取更大的值，因为 nums 中只有两个元素。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,4,3,0,4]</span><br><span class="line">输出：3</span><br><span class="line">解释：有 3 个元素大于或等于 3 。</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,6,7,7,0]</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= nums.length &lt;= 100</li>
<li>0 &lt;= nums[i] &lt;= 1000</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>降序排列找到第i位元素大于等于i且第i+1位小于i,i即为所求。(前面所述的i从1开始，代码中从0开始所以i+1为所求）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    static bool compare(int a,int b)&#123;</span><br><span class="line">        return a&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">    int specialArray(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        sort(nums.begin(),nums.end(),compare);</span><br><span class="line">        for(int i=0;i&lt;nums.size();i++)&#123; </span><br><span class="line">            if(nums[i]&gt;i)&#123;</span><br><span class="line">                if(i+1==nums.size())&#123;</span><br><span class="line">                    return nums.size();</span><br><span class="line">                &#125;else if(nums[i+1]&lt;=i)&#123;</span><br><span class="line">                    return i+1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(nlogn)\)</li>
<li>空间复杂度\(O(logn)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1619. 删除某些元素后的数组均值</title>
    <url>/2022/09/14/LeetCode/1619-%E5%88%A0%E9%99%A4%E6%9F%90%E4%BA%9B%E5%85%83%E7%B4%A0%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84%E5%9D%87%E5%80%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/mean-of-array-after-removing-some-elements/">https://leetcode.cn/problems/mean-of-array-after-removing-some-elements/</a> 给你一个整数数组 arr ，请你删除最小 5% 的数字和最大 5% 的数字后，剩余数字的平均值。 与 标准答案 误差在 10-5 的结果都被视为正确结果。 示例 1： 输入：arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3] 输出：2.00000 解释：删除数组中最大和最小的元素后，所有元素都等于 2，所以平均值为 2 。 示例 2： 输入：arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0] 输出：4.00000 示例 3： 输入：arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4] 输出：4.77778 示例 4： 输入：arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3] 输出：5.27778 示例 5： 输入：arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1] 输出：5.29167 提示：</p>
<ul>
<li>20 &lt;= arr.length &lt;= 1000</li>
<li>arr.length 是 20 的 倍数</li>
<li>\(0 &lt;= arr[i] &lt;= 10^5\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double trimMean(vector&lt;int&gt;&amp; arr) &#123;</span><br><span class="line">        sort(arr.begin(),arr.end());</span><br><span class="line">        double ans=0;</span><br><span class="line">        int n=arr.size();</span><br><span class="line">        for(int i=n/20;i&lt;n-n/20;i++)&#123;</span><br><span class="line">            ans+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return ans/(n-n/10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(nlogn)\)</li>
<li>空间复杂度\(O(logn)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1620. 网络信号最好的坐标</title>
    <url>/2022/11/02/LeetCode/1620-%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E6%9C%80%E5%A5%BD%E7%9A%84%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1620-网络信号最好的坐标"><a href="#1620-网络信号最好的坐标" class="headerlink" title="1620. 网络信号最好的坐标"></a><a href="https://leetcode.cn/problems/coordinate-with-maximum-network-quality/">1620. 网络信号最好的坐标</a></h1><p>给你一个数组 towers 和一个整数 radius 。</p>
<p>数组  towers  中包含一些网络信号塔，其中 towers[i] = [$x_i, y_i, q_i$] 表示第 i 个网络信号塔的坐标是 ($x_i, y_i$) 且信号强度参数为 $q_i$ 。所有坐标都是在  X-Y 坐标系内的 整数 坐标。两个坐标之间的距离用 欧几里得距离 计算。</p>
<p>整数 radius 表示一个塔 能到达 的 最远距离 。如果一个坐标跟塔的距离在 radius 以内，那么该塔的信号可以到达该坐标。在这个范围以外信号会很微弱，所以 radius 以外的距离该塔是 不能到达的 。</p>
<p>如果第 i 个塔能到达 (x, y) ，那么该塔在此处的信号为 ⌊$q_i$ / (1 + d)⌋ ，其中 d 是塔跟此坐标的距离。一个坐标的 信号强度 是所有 能到达 该坐标的塔的信号强度之和。</p>
<p>请你返回数组 [$c_x, c_y$] ，表示 信号强度 最大的 整数 坐标点 ($c_x, c_y$) 。如果有多个坐标网络信号一样大，请你返回字典序最小的 非负 坐标。</p>
<p>注意：</p>
<ul>
<li>坐标 (x1, y1) 字典序比另一个坐标 (x2, y2) 小，需满足以下条件之一：<ul>
<li>要么 x1 &lt; x2 ，</li>
<li>要么 x1 == x2 且 y1 &lt; y2 。</li>
</ul>
</li>
<li>⌊val⌋ 表示小于等于 val 的最大整数（向下取整函数）。</li>
</ul>
<p>示例 1：<br><img src="http://img.x-17.top/leetcode/untitled-diagram.png" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2</span><br><span class="line">输出：[2,1]</span><br><span class="line">解释：</span><br><span class="line">坐标 (2, 1) 信号强度之和为 13</span><br><span class="line"><span class="bullet">-</span> 塔 (2, 1) 强度参数为 7 ，在该点强度为 ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7</span><br><span class="line"><span class="bullet">-</span> 塔 (1, 2) 强度参数为 5 ，在该点强度为 ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2</span><br><span class="line"><span class="bullet">-</span> 塔 (3, 1) 强度参数为 9 ，在该点强度为 ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4</span><br><span class="line">没有别的坐标有更大的信号强度。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：towers = [[23,11,21]], radius = 9</span><br><span class="line">输出：[23,11]</span><br><span class="line">解释：由于仅存在一座信号塔，所以塔的位置信号强度最大。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：坐标 (1, 2) 的信号强度最大。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= towers.length &lt;= 50</li>
<li>towers[i].length == 3</li>
<li>0 &lt;= $x_i, y_i, q_i$ &lt;= 50</li>
<li>1 &lt;= radius &lt;= 50</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bestCoordinate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> xMax = INT_MIN, yMax = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;tower : towers) &#123;</span><br><span class="line">            <span class="type">int</span> x = tower[<span class="number">0</span>], y = tower[<span class="number">1</span>];</span><br><span class="line">            xMax = <span class="built_in">max</span>(xMax, x);</span><br><span class="line">            yMax = <span class="built_in">max</span>(yMax, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cx = <span class="number">0</span>, cy = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxQuality = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt;= xMax; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt;= yMax; y++) &#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; coordinate = &#123;x, y&#125;;</span><br><span class="line">                <span class="type">int</span> quality = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;tower : towers) &#123;</span><br><span class="line">                    <span class="type">int</span> squaredDistance = <span class="built_in">getSquaredDistance</span>(coordinate, tower);</span><br><span class="line">                    <span class="keyword">if</span> (squaredDistance &lt;= radius * radius) &#123;</span><br><span class="line">                        <span class="type">double</span> distance = <span class="built_in">sqrt</span>((<span class="type">double</span>)squaredDistance);</span><br><span class="line">                        quality += <span class="built_in">floor</span>((<span class="type">double</span>)tower[<span class="number">2</span>] / (<span class="number">1</span> + distance));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (quality &gt; maxQuality) &#123;</span><br><span class="line">                    cx = x;</span><br><span class="line">                    cy = y;</span><br><span class="line">                    maxQuality = quality;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;cx, cy&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSquaredDistance</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;coordinate, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;tower)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (tower[<span class="number">0</span>] - coordinate[<span class="number">0</span>]) * (tower[<span class="number">0</span>] - coordinate[<span class="number">0</span>]) + (tower[<span class="number">1</span>] - coordinate[<span class="number">1</span>]) * (tower[<span class="number">1</span>] - coordinate[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1624. 两个相同字符之间的最长子字符串</title>
    <url>/2022/09/17/LeetCode/1624-%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/largest-substring-between-two-equal-characters/">https://leetcode.cn/problems/largest-substring-between-two-equal-characters/</a> 给你一个字符串 s，请你返回 两个相同字符之间的最长子字符串的长度 ，计算长度时不含这两个字符。如果不存在这样的子字符串，返回 -1 。 子字符串 是字符串中的一个连续字符序列。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;aa&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：最优的子字符串是两个 &#x27;a&#x27; 之间的空子字符串。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abca&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：最优的子字符串是 &quot;bc&quot; 。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cbzxy&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：s 中不存在出现出现两次的字符，所以返回 -1 。</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cabbac&quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最优的子字符串是 &quot;abba&quot; ，其他的非最优解包括 &quot;bb&quot; 和 &quot;&quot; 。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 300</li>
<li>s 只含小写英文字母</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxLengthBetweenEqualCharacters(string s) &#123;</span><br><span class="line">        map&lt;char,vector&lt;int&gt;&gt; m;</span><br><span class="line">        for(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">            m[s[i]].push_back(i); </span><br><span class="line">        &#125; </span><br><span class="line">        int ans=-1; </span><br><span class="line">        for(auto it=m.begin();it!=m.end();it++)&#123; </span><br><span class="line">            if(it-&gt;second.size()&gt;=2)&#123;</span><br><span class="line">                ans=max(ans,it-&gt;second[it-&gt;second.size()-1]-it-&gt;second[0]-1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1636. 按照频率将数组升序排序</title>
    <url>/2022/09/19/LeetCode/1636-%E6%8C%89%E7%85%A7%E9%A2%91%E7%8E%87%E5%B0%86%E6%95%B0%E7%BB%84%E5%8D%87%E5%BA%8F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/sort-array-by-increasing-frequency/">https://leetcode.cn/problems/sort-array-by-increasing-frequency/</a> 给你一个整数数组 nums ，请你将数组按照每个值的频率 升序 排序。如果有多个值的频率相同，请你按照数值本身将它们 降序 排序。 请你返回排序后的数组。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2,2,2,3]</span><br><span class="line">输出：[3,1,1,2,2,2]</span><br><span class="line">解释：&#x27;3&#x27; 频率为 1，&#x27;1&#x27; 频率为 2，&#x27;2&#x27; 频率为 3 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,3,1,3,2]</span><br><span class="line">输出：[1,3,3,2,2]</span><br><span class="line">解释：&#x27;2&#x27; 和 &#x27;3&#x27; 频率都为 2 ，所以它们之间按照数值本身降序排序。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,1,-6,4,5,-6,1,4,1]</span><br><span class="line">输出：[5,-1,4,4,-6,-6,1,1,1]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= nums.length &lt;= 100</li>
<li>-100 &lt;= nums[i] &lt;= 100</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; frequencySort(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        unordered_map&lt;int, int&gt; cnt;</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            cnt[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums.begin(), nums.end(), [&amp;](const int a, const int b) &#123;</span><br><span class="line">            if (cnt[a] != cnt[b]) &#123;</span><br><span class="line">                return cnt[a] &lt; cnt[b]; </span><br><span class="line">            &#125; </span><br><span class="line">            return a &gt; b;</span><br><span class="line">        &#125;);</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(nlogn)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1640. 能否连接形成数组</title>
    <url>/2022/09/22/LeetCode/1640-%E8%83%BD%E5%90%A6%E8%BF%9E%E6%8E%A5%E5%BD%A2%E6%88%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/check-array-formation-through-concatenation/">https://leetcode.cn/problems/check-array-formation-through-concatenation/</a> 给你一个整数数组 arr ，数组中的每个整数 互不相同 。另有一个由整数数组构成的数组 pieces，其中的整数也 互不相同 。请你以 任意顺序 连接 pieces 中的数组以形成 arr 。但是，不允许 对每个数组 pieces[i] 中的整数重新排序。 如果可以连接 pieces 中的数组形成 arr ，返回 true ；否则，返回 false 。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [15,88], pieces = [[88],[15]]</span><br><span class="line">输出：true</span><br><span class="line">解释：依次连接 [15] 和 [88]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [49,18,16], pieces = [[16,18,49]]</span><br><span class="line">输出：false</span><br><span class="line">解释：即便数字相符，也不能重新排列 pieces[0]</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [91,4,64,78], pieces = [[78],[4,64],[91]]</span><br><span class="line">输出：true</span><br><span class="line">解释：依次连接 [91]、[4,64] 和 [78]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= pieces.length &lt;= arr.length &lt;= 100</li>
<li>sum(pieces[i].length) == arr.length</li>
<li>1 &lt;= pieces[i].length &lt;= arr.length</li>
<li>1 &lt;= arr[i], pieces[i][j] &lt;= 100</li>
<li>arr 中的整数 互不相同</li>
<li>pieces 中的整数 互不相同（也就是说，如果将 pieces 扁平化成一维数组，数组中的所有整数互不相同）</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool canFormArray(vector&lt;int&gt;&amp; arr, vector&lt;vector&lt;int&gt;&gt;&amp; pieces) &#123;</span><br><span class="line">        map&lt;int,int&gt; m;</span><br><span class="line">        for(int i=0;i&lt;arr.size();i++)&#123;</span><br><span class="line">            m[arr[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;int,int&gt; n;</span><br><span class="line">        for(int i=0;i&lt;pieces.size();i++)&#123;</span><br><span class="line">            if(m.count(pieces[i][0])==0)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            for(int j=1;j&lt;pieces[i].size();j++)&#123;</span><br><span class="line">                if(m.count(pieces[i][0])==0)&#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                if(m[pieces[i][j]]!=m[pieces[i][j-1]]+1)&#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1662. 检查两个字符串数组是否相等</title>
    <url>/2022/11/01/LeetCode/1662-%E6%A3%80%E6%9F%A5%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1662-检查两个字符串数组是否相等"><a href="#1662-检查两个字符串数组是否相等" class="headerlink" title="1662. 检查两个字符串数组是否相等"></a><a href="https://leetcode.cn/problems/check-if-two-string-arrays-are-equivalent/">1662. 检查两个字符串数组是否相等</a></h1><p>给你两个字符串数组 word1 和 word2 。如果两个数组表示的字符串相同，返回 true ；否则，返回 false 。</p>
<p>数组表示的字符串 是由数组中的所有元素 按顺序 连接形成的字符串。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word1 = [&quot;ab&quot;, &quot;c&quot;], word2 = [&quot;a&quot;, &quot;bc&quot;]</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">word1 表示的字符串为 &quot;ab&quot; + &quot;c&quot; -&gt; &quot;abc&quot;</span><br><span class="line">word2 表示的字符串为 &quot;a&quot; + &quot;bc&quot; -&gt; &quot;abc&quot;</span><br><span class="line">两个字符串相同，返回 true</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word1 = [&quot;a&quot;, &quot;cb&quot;], word2 = [&quot;ab&quot;, &quot;c&quot;]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word1  = [&quot;abc&quot;, &quot;d&quot;, &quot;defg&quot;], word2 = [&quot;abcddefg&quot;]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>$1 &lt;= word1.length, word2.length &lt;= 10^3$</li>
<li>$1 &lt;= word1[i].length, word2[i].length &lt;= 10^3$</li>
<li>$1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 10^3$</li>
<li>word1[i] 和 word2[i] 由小写字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">arrayStringsAreEqual</span><span class="params">(vector&lt;string&gt;&amp; word1, vector&lt;string&gt;&amp; word2)</span> </span>&#123;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; word1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; word1[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                ans += word1[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = ans.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; word2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; word2[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num &lt; n &amp;&amp; word2[i][j] == ans[num]) num++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num == n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1652. 拆炸弹</title>
    <url>/2022/09/24/LeetCode/1652-%E6%8B%86%E7%82%B8%E5%BC%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/defuse-the-bomb/">https://leetcode.cn/problems/defuse-the-bomb/</a> 你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。 为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。 如果 k &gt; 0 ，将第 i 个数字用 接下来 k 个数字之和替换。 如果 k &lt; 0 ，将第 i 个数字用 之前 k 个数字之和替换。 如果 k == 0 ，将第 i 个数字用 0 替换。 由于 code 是循环的， code[n-1] 下一个元素是 code[0] ，且 code[0] 前一个元素是 code[n-1] 。 给你 循环 数组 code 和整数密钥 k ，请你返回解密后的结果来拆除炸弹！ 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：code = [5,7,1,4], k = 3</span><br><span class="line">输出：[12,10,16,13]</span><br><span class="line">解释：每个数字都被接下来 3 个数字之和替换。解密后的密码为 [7+1+4, 1+4+5, 4+5+7, 5+7+1]。注意到数组是循环连接的。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：code = [1,2,3,4], k = 0</span><br><span class="line">输出：[0,0,0,0]</span><br><span class="line">解释：当 k 为 0 时，所有数字都被 0 替换。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：code = [2,4,9,3], k = -2</span><br><span class="line">输出：[12,5,6,13]</span><br><span class="line">解释：解密后的密码为 [3+9, 2+3, 4+2, 9+4] 。注意到数组是循环连接的。如果 k 是负数，那么和为 之前 的数字。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>n == code.length</li>
<li>1 &lt;= n &lt;= 100</li>
<li>1 &lt;= code[i] &lt;= 100</li>
<li>-(n - 1) &lt;= k &lt;= n - 1</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; decrypt(vector&lt;int&gt;&amp; code, int k) &#123;</span><br><span class="line">        vector&lt;int&gt; ans;</span><br><span class="line">        if (k &gt; 0) &#123;</span><br><span class="line">            for(int i = 0; i &lt; code.size(); i++) &#123;</span><br><span class="line">                int num=0;</span><br><span class="line">                for(int j = 1; j &lt;= k; j++) &#123;</span><br><span class="line">                    num += code[(i+j)%code.size()];</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if (k &lt; 0) &#123;</span><br><span class="line">            k = -k;</span><br><span class="line">            for(int i = 0; i &lt; code.size(); i++) &#123;</span><br><span class="line">                int num=0;</span><br><span class="line">                for(int j = 1; j &lt;= k; j++) &#123;</span><br><span class="line">                    num += code[(i-j+code.size())%code.size()];</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            for(int i = 0; i &lt; code.size(); i++) &#123;</span><br><span class="line">                ans.push_back(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1668. 最大重复子字符串</title>
    <url>/2022/11/03/LeetCode/1668-%E6%9C%80%E5%A4%A7%E9%87%8D%E5%A4%8D%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1668-最大重复子字符串"><a href="#1668-最大重复子字符串" class="headerlink" title="1668. 最大重复子字符串"></a><a href="https://leetcode.cn/problems/maximum-repeating-substring/description/">1668. 最大重复子字符串</a></h1><p>给你一个字符串 sequence ，如果字符串 word 连续重复 k 次形成的字符串是 sequence 的一个子字符串，那么单词 word 的 重复值为 k 。单词 word 的 最大重复值 是单词 word 在 sequence 中最大的重复值。如果 word 不是 sequence 的子串，那么重复值 k 为 0 。</p>
<p>给你一个字符串 sequence 和 word ，请你返回 最大重复值 k 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：sequence = &quot;ababc&quot;, word = &quot;ab&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：&quot;abab&quot; 是 &quot;ababc&quot; 的子字符串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：sequence = &quot;ababc&quot;, word = &quot;ba&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：&quot;ba&quot; 是 &quot;ababc&quot; 的子字符串，但 &quot;baba&quot; 不是 &quot;ababc&quot; 的子字符串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：sequence = &quot;ababc&quot;, word = &quot;ac&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;ac&quot; 不是 &quot;ababc&quot; 的子字符串。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= sequence.length &lt;= 100</li>
<li>1 &lt;= word.length &lt;= 100</li>
<li>sequence 和 word 都只包含小写英文字母。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRepeating</span><span class="params">(string sequence, string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = sequence.<span class="built_in">size</span>(), m = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fail</span><span class="params">(m, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> j = fail[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; word[j + <span class="number">1</span>] != word[i]) &#123;</span><br><span class="line">                j = fail[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (word[j + <span class="number">1</span>] == word[i]) &#123;</span><br><span class="line">                fail[i] = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; word[j + <span class="number">1</span>] != sequence[i]) &#123;</span><br><span class="line">                j = fail[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (word[j + <span class="number">1</span>] == sequence[i]) &#123;</span><br><span class="line">                ++j;</span><br><span class="line">                <span class="keyword">if</span> (j == m - <span class="number">1</span>) &#123;</span><br><span class="line">                    f[i] = (i &gt;= m ? f[i - m] : <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">                    j = fail[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(m+n)$</li>
<li>空间复杂度：$O(m+n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1678. 设计 Goal 解析器</title>
    <url>/2022/11/06/LeetCode/1678-%E8%AE%BE%E8%AE%A1-Goal-%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1678-设计-Goal-解析器"><a href="#1678-设计-Goal-解析器" class="headerlink" title="1678. 设计 Goal 解析器"></a><a href="https://leetcode.cn/problems/goal-parser-interpretation/description/">1678. 设计 Goal 解析器</a></h1><p>请你设计一个可以解释字符串 command 的 Goal 解析器 。command 由 “G”、”()” 和/或 “(al)” 按某种顺序组成。Goal 解析器会将 “G” 解释为字符串 “G”、”()” 解释为字符串 “o” ，”(al)” 解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。</p>
<p>给你字符串 command ，返回 Goal 解析器 对 command 的解释结果。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：command = &quot;G()(al)&quot;</span><br><span class="line">输出：&quot;Goal&quot;</span><br><span class="line">解释：Goal 解析器解释命令的步骤如下所示：</span><br><span class="line">G -&gt; G</span><br><span class="line">() -&gt; o</span><br><span class="line">(al) -&gt; al</span><br><span class="line">最后连接得到的结果是 &quot;Goal&quot;</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：command = &quot;G()()()()(al)&quot;</span><br><span class="line">输出：&quot;Gooooal&quot;</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：command = &quot;(al)G(al)()()G&quot;</span><br><span class="line">输出：&quot;alGalooG&quot;</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= command.length &lt;= 100</li>
<li>command 由 “G”、”()” 和/或 “(al)” 按某种顺序组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">interpret</span><span class="params">(string command)</span> </span>&#123;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; command.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (command[i] == <span class="string">&#x27;G&#x27;</span>) ans += command[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (command[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (command[i + <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>) ans += <span class="string">&quot;o&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> ans += <span class="string">&quot;al&quot;</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1684. 统计一致字符串的数目</title>
    <url>/2022/11/08/LeetCode/1684-%E7%BB%9F%E8%AE%A1%E4%B8%80%E8%87%B4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1684-统计一致字符串的数目"><a href="#1684-统计一致字符串的数目" class="headerlink" title="1684. 统计一致字符串的数目"></a><a href="https://leetcode.cn/problems/count-the-number-of-consistent-strings/description/">1684. 统计一致字符串的数目</a></h1><p>给你一个由不同字符组成的字符串 allowed 和一个字符串数组 words 。如果一个字符串的每一个字符都在 allowed 中，就称这个字符串是 一致字符串 。</p>
<p>请你返回 words 数组中 一致字符串 的数目。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：allowed = &quot;ab&quot;, words = [&quot;ad&quot;,&quot;bd&quot;,&quot;aaab&quot;,&quot;baa&quot;,&quot;badab&quot;]</span><br><span class="line">输出：2</span><br><span class="line">解释：字符串 &quot;aaab&quot; 和 &quot;baa&quot; 都是一致字符串，因为它们只包含字符 &#x27;a&#x27; 和 &#x27;b&#x27; 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：allowed = &quot;abc&quot;, words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;ab&quot;,&quot;ac&quot;,&quot;bc&quot;,&quot;abc&quot;]</span><br><span class="line">输出：7</span><br><span class="line">解释：所有字符串都是一致的。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：allowed = &quot;cad&quot;, words = [&quot;cc&quot;,&quot;acd&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bac&quot;,&quot;bad&quot;,&quot;ac&quot;,&quot;d&quot;]</span><br><span class="line">输出：4</span><br><span class="line">解释：字符串 &quot;cc&quot;，&quot;acd&quot;，&quot;ac&quot; 和 &quot;d&quot; 是一致字符串。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= words.length &lt;= $10^4$</li>
<li>1 &lt;= allowed.length &lt;= 26</li>
<li>1 &lt;= words[i].length &lt;= 10</li>
<li>allowed 中的字符 互不相同 。</li>
<li>words[i] 和 allowed 只包含小写英文字母。</li>
</ul>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countConsistentStrings</span><span class="params">(string allowed, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> s : allowed) &#123;</span><br><span class="line">            a |= <span class="number">1</span> &lt;&lt; (s - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> str : words[i]) b |= <span class="number">1</span> &lt;&lt; (str - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ((a | b) == a) ans++;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n+\sum m_i)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1687. 从仓库到码头运输箱子</title>
    <url>/2022/12/05/LeetCode/1687-%E4%BB%8E%E4%BB%93%E5%BA%93%E5%88%B0%E7%A0%81%E5%A4%B4%E8%BF%90%E8%BE%93%E7%AE%B1%E5%AD%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1687-从仓库到码头运输箱子"><a href="#1687-从仓库到码头运输箱子" class="headerlink" title="1687. 从仓库到码头运输箱子"></a><a href="https://leetcode.cn/problems/delivering-boxes-from-storage-to-ports/description/">1687. 从仓库到码头运输箱子</a></h1><p>你有一辆货运卡车，你需要用这一辆车把一些箱子从仓库运送到码头。这辆卡车每次运输有 箱子数目的限制 和 总重量的限制 。</p>
<p>给你一个箱子数组 boxes 和三个整数 portsCount, maxBoxes 和 maxWeight ，其中 boxes[i] = [ports​​i​, weighti] 。</p>
<ul>
<li>ports​​i 表示第 i 个箱子需要送达的码头， weightsi 是第 i 个箱子的重量。</li>
<li>portsCount 是码头的数目。</li>
<li>maxBoxes 和 maxWeight 分别是卡车每趟运输箱子数目和重量的限制。</li>
</ul>
<p>箱子需要按照 数组顺序 运输，同时每次运输需要遵循以下步骤：</p>
<ul>
<li>卡车从 boxes 队列中按顺序取出若干个箱子，但不能违反 maxBoxes 和 maxWeight 限制。</li>
<li>对于在卡车上的箱子，我们需要 按顺序 处理它们，卡车会通过 一趟行程 将最前面的箱子送到目的地码头并卸货。如果卡车已经在对应的码头，那么不需要 额外行程 ，箱子也会立马被卸货。</li>
<li>卡车上所有箱子都被卸货后，卡车需要 一趟行程 回到仓库，从箱子队列里再取出一些箱子。</li>
</ul>
<p>卡车在将所有箱子运输并卸货后，最后必须回到仓库。</p>
<p>请你返回将所有箱子送到相应码头的 最少行程 次数。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3</span><br><span class="line">输出：4</span><br><span class="line">解释：最优策略如下：</span><br><span class="line"><span class="bullet">-</span> 卡车将所有箱子装上车，到达码头 1 ，然后去码头 2 ，然后再回到码头 1 ，最后回到仓库，总共需要 4 趟行程。</span><br><span class="line">所以总行程数为 4 。</span><br><span class="line">注意到第一个和第三个箱子不能同时被卸货，因为箱子需要按顺序处理（也就是第二个箱子需要先被送到码头 2 ，然后才能处理第三个箱子）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6</span><br><span class="line">输出：6</span><br><span class="line">解释：最优策略如下：</span><br><span class="line"><span class="bullet">-</span> 卡车首先运输第一个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第二、第三、第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第五个箱子，到达码头 3 ，回到仓库，总共 2 趟行程。</span><br><span class="line">总行程数为 2 + 2 + 2 = 6 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7</span><br><span class="line">输出：6</span><br><span class="line">解释：最优策略如下：</span><br><span class="line"><span class="bullet">-</span> 卡车运输第一和第二个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第三和第四个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第五和第六个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line">总行程数为 2 + 2 + 2 = 6 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7</span><br><span class="line">输出：14</span><br><span class="line">解释：最优策略如下：</span><br><span class="line"><span class="bullet">-</span> 卡车运输第一个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第二个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第三和第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第五个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第六和第七个箱子，到达码头 3 ，然后去码头 4 ，然后回到仓库，总共 3 趟行程。</span><br><span class="line"><span class="bullet">-</span> 卡车运输第八和第九个箱子，到达码头 1 ，然后去码头 5 ，然后回到仓库，总共 3 趟行程。</span><br><span class="line">总行程数为 2 + 2 + 2 + 2 + 3 + 3 = 14 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= boxes.length &lt;= $10^5$</li>
<li>1 &lt;= portsCount, maxBoxes, maxWeight &lt;= $10^5$</li>
<li>1 &lt;= ports​​i &lt;= portsCount</li>
<li>1 &lt;= weightsi &lt;= maxWeight</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">boxDelivering</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; boxes, <span class="type">int</span> portsCount, <span class="type">int</span> maxBoxes, <span class="type">int</span> maxWeight)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = boxes.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">w</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">neg</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">W</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            p[i] = boxes[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            w[i] = boxes[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                neg[i] = neg[i - <span class="number">1</span>] + (p[i - <span class="number">1</span>] != p[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            W[i] = W[i - <span class="number">1</span>] + w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; opt = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i - opt.<span class="built_in">front</span>() &gt; maxBoxes || W[i] - W[opt.<span class="built_in">front</span>()] &gt; maxWeight) &#123;</span><br><span class="line">                opt.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            f[i] = g[opt.<span class="built_in">front</span>()] + neg[i] + <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i != n) &#123;</span><br><span class="line">                g[i] = f[i] - neg[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span> (!opt.<span class="built_in">empty</span>() &amp;&amp; g[i] &lt;= g[opt.<span class="built_in">back</span>()]) &#123;</span><br><span class="line">                    opt.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                opt.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>1691. 堆叠长方体的最大高度</title>
    <url>/2022/12/10/LeetCode/1691-%E5%A0%86%E5%8F%A0%E9%95%BF%E6%96%B9%E4%BD%93%E7%9A%84%E6%9C%80%E5%A4%A7%E9%AB%98%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1691-堆叠长方体的最大高度"><a href="#1691-堆叠长方体的最大高度" class="headerlink" title="1691. 堆叠长方体的最大高度"></a><a href="https://leetcode.cn/problems/maximum-height-by-stacking-cuboids/description/">1691. 堆叠长方体的最大高度</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxHeight</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; cuboids)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = cuboids.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; v : cuboids) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(cuboids.<span class="built_in">begin</span>(), cuboids.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp; a,<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] + a[<span class="number">1</span>] + a[<span class="number">2</span>] &lt; b[<span class="number">0</span>] + b[<span class="number">1</span>] + b[<span class="number">2</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = cuboids[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cuboids[i][<span class="number">0</span>] &gt;= cuboids[j][<span class="number">0</span>] &amp;&amp; </span><br><span class="line">                    cuboids[i][<span class="number">1</span>] &gt;= cuboids[j][<span class="number">1</span>] &amp;&amp; </span><br><span class="line">                    cuboids[i][<span class="number">2</span>] &gt;= cuboids[j][<span class="number">2</span>]) &#123;</span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + cuboids[i][<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n^2)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>1694. 重新格式化电话号码</title>
    <url>/2022/10/01/LeetCode/1694-%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/reformat-phone-number/">https://leetcode.cn/problems/reformat-phone-number/</a> 给你一个字符串形式的电话号码 number 。number 由数字、空格 ‘ ‘、和破折号 ‘-‘ 组成。 请你按下述方式重新格式化电话号码。 首先，删除 所有的空格和破折号。 其次，将数组从左到右 每 3 个一组 分块，直到 剩下 4 个或更少数字。剩下的数字将按下述规定再分块： 2 个数字：单个含 2 个数字的块。 3 个数字：单个含 3 个数字的块。 4 个数字：两个分别含 2 个数字的块。 最后用破折号将这些块连接起来。注意，重新格式化过程中 不应该 生成仅含 1 个数字的块，并且 最多 生成两个含 2 个数字的块。 返回格式化后的电话号码。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：number = &quot;1-23-45 6&quot;</span><br><span class="line">输出：&quot;123-456&quot;</span><br><span class="line">解释：数字是 &quot;123456&quot;</span><br><span class="line">步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 &quot;123&quot; 。</span><br><span class="line">步骤 2：剩下 3 个数字，将它们放入单个含 3 个数字的块。第 2 个块是 &quot;456&quot; 。</span><br><span class="line">连接这些块后得到 &quot;123-456&quot; 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：number = &quot;123 4-567&quot;</span><br><span class="line">输出：&quot;123-45-67&quot;</span><br><span class="line">解释：数字是 &quot;1234567&quot;.</span><br><span class="line">步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 &quot;123&quot; 。</span><br><span class="line">步骤 2：剩下 4 个数字，所以将它们分成两个含 2 个数字的块。这 2 块分别是 &quot;45&quot; 和 &quot;67&quot; 。</span><br><span class="line">连接这些块后得到 &quot;123-45-67&quot; 。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：number = &quot;123 4-5678&quot;</span><br><span class="line">输出：&quot;123-456-78&quot;</span><br><span class="line">解释：数字是 &quot;12345678&quot; 。</span><br><span class="line">步骤 1：第 1 个块 &quot;123&quot; 。</span><br><span class="line">步骤 2：第 2 个块 &quot;456&quot; 。</span><br><span class="line">步骤 3：剩下 2 个数字，将它们放入单个含 2 个数字的块。第 3 个块是 &quot;78&quot; 。</span><br><span class="line">连接这些块后得到 &quot;123-456-78&quot; 。</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：number = &quot;12&quot;</span><br><span class="line">输出：&quot;12&quot;</span><br></pre></td></tr></table></figure>
<p>示例 5：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：number = &quot;--17-5 229 35-39475 &quot;</span><br><span class="line">输出：&quot;175-229-353-94-75&quot;</span><br></pre></td></tr></table></figure>
<p>  提示：</p>
<ul>
<li>2 &lt;= number.length &lt;= 100</li>
<li>number 由数字和字符 ‘-‘ 及 ‘ ‘ 组成。</li>
<li>number 中至少含 2 个数字。</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string reformatNumber(string number) &#123;</span><br><span class="line">        deque&lt;char&gt; d;</span><br><span class="line">        for(int i=0;i&lt;number.length();i++)&#123; </span><br><span class="line">            if(number[i]!=&#x27; &#x27;&amp;&amp;number[i]!=&#x27;-&#x27;) </span><br><span class="line">                d.push_back(number[i]); </span><br><span class="line">        &#125; </span><br><span class="line">        string ans=&quot;&quot;; </span><br><span class="line">        while(d.size()&gt;4)&#123;</span><br><span class="line">            for(int i=0;i&lt;3;i++)&#123;</span><br><span class="line">                ans+=d.front();</span><br><span class="line">                d.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=&#x27;-&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(d.size()==4)&#123;</span><br><span class="line">            for(int i=0;i&lt;2;i++)&#123;</span><br><span class="line">                ans+=d.front();</span><br><span class="line">                d.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=&#x27;-&#x27;;</span><br><span class="line">            for(int i=0;i&lt;2;i++)&#123;</span><br><span class="line">                ans+=d.front();</span><br><span class="line">                d.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(d.size()==3)&#123;</span><br><span class="line">            for(int i=0;i&lt;3;i++)&#123;</span><br><span class="line">                ans+=d.front();</span><br><span class="line">                d.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            for(int i=0;i&lt;2;i++)&#123;</span><br><span class="line">                ans+=d.front();</span><br><span class="line">                d.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1697. 检查边长度限制的路径是否存在</title>
    <url>/2022/12/14/LeetCode/1697-%E6%A3%80%E6%9F%A5%E8%BE%B9%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1697-检查边长度限制的路径是否存在"><a href="#1697-检查边长度限制的路径是否存在" class="headerlink" title="1697. 检查边长度限制的路径是否存在"></a><a href="https://leetcode.cn/problems/checking-existence-of-edge-length-limited-paths/description/">1697. 检查边长度限制的路径是否存在</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 并查集模板，包含路径压缩（参考 findset 函数）以及按秩合并（参考 sz 变量）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fa;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sz;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> comp_cnt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n), <span class="built_in">comp_cnt</span>(_n), <span class="built_in">fa</span>(_n), <span class="built_in">sz</span>(_n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(fa.<span class="built_in">begin</span>(), fa.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findset</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fa[x] == x ? x : fa[x] = <span class="built_in">findset</span>(fa[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">findset</span>(x);</span><br><span class="line">        y = <span class="built_in">findset</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sz[x] &lt; sz[y]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        fa[y] = x;</span><br><span class="line">        sz[x] += sz[y];</span><br><span class="line">        --comp_cnt;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">findset</span>(x);</span><br><span class="line">        y = <span class="built_in">findset</span>(y);</span><br><span class="line">        <span class="keyword">return</span> x == y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">distanceLimitedPathsExist</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edgeList, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将 queries 按照边权限制从小到大排序</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">qid</span><span class="params">(queries.size())</span></span>;</span><br><span class="line">        <span class="built_in">iota</span>(qid.<span class="built_in">begin</span>(), qid.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(qid.<span class="built_in">begin</span>(), qid.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">            <span class="keyword">return</span> queries[i][<span class="number">2</span>] &lt; queries[j][<span class="number">2</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将 edgeList 按照边权从小到大排序</span></span><br><span class="line">        <span class="built_in">sort</span>(edgeList.<span class="built_in">begin</span>(), edgeList.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; e1, <span class="type">const</span> <span class="keyword">auto</span>&amp; e2) &#123;</span><br><span class="line">            <span class="keyword">return</span> e1[<span class="number">2</span>] &lt; e2[<span class="number">2</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 并查集</span></span><br><span class="line">        <span class="function">UF <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">ans</span><span class="params">(queries.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> query: qid) &#123;</span><br><span class="line">            <span class="comment">// 往并查集中添加边直到边权关系 dis_i &lt; limit_j 不满足</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; edgeList.<span class="built_in">size</span>() &amp;&amp; edgeList[i][<span class="number">2</span>] &lt; queries[query][<span class="number">2</span>]) &#123;</span><br><span class="line">                uf.<span class="built_in">unite</span>(edgeList[i][<span class="number">0</span>], edgeList[i][<span class="number">1</span>]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用并查集判断连通性</span></span><br><span class="line">            ans[query] = uf.<span class="built_in">connected</span>(queries[query][<span class="number">0</span>], queries[query][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(mlogm+qlogq)$</li>
<li>空间复杂度：$O(n+logm+q)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>1700. 无法吃午餐的学生数量</title>
    <url>/2022/10/19/LeetCode/1700-%E6%97%A0%E6%B3%95%E5%90%83%E5%8D%88%E9%A4%90%E7%9A%84%E5%AD%A6%E7%94%9F%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1700-无法吃午餐的学生数量"><a href="#1700-无法吃午餐的学生数量" class="headerlink" title="1700. 无法吃午餐的学生数量"></a><a href="https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/">1700. 无法吃午餐的学生数量</a></h1><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p>
<ul>
<li>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。</li>
<li>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</li>
</ul>
<p>给你两个整数数组 students 和 sandwiches ，其中 sandwiches[i] 是栈里面第 i​​​​​​ 个三明治的类型（i = 0 是栈的顶部）， students[j] 是初始队列里第 j​​​​​​ 名学生对三明治的喜好（j = 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：students = [1,1,0,0], sandwiches = [0,1,0,1]</span><br><span class="line">输出：0 </span><br><span class="line">解释：</span><br><span class="line"><span class="bullet">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,0,0,1]。</span><br><span class="line"><span class="bullet">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,0,1,1]。</span><br><span class="line"><span class="bullet">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [0,1,1]，三明治栈为 sandwiches = [1,0,1]。</span><br><span class="line"><span class="bullet">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,1,0]。</span><br><span class="line"><span class="bullet">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1,0]，三明治栈为 sandwiches = [0,1]。</span><br><span class="line"><span class="bullet">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,1]。</span><br><span class="line"><span class="bullet">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1]，三明治栈为 sandwiches = [1]。</span><br><span class="line"><span class="bullet">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = []，三明治栈为 sandwiches = []。</span><br><span class="line">所以所有学生都有三明治吃。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= students.length, sandwiches.length &lt;= 100</li>
<li>students.length == sandwiches.length</li>
<li>sandwiches[i] 要么是 0 ，要么是 1 。</li>
<li>students[i] 要么是 0 ，要么是 1 。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>根据题意模拟即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countStudents</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; students, vector&lt;<span class="type">int</span>&gt;&amp; sandwiches)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a[<span class="number">2</span>]=&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;students.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            a[students[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sandwiches.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[sandwiches[i]])&#123;</span><br><span class="line">                a[sandwiches[i]]--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]+a[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1703. 得到连续 K 个 1 的最少相邻交换次数</title>
    <url>/2022/12/18/LeetCode/1703-%E5%BE%97%E5%88%B0%E8%BF%9E%E7%BB%AD-K-%E4%B8%AA-1-%E7%9A%84%E6%9C%80%E5%B0%91%E7%9B%B8%E9%82%BB%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1703-得到连续-K-个-1-的最少相邻交换次数"><a href="#1703-得到连续-K-个-1-的最少相邻交换次数" class="headerlink" title="1703. 得到连续 K 个 1 的最少相邻交换次数"></a><a href="https://leetcode.cn/problems/minimum-adjacent-swaps-for-k-consecutive-ones/description/">1703. 得到连续 K 个 1 的最少相邻交换次数</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; g;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                g.<span class="built_in">emplace_back</span>(i - g.<span class="built_in">size</span>());</span><br><span class="line">                preSum.<span class="built_in">emplace_back</span>(preSum.<span class="built_in">back</span>() + g.<span class="built_in">back</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = g.<span class="built_in">size</span>(), res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m - k; i++) &#123;</span><br><span class="line">            <span class="type">int</span> mid = i + k / <span class="number">2</span>;</span><br><span class="line">            res = <span class="built_in">min</span>(res, (<span class="number">1</span> - k % <span class="number">2</span>) * g[mid] +  \</span><br><span class="line">                           (preSum[i + k] - preSum[mid + <span class="number">1</span>]) - \</span><br><span class="line">                           (preSum[mid] - preSum[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>1704. 判断字符串的两半是否相似</title>
    <url>/2022/11/11/LeetCode/1704-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%A4%E5%8D%8A%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BC%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1704-判断字符串的两半是否相似"><a href="#1704-判断字符串的两半是否相似" class="headerlink" title="1704. 判断字符串的两半是否相似"></a><a href="https://leetcode.cn/problems/determine-if-string-halves-are-alike/description/">1704. 判断字符串的两半是否相似</a></h1><p>给你一个偶数长度的字符串 s 。将其拆分成长度相同的两半，前一半为 a ，后一半为 b 。</p>
<p>两个字符串 相似 的前提是它们都含有相同数目的元音（’a’，’e’，’i’，’o’，’u’，’A’，’E’，’I’，’O’，’U’）。注意，s 可能同时含有大写和小写字母。</p>
<p>如果 a 和 b 相似，返回 true ；否则，返回 false 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;book&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：a = &quot;bo&quot; 且 b = &quot;ok&quot; 。a 中有 1 个元音，b 也有 1 个元音。所以，a 和 b 相似。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;textbook&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：a = &quot;text&quot; 且 b = &quot;book&quot; 。a 中有 1 个元音，b 中有 2 个元音。因此，a 和 b 不相似。</span><br><span class="line">注意，元音 o 在 b 中出现两次，记为 2 个。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>2 &lt;= s.length &lt;= 1000</li>
<li>s.length 是偶数</li>
<li>s 由 大写和小写 字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">halvesAreAlike</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;a&#x27;</span> || s[i] == <span class="string">&#x27;A&#x27;</span> || s[i] == <span class="string">&#x27;e&#x27;</span> || s[i] == <span class="string">&#x27;E&#x27;</span> || s[i] == <span class="string">&#x27;i&#x27;</span> || s[i] == <span class="string">&#x27;I&#x27;</span> || s[i] == <span class="string">&#x27;o&#x27;</span> || s[i] == <span class="string">&#x27;O&#x27;</span> || s[i] == <span class="string">&#x27;u&#x27;</span> || s[i] == <span class="string">&#x27;U&#x27;</span>) a++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">length</span>() / <span class="number">2</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;a&#x27;</span> || s[i] == <span class="string">&#x27;A&#x27;</span> || s[i] == <span class="string">&#x27;e&#x27;</span> || s[i] == <span class="string">&#x27;E&#x27;</span> || s[i] == <span class="string">&#x27;i&#x27;</span> || s[i] == <span class="string">&#x27;I&#x27;</span> || s[i] == <span class="string">&#x27;o&#x27;</span> || s[i] == <span class="string">&#x27;O&#x27;</span> || s[i] == <span class="string">&#x27;u&#x27;</span> || s[i] == <span class="string">&#x27;U&#x27;</span>) b++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">bool</span>)(a == b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1710. 卡车上的最大单元数</title>
    <url>/2022/11/15/LeetCode/1710-%E5%8D%A1%E8%BD%A6%E4%B8%8A%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8D%95%E5%85%83%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1710-卡车上的最大单元数"><a href="#1710-卡车上的最大单元数" class="headerlink" title="1710. 卡车上的最大单元数"></a><a href="https://leetcode.cn/problems/maximum-units-on-a-truck/description/">1710. 卡车上的最大单元数</a></h1><p>请你将一些箱子装在 一辆卡车 上。给你一个二维数组 boxTypes ，其中 boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi] ：</p>
<ul>
<li>numberOfBoxesi 是类型 i 的箱子的数量。</li>
<li>numberOfUnitsPerBoxi 是类型 i 每个箱子可以装载的单元数量。</li>
</ul>
<p>整数 truckSize 表示卡车上可以装载 箱子 的 最大数量 。只要箱子数量不超过 truckSize ，你就可以选择任意箱子装到卡车上。</p>
<p>返回卡车可以装载 单元 的 最大 总数。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4</span><br><span class="line">输出：8</span><br><span class="line">解释：箱子的情况如下：</span><br><span class="line"><span class="bullet">-</span> 1 个第一类的箱子，里面含 3 个单元。</span><br><span class="line"><span class="bullet">-</span> 2 个第二类的箱子，每个里面含 2 个单元。</span><br><span class="line"><span class="bullet">-</span> 3 个第三类的箱子，每个里面含 1 个单元。</span><br><span class="line">可以选择第一类和第二类的所有箱子，以及第三类的一个箱子。</span><br><span class="line">单元总数 = (1 <span class="emphasis">* 3) + (2 *</span> 2) + (1 <span class="emphasis">* 1) = 8</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10</span><br><span class="line">输出：91</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= boxTypes.length &lt;= 1000</li>
<li>1 &lt;= numberOfBoxesi, numberOfUnitsPerBoxi &lt;= 1000</li>
<li>1 &lt;= truckSize &lt;= $10^6$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumUnits</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; boxTypes, <span class="type">int</span> truckSize)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(boxTypes.<span class="built_in">begin</span>(), boxTypes.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;<span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> box : boxTypes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (truckSize) &#123;</span><br><span class="line">                ans += <span class="built_in">min</span>(box[<span class="number">0</span>], truckSize) * box[<span class="number">1</span>];</span><br><span class="line">                truckSize = <span class="built_in">max</span>(truckSize - box[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(nlog(n))$</li>
<li>空间复杂度：$O(nlog(n))$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1732. 找到最高海拔</title>
    <url>/2022/11/19/LeetCode/1732-%E6%89%BE%E5%88%B0%E6%9C%80%E9%AB%98%E6%B5%B7%E6%8B%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1732-找到最高海拔"><a href="#1732-找到最高海拔" class="headerlink" title="1732. 找到最高海拔"></a><a href="https://leetcode.cn/problems/find-the-highest-altitude/description/">1732. 找到最高海拔</a></h1><p>有一个自行车手打算进行一场公路骑行，这条路线总共由 n + 1 个不同海拔的点组成。自行车手从海拔为 0 的点 0 开始骑行。</p>
<p>给你一个长度为 n 的整数数组 gain ，其中 gain[i] 是点 i 和点 i + 1 的 净海拔高度差（0 &lt;= i &lt; n）。请你返回 最高点的海拔 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：gain = [-5,1,5,0,-7]</span><br><span class="line">输出：1</span><br><span class="line">解释：海拔高度依次为 [0,-5,-4,1,1,-6] 。最高海拔为 1 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：gain = [-4,-3,-2,-1,4,3,2]</span><br><span class="line">输出：0</span><br><span class="line">解释：海拔高度依次为 [0,-4,-7,-9,-10,-6,-3,-1] 。最高海拔为 0 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>n == gain.length</li>
<li>1 &lt;= n &lt;= 100</li>
<li>-100 &lt;= gain[i] &lt;= 100</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestAltitude</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gain)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> g : gain) &#123;</span><br><span class="line">            t += g;</span><br><span class="line">            ans = <span class="built_in">max</span>(t, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1742. 盒子中小球的最大数量</title>
    <url>/2022/11/23/LeetCode/1742-%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1742-盒子中小球的最大数量"><a href="#1742-盒子中小球的最大数量" class="headerlink" title="1742. 盒子中小球的最大数量"></a><a href="https://leetcode.cn/problems/maximum-number-of-balls-in-a-box/description/">1742. 盒子中小球的最大数量</a></h1><p>你在一家生产小球的玩具厂工作，有 n 个小球，编号从 lowLimit 开始，到 highLimit 结束（包括 lowLimit 和 highLimit ，即 n == highLimit - lowLimit + 1）。另有无限数量的盒子，编号从 1 到 infinity 。</p>
<p>你的工作是将每个小球放入盒子中，其中盒子的编号应当等于小球编号上每位数字的和。例如，编号 321 的小球应当放入编号 3 + 2 + 1 = 6 的盒子，而编号 10 的小球应当放入编号 1 + 0 = 1 的盒子。</p>
<p>给你两个整数 lowLimit 和 highLimit ，返回放有最多小球的盒子中的小球数量。如果有多个盒子都满足放有最多小球，只需返回其中任一盒子的小球数量。</p>
<p>示例 1：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：lowLimit = 1, highLimit = 10</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">盒子编号：1 2 3 4 5 6 7 8 9 10 11 ...</span><br><span class="line">小球数量：2 1 1 1 1 1 1 1 1 0  0  ...</span><br><span class="line">编号 1 的盒子放有最多小球，小球数量为 2 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：lowLimit = 5, highLimit = 15</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">盒子编号：1 2 3 4 5 6 7 8 9 10 11 ...</span><br><span class="line">小球数量：1 1 1 1 2 2 1 1 1 0  0  ...</span><br><span class="line">编号 5 和 6 的盒子放有最多小球，每个盒子中的小球数量都是 2 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：lowLimit = 19, highLimit = 28</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">盒子编号：1 2 3 4 5 6 7 8 9 10 11 12 ...</span><br><span class="line">小球数量：0 1 1 1 1 1 1 1 1 2  0  0  ...</span><br><span class="line">编号 10 的盒子放有最多小球，小球数量为 2 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= lowLimit &lt;= highLimit &lt;= $10^5$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countBalls</span><span class="params">(<span class="type">int</span> lowLimit, <span class="type">int</span> highLimit)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; count;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lowLimit; i &lt;= highLimit; i++) &#123;</span><br><span class="line">            <span class="type">int</span> box = <span class="number">0</span>, x = i;</span><br><span class="line">            <span class="keyword">while</span> (x) &#123;</span><br><span class="line">                box += x % <span class="number">10</span>;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count[box]++;</span><br><span class="line">            res = <span class="built_in">max</span>(res, count[box]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(nloghighLimit)$</li>
<li>空间复杂度：$O(loghighLimit)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1752. 检查数组是否经排序和轮转得到</title>
    <url>/2022/11/27/LeetCode/1752-%E6%A3%80%E6%9F%A5%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E7%BB%8F%E6%8E%92%E5%BA%8F%E5%92%8C%E8%BD%AE%E8%BD%AC%E5%BE%97%E5%88%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1752-检查数组是否经排序和轮转得到"><a href="#1752-检查数组是否经排序和轮转得到" class="headerlink" title="1752. 检查数组是否经排序和轮转得到"></a><a href="https://leetcode.cn/problems/check-if-array-is-sorted-and-rotated/description/">1752. 检查数组是否经排序和轮转得到</a></h1><p>给你一个数组 nums 。nums 的源数组中，所有元素与 nums 相同，但按非递减顺序排列。</p>
<p>如果 nums 能够由源数组轮转若干位置（包括 0 个位置）得到，则返回 true ；否则，返回 false 。</p>
<p>源数组中可能存在 重复项 。</p>
<p>注意：我们称数组 A 在轮转 x 个位置后得到长度相同的数组 B ，当它们满足 A[i] == B[(i+x) % A.length] ，其中 % 为取余运算。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,4,5,1,2]</span><br><span class="line">输出：true</span><br><span class="line">解释：[1,2,3,4,5] 为有序的源数组。</span><br><span class="line">可以轮转 x = 3 个位置，使新数组从值为 3 的元素开始：[3,4,5,1,2] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,1,3,4]</span><br><span class="line">输出：false</span><br><span class="line">解释：源数组无法经轮转得到 nums 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：true</span><br><span class="line">解释：[1,2,3] 为有序的源数组。</span><br><span class="line">可以轮转 x = 0 个位置（即不轮转）得到 nums 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= nums.length &lt;= 100</li>
<li>1 &lt;= nums[i] &lt;= 100</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[i<span class="number">-1</span>] &amp;&amp; flag) &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; nums[i<span class="number">-1</span>] &amp;&amp; !flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt;= nums[nums.<span class="built_in">size</span>()<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1758. 生成交替二进制字符串的最少操作数</title>
    <url>/2022/11/29/LeetCode/1758-%E7%94%9F%E6%88%90%E4%BA%A4%E6%9B%BF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1758-生成交替二进制字符串的最少操作数"><a href="#1758-生成交替二进制字符串的最少操作数" class="headerlink" title="1758. 生成交替二进制字符串的最少操作数"></a><a href="https://leetcode.cn/problems/minimum-changes-to-make-alternating-binary-string/description/">1758. 生成交替二进制字符串的最少操作数</a></h1><p>给你一个仅由字符 ‘0’ 和 ‘1’ 组成的字符串 s 。一步操作中，你可以将任一 ‘0’ 变成 ‘1’ ，或者将 ‘1’ 变成 ‘0’ 。</p>
<p>交替字符串 定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串 “010” 是交替字符串，而字符串 “0100” 不是。</p>
<p>返回使 s 变成 交替字符串 所需的 最少 操作数。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;0100&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：如果将最后一个字符变为 &#x27;1&#x27; ，s 就变成 &quot;0101&quot; ，即符合交替字符串定义。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;10&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：s 已经是交替字符串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;1111&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：需要 2 步操作得到 &quot;0101&quot; 或 &quot;1010&quot; 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= $10^4$</li>
<li>s[i] 是 ‘0’ 或 ‘1’</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; i%<span class="number">2</span> == <span class="number">0</span>) ans++;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; i%<span class="number">2</span> == <span class="number">1</span>) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(ans, (<span class="type">int</span>)s.<span class="built_in">length</span>() - ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1764. 通过连接另一个数组的子数组得到一个数组</title>
    <url>/2022/12/17/LeetCode/1764-%E9%80%9A%E8%BF%87%E8%BF%9E%E6%8E%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1764-通过连接另一个数组的子数组得到一个数组"><a href="#1764-通过连接另一个数组的子数组得到一个数组" class="headerlink" title="1764. 通过连接另一个数组的子数组得到一个数组"></a><a href="https://leetcode.cn/problems/form-array-by-concatenating-subarrays-of-another-array/description/">1764. 通过连接另一个数组的子数组得到一个数组</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canChoose</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; groups, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>, q= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == groups[p][q]) &#123;</span><br><span class="line">                <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (; j &lt; groups[p].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i + j &gt;= nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i + j] != groups[p][q + j]) &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    i += j - <span class="number">1</span>;</span><br><span class="line">                    p++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p == groups.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1768. 交替合并字符串</title>
    <url>/2022/10/23/LeetCode/1768-%E4%BA%A4%E6%9B%BF%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1768-交替合并字符串"><a href="#1768-交替合并字符串" class="headerlink" title="1768. 交替合并字符串"></a><a href="https://leetcode.cn/problems/merge-strings-alternately/">1768. 交替合并字符串</a></h1><p>给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p>
<p>返回 合并后的字符串 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word1 = &quot;abc&quot;, word2 = &quot;pqr&quot;</span><br><span class="line">输出：&quot;apbqcr&quot;</span><br><span class="line">解释：字符串合并情况如下所示：</span><br><span class="line">word1：  a   b   c</span><br><span class="line">word2：    p   q   r</span><br><span class="line">合并后：  a p b q c r</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word1 = &quot;ab&quot;, word2 = &quot;pqrs&quot;</span><br><span class="line">输出：&quot;apbqrs&quot;</span><br><span class="line">解释：注意，word2 比 word1 长，&quot;rs&quot; 需要追加到合并后字符串的末尾。</span><br><span class="line">word1：  a   b </span><br><span class="line">word2：    p   q   r   s</span><br><span class="line">合并后：  a p b q   r   s</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word1 = &quot;abcd&quot;, word2 = &quot;pq&quot;</span><br><span class="line">输出：&quot;apbqcd&quot;</span><br><span class="line">解释：注意，word1 比 word2 长，&quot;cd&quot; 需要追加到合并后字符串的末尾。</span><br><span class="line">word1：  a   b   c   d</span><br><span class="line">word2：    p   q </span><br><span class="line">合并后：  a p b q c   d</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= word1.length, word2.length &lt;= 100</li>
<li>word1 和 word2 由小写英文字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">mergeAlternately</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        string ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;word1.<span class="built_in">size</span>()||j&lt;word2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;word2.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    ans+=word2[j];</span><br><span class="line">                    j++;</span><br><span class="line">                    flag=<span class="number">1</span>-flag;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    ans+=word1[i];</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;word1.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    ans+=word1[i];</span><br><span class="line">                    i++;</span><br><span class="line">                    flag=<span class="number">1</span>-flag;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    ans+=word2[j];</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(m+n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1769. 移动所有球到每个盒子所需的最小操作数</title>
    <url>/2022/12/02/LeetCode/1769-%E7%A7%BB%E5%8A%A8%E6%89%80%E6%9C%89%E7%90%83%E5%88%B0%E6%AF%8F%E4%B8%AA%E7%9B%92%E5%AD%90%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1769-移动所有球到每个盒子所需的最小操作数"><a href="#1769-移动所有球到每个盒子所需的最小操作数" class="headerlink" title="1769. 移动所有球到每个盒子所需的最小操作数"></a><a href="https://leetcode.cn/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/description/">1769. 移动所有球到每个盒子所需的最小操作数</a></h1><p>有 n 个盒子。给你一个长度为 n 的二进制字符串 boxes ，其中 boxes[i] 的值为 ‘0’ 表示第 i 个盒子是 空 的，而 boxes[i] 的值为 ‘1’ 表示盒子里有 一个 小球。</p>
<p>在一步操作中，你可以将 一个 小球从某个盒子移动到一个与之相邻的盒子中。第 i 个盒子和第 j 个盒子相邻需满足 abs(i - j) == 1 。注意，操作执行后，某些盒子中可能会存在不止一个小球。</p>
<p>返回一个长度为 n 的数组 answer ，其中 answer[i] 是将所有小球移动到第 i 个盒子所需的 最小 操作数。</p>
<p>每个 answer[i] 都需要根据盒子的 初始状态 进行计算。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxes = &quot;110&quot;</span><br><span class="line">输出：[1,1,3]</span><br><span class="line">解释：每个盒子对应的最小操作数如下：</span><br><span class="line">1) 第 1 个盒子：将一个小球从第 2 个盒子移动到第 1 个盒子，需要 1 步操作。</span><br><span class="line">2) 第 2 个盒子：将一个小球从第 1 个盒子移动到第 2 个盒子，需要 1 步操作。</span><br><span class="line">3) 第 3 个盒子：将一个小球从第 1 个盒子移动到第 3 个盒子，需要 2 步操作。将一个小球从第 2 个盒子移动到第 3 个盒子，需要 1 步操作。共计 3 步操作。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：boxes = &quot;001011&quot;</span><br><span class="line">输出：[11,8,5,4,3,4]</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>n == boxes.length</li>
<li>1 &lt;= n &lt;= 2000</li>
<li>boxes[i] 为 ‘0’ 或 ‘1’</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minOperations</span><span class="params">(string boxes)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = boxes[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>, right = <span class="number">0</span>, operations = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = boxes.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (boxes[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                right++;</span><br><span class="line">                operations += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        res[<span class="number">0</span>] = operations;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            operations += left - right;</span><br><span class="line">            <span class="keyword">if</span> (boxes[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = operations;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1773. 统计匹配检索规则的物品数量</title>
    <url>/2022/10/29/LeetCode/1773-%E7%BB%9F%E8%AE%A1%E5%8C%B9%E9%85%8D%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99%E7%9A%84%E7%89%A9%E5%93%81%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1773-统计匹配检索规则的物品数量"><a href="#1773-统计匹配检索规则的物品数量" class="headerlink" title="1773. 统计匹配检索规则的物品数量"></a><a href="https://leetcode.cn/problems/count-items-matching-a-rule/">1773. 统计匹配检索规则的物品数量</a></h1><p>给你一个数组 items ，其中 items[i] = [typei, colori, namei] ，描述第 i 件物品的类型、颜色以及名称。</p>
<p>另给你一条由两个字符串 ruleKey 和 ruleValue 表示的检索规则。</p>
<p>如果第 i 件物品能满足下述条件之一，则认为该物品与给定的检索规则 匹配 ：</p>
<ul>
<li>ruleKey == “type” 且 ruleValue == $type_i$ 。</li>
<li>ruleKey == “color” 且 ruleValue == $color_i$ 。</li>
<li>ruleKey == “name” 且 ruleValue == $name_i$ 。<br>统计并返回 匹配检索规则的物品数量 。</li>
</ul>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：items = [[&quot;phone&quot;,&quot;blue&quot;,&quot;pixel&quot;],[&quot;computer&quot;,&quot;silver&quot;,&quot;lenovo&quot;],[&quot;phone&quot;,&quot;gold&quot;,&quot;iphone&quot;]], ruleKey = &quot;color&quot;, ruleValue = &quot;silver&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：只有一件物品匹配检索规则，这件物品是 [&quot;computer&quot;,&quot;silver&quot;,&quot;lenovo&quot;] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：items = [[&quot;phone&quot;,&quot;blue&quot;,&quot;pixel&quot;],[&quot;computer&quot;,&quot;silver&quot;,&quot;phone&quot;],[&quot;phone&quot;,&quot;gold&quot;,&quot;iphone&quot;]], ruleKey = &quot;type&quot;, ruleValue = &quot;phone&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：只有两件物品匹配检索规则，这两件物品分别是 [&quot;phone&quot;,&quot;blue&quot;,&quot;pixel&quot;] 和 [&quot;phone&quot;,&quot;gold&quot;,&quot;iphone&quot;] 。注意，[&quot;computer&quot;,&quot;silver&quot;,&quot;phone&quot;] 未匹配检索规则。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>$1 &lt;= items.length &lt;= 10^4$</li>
<li>$1 &lt;= type_i.length, color_i.length, name_i.length, ruleValue.length &lt;= 10$</li>
<li>ruleKey 等于 “type”、”color” 或 “name”</li>
<li>所有字符串仅由小写字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countMatches</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; items, string ruleKey, string ruleValue)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flag;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ruleKey==<span class="string">&quot;type&quot;</span>)</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ruleKey==<span class="string">&quot;color&quot;</span>)</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;items.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(items[i][flag]==ruleValue)</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1774. 最接近目标价格的甜点成本</title>
    <url>/2022/12/04/LeetCode/1774-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9B%AE%E6%A0%87%E4%BB%B7%E6%A0%BC%E7%9A%84%E7%94%9C%E7%82%B9%E6%88%90%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1774-最接近目标价格的甜点成本"><a href="#1774-最接近目标价格的甜点成本" class="headerlink" title="1774. 最接近目标价格的甜点成本"></a><a href="https://leetcode.cn/problems/closest-dessert-cost/description/">1774. 最接近目标价格的甜点成本</a></h1><p>你打算做甜点，现在需要购买配料。目前共有 n 种冰激凌基料和 m 种配料可供选购。而制作甜点需要遵循以下几条规则：</p>
<ul>
<li>必须选择 一种 冰激凌基料。</li>
<li>可以添加 一种或多种 配料，也可以不添加任何配料。</li>
<li>每种类型的配料 最多两份 。</li>
</ul>
<p>给你以下三个输入：</p>
<ul>
<li>baseCosts ，一个长度为 n 的整数数组，其中每个 baseCosts[i] 表示第 i 种冰激凌基料的价格。</li>
<li>toppingCosts，一个长度为 m 的整数数组，其中每个 toppingCosts[i] 表示 一份 第 i 种冰激凌配料的价格。</li>
<li>target ，一个整数，表示你制作甜点的目标价格。<br>你希望自己做的甜点总成本尽可能接近目标价格 target 。</li>
</ul>
<p>返回最接近 target 的甜点成本。如果有多种方案，返回 成本相对较低 的一种。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：baseCosts = [1,7], toppingCosts = [3,4], target = 10</span><br><span class="line">输出：10</span><br><span class="line">解释：考虑下面的方案组合（所有下标均从 0 开始）：</span><br><span class="line"><span class="bullet">-</span> 选择 1 号基料：成本 7</span><br><span class="line"><span class="bullet">-</span> 选择 1 份 0 号配料：成本 1 x 3 = 3</span><br><span class="line"><span class="bullet">-</span> 选择 0 份 1 号配料：成本 0 x 4 = 0</span><br><span class="line">总成本：7 + 3 + 0 = 10 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：baseCosts = [2,3], toppingCosts = [4,5,100], target = 18</span><br><span class="line">输出：17</span><br><span class="line">解释：考虑下面的方案组合（所有下标均从 0 开始）：</span><br><span class="line"><span class="bullet">-</span> 选择 1 号基料：成本 3</span><br><span class="line"><span class="bullet">-</span> 选择 1 份 0 号配料：成本 1 x 4 = 4</span><br><span class="line"><span class="bullet">-</span> 选择 2 份 1 号配料：成本 2 x 5 = 10</span><br><span class="line"><span class="bullet">-</span> 选择 0 份 2 号配料：成本 0 x 100 = 0</span><br><span class="line">总成本：3 + 4 + 10 + 0 = 17 。不存在总成本为 18 的甜点制作方案。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：baseCosts = [3,10], toppingCosts = [2,5], target = 9</span><br><span class="line">输出：8</span><br><span class="line">解释：可以制作总成本为 8 和 10 的甜点。返回 8 ，因为这是成本更低的方案。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：baseCosts = [10], toppingCosts = [1], target = 1</span><br><span class="line">输出：10</span><br><span class="line">解释：注意，你可以选择不添加任何配料，但你必须选择一种基料。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>n == baseCosts.length</li>
<li>m == toppingCosts.length</li>
<li>1 &lt;= n, m &lt;= 10</li>
<li>1 &lt;= baseCosts[i], toppingCosts[i] &lt;= $10^4$</li>
<li>1 &lt;= target &lt;= $10^4$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">closestCost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; baseCosts, vector&lt;<span class="type">int</span>&gt;&amp; toppingCosts, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = *<span class="built_in">min_element</span>(baseCosts.<span class="built_in">begin</span>(), baseCosts.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">can</span><span class="params">(target + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">2</span> * target - x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; b : baseCosts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &lt;= target) &#123;</span><br><span class="line">                can[b] = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : toppingCosts) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; <span class="number">2</span>; ++count) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = target; i; --i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (can[i] &amp;&amp; i + t &gt; target) &#123;</span><br><span class="line">                        res = <span class="built_in">min</span>(res, i + t);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i - t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        can[i] = can[i] | can[i - t];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= res - target; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (can[target - i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> target - i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(target*m)$</li>
<li>空间复杂度：$O(target)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1775. 通过最少操作次数使数组的和相等</title>
    <url>/2022/12/07/LeetCode/1775-%E9%80%9A%E8%BF%87%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C%E7%9B%B8%E7%AD%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1775-通过最少操作次数使数组的和相等"><a href="#1775-通过最少操作次数使数组的和相等" class="headerlink" title="1775. 通过最少操作次数使数组的和相等"></a><a href="https://leetcode.cn/problems/equal-sum-arrays-with-minimum-number-of-operations/description/">1775. 通过最少操作次数使数组的和相等</a></h1><p>给你两个长度可能不等的整数数组 nums1 和 nums2 。两个数组中的所有值都在 1 到 6 之间（包含 1 和 6）。</p>
<p>每次操作中，你可以选择 任意 数组中的任意一个整数，将它变成 1 到 6 之间 任意 的值（包含 1 和 6）。</p>
<p>请你返回使 nums1 中所有数的和与 nums2 中所有数的和相等的最少操作次数。如果无法使两个数组的和相等，请返回 -1 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：你可以通过 3 次操作使 nums1 中所有数的和与 nums2 中所有数的和相等。以下数组下标都从 0 开始。</span><br><span class="line"><span class="bullet">-</span> 将 nums2[0] 变为 6 。 nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2] 。</span><br><span class="line"><span class="bullet">-</span> 将 nums1[5] 变为 1 。 nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2] 。</span><br><span class="line"><span class="bullet">-</span> 将 nums1[2] 变为 2 。 nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,1,1,1,1,1,1], nums2 = [6]</span><br><span class="line">输出：-1</span><br><span class="line">解释：没有办法减少 nums1 的和或者增加 nums2 的和使二者相等。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [6,6], nums2 = [1]</span><br><span class="line">输出：3</span><br><span class="line">解释：你可以通过 3 次操作使 nums1 中所有数的和与 nums2 中所有数的和相等。以下数组下标都从 0 开始。</span><br><span class="line"><span class="bullet">-</span> 将 nums1[0] 变为 2 。 nums1 = [2,6], nums2 = [1] 。</span><br><span class="line"><span class="bullet">-</span> 将 nums1[1] 变为 2 。 nums1 = [2,2], nums2 = [1] 。</span><br><span class="line"><span class="bullet">-</span> 将 nums2[0] 变为 4 。 nums1 = [2,2], nums2 = [4] 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= nums1.length, nums2.length &lt;= $10^5$</li>
<li>1 &lt;= nums1[i], nums2[i] &lt;= 6</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">help</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; h1, vector&lt;<span class="type">int</span>&gt;&amp; h2, <span class="type">int</span> diff)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">h</span><span class="params">(<span class="number">7</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; ++i) &#123;</span><br><span class="line">            h[<span class="number">6</span> - i] += h1[i];</span><br><span class="line">            h[i - <span class="number">1</span>] += h2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &amp;&amp; diff &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">min</span>((diff + i - <span class="number">1</span>) / i, h[i]);</span><br><span class="line">            res += t;</span><br><span class="line">            diff -= t * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>(), m = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">6</span> * n &lt; m || <span class="number">6</span> * m &lt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt1</span><span class="params">(<span class="number">7</span>, <span class="number">0</span>)</span>, <span class="title">cnt2</span><span class="params">(<span class="number">7</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums1) &#123;</span><br><span class="line">            ++cnt1[i];</span><br><span class="line">            diff += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums2) &#123;</span><br><span class="line">            ++cnt2[i];</span><br><span class="line">            diff -= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!diff) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">help</span>(cnt2, cnt1, diff);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">help</span>(cnt1, cnt2, -diff);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n+m)$</li>
<li>空间复杂度：$O(C)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1779. 找到最近的有相同 X 或 Y 坐标的点</title>
    <url>/2022/12/01/LeetCode/1779-%E6%89%BE%E5%88%B0%E6%9C%80%E8%BF%91%E7%9A%84%E6%9C%89%E7%9B%B8%E5%90%8C-X-%E6%88%96-Y-%E5%9D%90%E6%A0%87%E7%9A%84%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1779-找到最近的有相同-X-或-Y-坐标的点"><a href="#1779-找到最近的有相同-X-或-Y-坐标的点" class="headerlink" title="1779. 找到最近的有相同 X 或 Y 坐标的点"></a><a href="https://leetcode.cn/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/description/">1779. 找到最近的有相同 X 或 Y 坐标的点</a></h1><p>给你两个整数 x 和 y ，表示你在一个笛卡尔坐标系下的 (x, y) 处。同时，在同一个坐标系下给你一个数组 points ，其中 points[i] = [ai, bi] 表示在 (ai, bi) 处有一个点。当一个点与你所在的位置有相同的 x 坐标或者相同的 y 坐标时，我们称这个点是 有效的 。</p>
<p>请返回距离你当前位置 曼哈顿距离 最近的 有效 点的下标（下标从 0 开始）。如果有多个最近的有效点，请返回下标 最小 的一个。如果没有有效点，请返回 -1 。</p>
<p>两个点 (x1, y1) 和 (x2, y2) 之间的 曼哈顿距离 为 abs(x1 - x2) + abs(y1 - y2) 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]</span><br><span class="line">输出：2</span><br><span class="line">解释：所有点中，[3,1]，[2,4] 和 [4,4] 是有效点。有效点中，[2,4] 和 [4,4] 距离你当前位置的曼哈顿距离最小，都为 1 。[2,4] 的下标最小，所以返回 2 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：x = 3, y = 4, points = [[3,4]]</span><br><span class="line">输出：0</span><br><span class="line">提示：答案可以与你当前所在位置坐标相同。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：x = 3, y = 4, points = [[2,3]]</span><br><span class="line">输出：-1</span><br><span class="line">解释：没有 有效点。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= points.length &lt;= $10^4$</li>
<li>points[i].length == 2</li>
<li>1 &lt;= x, y, ai, bi &lt;= $10^4$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nearestValidPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mi = <span class="number">10000</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">0</span>] == x &amp;&amp; <span class="built_in">abs</span>(points[i][<span class="number">1</span>]-y) &lt; mi) &#123;</span><br><span class="line">                mi = <span class="built_in">abs</span>(points[i][<span class="number">1</span>] - y);</span><br><span class="line">                ans = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">1</span>] == y &amp;&amp; <span class="built_in">abs</span>(points[i][<span class="number">0</span>]-x) &lt; mi) &#123;</span><br><span class="line">                mi = <span class="built_in">abs</span>(points[i][<span class="number">0</span>] - x);</span><br><span class="line">                ans = i; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1780. 判断一个数字是否可以表示成三的幂的和</title>
    <url>/2022/12/09/LeetCode/1780-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%A1%A8%E7%A4%BA%E6%88%90%E4%B8%89%E7%9A%84%E5%B9%82%E7%9A%84%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1780-判断一个数字是否可以表示成三的幂的和"><a href="#1780-判断一个数字是否可以表示成三的幂的和" class="headerlink" title="1780. 判断一个数字是否可以表示成三的幂的和"></a><a href="https://leetcode.cn/problems/check-if-number-is-a-sum-of-powers-of-three/description/">1780. 判断一个数字是否可以表示成三的幂的和</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkPowersOfThree</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = flag - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">pow</span>(<span class="number">3</span>, i) &lt;= n) &#123;</span><br><span class="line">                    n -= <span class="built_in">pow</span>(<span class="number">3</span>, i);</span><br><span class="line">                    flag = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1781. 所有子字符串美丽值之和</title>
    <url>/2022/12/12/LeetCode/1781-%E6%89%80%E6%9C%89%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BE%8E%E4%B8%BD%E5%80%BC%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1781-所有子字符串美丽值之和"><a href="#1781-所有子字符串美丽值之和" class="headerlink" title="1781. 所有子字符串美丽值之和"></a><a href="https://leetcode.cn/problems/sum-of-beauty-of-all-substrings/description/">1781. 所有子字符串美丽值之和</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">beautySum</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">            <span class="type">int</span> maxFreq = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                cnt[s[j] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                maxFreq = <span class="built_in">max</span>(maxFreq, cnt[s[j] - <span class="string">&#x27;a&#x27;</span>]); </span><br><span class="line">                <span class="type">int</span> minFreq = s.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[k] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        minFreq = <span class="built_in">min</span>(minFreq, cnt[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res += maxFreq - minFreq;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(C*n^2)$</li>
<li>空间复杂度：$O(C)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Madium</tag>
      </tags>
  </entry>
  <entry>
    <title>1784. 检查二进制字符串字段</title>
    <url>/2022/10/03/LeetCode/1784-%E6%A3%80%E6%9F%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/check-if-binary-string-has-at-most-one-segment-of-ones/">https://leetcode.cn/problems/check-if-binary-string-has-at-most-one-segment-of-ones/</a> 给你一个二进制字符串 s ，该字符串 不含前导零 。 如果 s 包含 零个或一个由连续的 ‘1’ 组成的字段 ，返回 true​​​ 。否则，返回 false 。 如果 s 中 由连续若干个 ‘1’ 组成的字段 数量不超过 1，返回 true​​​ 。否则，返回 false 。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;1001&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：由连续若干个 &#x27;1&#x27; 组成的字段数量为 2，返回 false</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;110&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 100</li>
<li>s[i]​​​​ 为 ‘0’ 或 ‘1’</li>
<li>s[0] 为 ‘1’</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool checkOnesSegment(string s) &#123;</span><br><span class="line">        int flag=1;</span><br><span class="line">        for(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">            if(!flag&amp;&amp;s[i]==&#x27;1&#x27;)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            if(s[i]==&#x27;1&#x27;&amp;&amp;flag)&#123;</span><br><span class="line">                for(int j=i;j&lt;s.length();j++)&#123;</span><br><span class="line">                    if(s[j]!=&#x27;1&#x27;)&#123;</span><br><span class="line">                        i=j-1;</span><br><span class="line">                        flag=0;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1785. 构成特定和需要添加的最少元素</title>
    <url>/2022/12/16/LeetCode/1785-%E6%9E%84%E6%88%90%E7%89%B9%E5%AE%9A%E5%92%8C%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%9C%80%E5%B0%91%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1785-构成特定和需要添加的最少元素"><a href="#1785-构成特定和需要添加的最少元素" class="headerlink" title="1785. 构成特定和需要添加的最少元素"></a><a href="https://leetcode.cn/problems/minimum-elements-to-add-to-form-a-given-sum/description/">1785. 构成特定和需要添加的最少元素</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> limit, <span class="type">int</span> goal)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) sum += num;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> del = <span class="built_in">abs</span>(sum - goal);</span><br><span class="line">        <span class="keyword">return</span> del%limit?del/limit + <span class="number">1</span>:del/limit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>1790. 仅执行一次字符串交换能否使两个字符串相等</title>
    <url>/2022/10/11/LeetCode/1790-%E4%BB%85%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E6%8D%A2%E8%83%BD%E5%90%A6%E4%BD%BF%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1790-仅执行一次字符串交换能否使两个字符串相等"><a href="#1790-仅执行一次字符串交换能否使两个字符串相等" class="headerlink" title="1790. 仅执行一次字符串交换能否使两个字符串相等"></a><a href="https://leetcode.cn/problems/check-if-one-string-swap-can-make-strings-equal/">1790. 仅执行一次字符串交换能否使两个字符串相等</a></h1><p>给你长度相等的两个字符串 <code>s1</code> 和 <code>s2</code> 。一次 字符串交换 操作的步骤如下：选出某个字符串中的两个下标（不必不同），并交换这两个下标所对应的字符。</p>
<p>如果对 其中一个字符串 执行 最多一次字符串交换 就可以使两个字符串相等，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;bank&quot;, s2 = &quot;kanb&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：例如，交换 s2 中的第一个和最后一个字符可以得到 &quot;bank&quot;</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;attack&quot;, s2 = &quot;defend&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：一次字符串交换无法使两个字符串相等</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;kelb&quot;, s2 = &quot;kelb&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：两个字符串已经相等，所以不需要进行字符串交换</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;abcd&quot;, s2 = &quot;dcba&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= s1.length, s2.length &lt;= 100</li>
<li>s1.length == s2.length</li>
<li>s1 和 s2 仅由小写英文字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>只需要按照题意模拟即可<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">areAlmostEqual</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> flag1,flag2;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">1</span>&amp;&amp;s1[i]!=s2[i])&#123;</span><br><span class="line">                flag1=s1[i];</span><br><span class="line">                flag2=s2[i];</span><br><span class="line">                t=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">0</span>&amp;&amp;s1[i]!=s2[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag1==s2[i]&amp;&amp;flag2==s1[i])&#123;</span><br><span class="line">                    t=<span class="number">-1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">-1</span>&amp;&amp;s1[i]!=s2[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1796. 字符串中第二大的数字</title>
    <url>/2022/12/03/LeetCode/1796-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1796-字符串中第二大的数字"><a href="#1796-字符串中第二大的数字" class="headerlink" title="1796. 字符串中第二大的数字"></a><a href="https://leetcode.cn/problems/second-largest-digit-in-a-string/description/">1796. 字符串中第二大的数字</a></h1><p>给你一个混合字符串 s ，请你返回 s 中 第二大 的数字，如果不存在第二大的数字，请你返回 -1 。</p>
<p>混合字符串 由小写英文字母和数字组成。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;dfa12321afd&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：出现在 s 中的数字包括 [1, 2, 3] 。第二大的数字是 2 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abc1111&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：出现在 s 中的数字只包含 [1] 。没有第二大的数字。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 500</li>
<li>s 只包含小写英文字母和（或）数字。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">secondHighest</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[i] - <span class="string">&#x27;0&#x27;</span> &gt; ans.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                        ans.<span class="built_in">push_front</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] - <span class="string">&#x27;0&#x27;</span> &lt; ans.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[i] - <span class="string">&#x27;0&#x27;</span> &lt; ans.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] - <span class="string">&#x27;0&#x27;</span> &gt; ans.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                        ans.<span class="built_in">pop_back</span>();</span><br><span class="line">                        ans.<span class="built_in">push_front</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] - <span class="string">&#x27;0&#x27;</span> &lt; ans.<span class="built_in">front</span>() &amp;&amp; s[i] - <span class="string">&#x27;0&#x27;</span> &gt; ans.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                        ans.<span class="built_in">pop_back</span>();</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">2</span>) <span class="keyword">return</span> ans.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1800. 最大升序子数组和</title>
    <url>/2022/10/07/LeetCode/1800-%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1800-最大升序子数组和"><a href="#1800-最大升序子数组和" class="headerlink" title="1800. 最大升序子数组和"></a><a href="https://leetcode.cn/problems/maximum-ascending-subarray-sum/">1800. 最大升序子数组和</a></h1><blockquote>
<p>给你一个正整数组成的数组 nums ，返回 nums 中一个 升序 子数组的最大可能元素和。</p>
<p>子数组是数组中的一个连续数字序列。</p>
<p>已知子数组 [numsl, numsl+1, …, numsr-1, numsr] ，若对所有 i（l &lt;= i &lt; r），numsi &lt; numsi+1 都成立，则称这一子数组为 升序 子数组。注意，大小为 1 的子数组也视作 升序 子数组。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,20,30,5,10,50]</span><br><span class="line">输出：65</span><br><span class="line">解释：[5,10,50] 是元素和最大的升序子数组，最大元素和为 65 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,20,30,40,50]</span><br><span class="line">输出：150</span><br><span class="line">解释：[10,20,30,40,50] 是元素和最大的升序子数组，最大元素和为 150 。 </span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [12,17,15,13,10,11,12]</span><br><span class="line">输出：33</span><br><span class="line">解释：[10,11,12] 是元素和最大的升序子数组，最大元素和为 33 。</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [100,10,1]</span><br><span class="line">输出：100</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><p>1 &lt;= nums.length &lt;= 100</p>
</li>
<li><p>1 &lt;= nums[i] &lt;= 100</p>
</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxAscendingSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                m+=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans=<span class="built_in">max</span>(m,ans);</span><br><span class="line">                m=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,m);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度$O(n)$</li>
<li>空间复杂度$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1805. 字符串中不同整数的数目</title>
    <url>/2022/12/06/LeetCode/1805-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%95%B4%E6%95%B0%E7%9A%84%E6%95%B0%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1805-字符串中不同整数的数目"><a href="#1805-字符串中不同整数的数目" class="headerlink" title="1805. 字符串中不同整数的数目"></a><a href="https://leetcode.cn/problems/number-of-different-integers-in-a-string/description/">1805. 字符串中不同整数的数目</a></h1><p>给你一个字符串 word ，该字符串由数字和小写英文字母组成。</p>
<p>请你用空格替换每个不是数字的字符。例如，”a123bc34d8ef34” 将会变成 “ 123  34 8  34” 。注意，剩下的这些整数为（相邻彼此至少有一个空格隔开）：”123”、”34”、”8” 和 “34” 。</p>
<p>返回对 word 完成替换后形成的 不同 整数的数目。</p>
<p>只有当两个整数的 不含前导零 的十进制表示不同， 才认为这两个整数也不同。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word = &quot;a123bc34d8ef34&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：不同的整数有 &quot;123&quot;、&quot;34&quot; 和 &quot;8&quot; 。注意，&quot;34&quot; 只计数一次。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word = &quot;leet1234code234&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：word = &quot;a1b01c001&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：&quot;1&quot;、&quot;01&quot; 和 &quot;001&quot; 视为同一个整数的十进制表示，因为在比较十进制值时会忽略前导零的存在。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= word.length &lt;= 1000</li>
<li>word 由数字和小写英文字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDifferentIntegers</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        string t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        unordered_set&lt;string&gt; set;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; word[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t == <span class="string">&quot;&quot;</span> || t == <span class="string">&quot;0&quot;</span>) t = word[i];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    t += word[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                    set.<span class="built_in">insert</span>(t);</span><br><span class="line">                    t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="string">&quot;&quot;</span>) set.<span class="built_in">insert</span>(t);</span><br><span class="line">        <span class="keyword">return</span> set.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1812. 判断国际象棋棋盘中一个格子的颜色</title>
    <url>/2022/12/08/LeetCode/1812-%E5%88%A4%E6%96%AD%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B%E6%A3%8B%E7%9B%98%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%A0%BC%E5%AD%90%E7%9A%84%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1812-判断国际象棋棋盘中一个格子的颜色"><a href="#1812-判断国际象棋棋盘中一个格子的颜色" class="headerlink" title="1812. 判断国际象棋棋盘中一个格子的颜色"></a><a href="https://leetcode.cn/problems/determine-color-of-a-chessboard-square/description/">1812. 判断国际象棋棋盘中一个格子的颜色</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">squareIsWhite</span><span class="params">(string c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (c[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span> + c[<span class="number">1</span>] - <span class="string">&#x27;1&#x27;</span>) % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(1)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1822. 数组元素积的符号</title>
    <url>/2022/10/27/LeetCode/1822-%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%A7%AF%E7%9A%84%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1822-数组元素积的符号"><a href="#1822-数组元素积的符号" class="headerlink" title="1822. 数组元素积的符号"></a><a href="https://leetcode.cn/problems/sign-of-the-product-of-an-array/">1822. 数组元素积的符号</a></h1><p>已知函数 signFunc(x) 将会根据 x 的正负返回特定值：</p>
<p>如果 x 是正数，返回 1 。<br>如果 x 是负数，返回 -1 。<br>如果 x 是等于 0 ，返回 0 。<br>给你一个整数数组 nums 。令 product 为数组 nums 中所有元素值的乘积。</p>
<p>返回 signFunc(product) 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,-2,-3,-4,3,2,1]</span><br><span class="line">输出：1</span><br><span class="line">解释：数组中所有值的乘积是 144 ，且 signFunc(144) = 1</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,5,0,2,-3]</span><br><span class="line">输出：0</span><br><span class="line">解释：数组中所有值的乘积是 0 ，且 signFunc(0) = 0</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,1,-1,1,-1]</span><br><span class="line">输出：-1</span><br><span class="line">解释：数组中所有值的乘积是 -1 ，且 signFunc(-1) = -1</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= nums.length &lt;= 1000</li>
<li>-100 &lt;= nums[i] &lt;= 100</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">iszero</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">0</span>?<span class="number">1</span>:n==<span class="number">0</span>?<span class="number">0</span>:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">arraySign</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)&#123;</span><br><span class="line">            ans*=<span class="built_in">iszero</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1827. 最少操作使数组递增</title>
    <url>/2022/12/11/LeetCode/1827-%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E4%BD%BF%E6%95%B0%E7%BB%84%E9%80%92%E5%A2%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1827-最少操作使数组递增"><a href="#1827-最少操作使数组递增" class="headerlink" title="1827. 最少操作使数组递增"></a><a href="https://leetcode.cn/problems/minimum-operations-to-make-the-array-increasing/description/">1827. 最少操作使数组递增</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            ans += <span class="built_in">max</span>(<span class="number">0</span>, nums[i - <span class="number">1</span>] + <span class="number">1</span> - nums[i]);</span><br><span class="line">            nums[i] = <span class="built_in">max</span>(nums[i], nums[i - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1832. 判断句子是否为全字母句</title>
    <url>/2022/12/13/LeetCode/1832-%E5%88%A4%E6%96%AD%E5%8F%A5%E5%AD%90%E6%98%AF%E5%90%A6%E4%B8%BA%E5%85%A8%E5%AD%97%E6%AF%8D%E5%8F%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1832-判断句子是否为全字母句"><a href="#1832-判断句子是否为全字母句" class="headerlink" title="1832. 判断句子是否为全字母句"></a><a href="https://leetcode.cn/problems/check-if-the-sentence-is-pangram/description/">1832. 判断句子是否为全字母句</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkIfPangram</span><span class="params">(string sentence)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; set;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> s : sentence) set.<span class="built_in">insert</span>(s);</span><br><span class="line">        <span class="keyword">return</span> set.<span class="built_in">size</span>() == <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(C)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1945. 字符串转化后的各位数字之和</title>
    <url>/2022/12/15/LeetCode/1945-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E5%90%8E%E7%9A%84%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1945-字符串转化后的各位数字之和"><a href="#1945-字符串转化后的各位数字之和" class="headerlink" title="1945. 字符串转化后的各位数字之和"></a><a href="https://leetcode.cn/problems/sum-of-digits-of-string-after-convert/description/">1945. 字符串转化后的各位数字之和</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getLucky</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> str : s) &#123;</span><br><span class="line">            <span class="type">int</span> t = str - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (t) &#123;</span><br><span class="line">                ans += t%<span class="number">10</span>;</span><br><span class="line">                t /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (ans) &#123;</span><br><span class="line">                t += ans%<span class="number">10</span>;</span><br><span class="line">                ans /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = t;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(C·n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1971. 寻找图中是否存在路径</title>
    <url>/2022/12/19/LeetCode/1971-%E5%AF%BB%E6%89%BE%E5%9B%BE%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1971-寻找图中是否存在路径"><a href="#1971-寻找图中是否存在路径" class="headerlink" title="1971. 寻找图中是否存在路径"></a><a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/description/">1971. 寻找图中是否存在路径</a></h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;adj, vector&lt;<span class="type">bool</span>&gt; &amp;visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == destination) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[source] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : adj[source]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[next] &amp;&amp; <span class="built_in">dfs</span>(next, destination, adj, visited)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validPath</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adj</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> x = edge[<span class="number">0</span>], y = edge[<span class="number">1</span>];</span><br><span class="line">            adj[x].<span class="built_in">emplace_back</span>(y);</span><br><span class="line">            adj[y].<span class="built_in">emplace_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(source, destination, adj, visited);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(m+n)$</li>
<li>空间复杂度：$O(m+n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>481. 神奇字符串</title>
    <url>/2022/10/31/LeetCode/481-%E7%A5%9E%E5%A5%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="481-神奇字符串"><a href="#481-神奇字符串" class="headerlink" title="481. 神奇字符串"></a><a href="https://leetcode.cn/problems/magical-string/">481. 神奇字符串</a></h1><p>神奇字符串 s 仅由 ‘1’ 和 ‘2’ 组成，并需要遵守下面的规则：</p>
<ul>
<li>神奇字符串 s 的神奇之处在于，串联字符串中 ‘1’ 和 ‘2’ 的连续出现次数可以生成该字符串。</li>
</ul>
<p>s 的前几个元素是 s = “1221121221221121122……” 。如果将 s 中连续的若干 1 和 2 进行分组，可以得到 “1 22 11 2 1 22 1 22 11 2 11 22 ……” 。每组中 1 或者 2 的出现次数分别是 “1 2 2 1 1 2 1 2 2 1 2 2 ……” 。上面的出现次数正是 s 自身。</p>
<p>给你一个整数 n ，返回在神奇字符串 s 的前 n 个数字中 1 的数目。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：n = 6</span><br><span class="line">输出：3</span><br><span class="line">解释：神奇字符串 s 的前 6 个元素是 “122112”，它包含三个 1，因此返回 3 。 </span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>$1 &lt;= n &lt;= 10^5$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">magicalString</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">string <span class="title">s</span><span class="params">(n, <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">        s[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span>, s[<span class="number">1</span>] = <span class="string">&#x27;2&#x27;</span>, s[<span class="number">2</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> size = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">3</span> - (s[j - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (size &gt; <span class="number">0</span> &amp;&amp; j &lt; n) &#123;</span><br><span class="line">                s[j] = <span class="string">&#x27;0&#x27;</span> + num;</span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">                    ++res;</span><br><span class="line">                &#125;</span><br><span class="line">                ++j;</span><br><span class="line">                --size;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>646. 最长数对链</title>
    <url>/2022/09/03/LeetCode/646-%E6%9C%80%E9%95%BF%E6%95%B0%E5%AF%B9%E9%93%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="646-最长数对链"><a href="#646-最长数对链" class="headerlink" title="646. 最长数对链"></a><a href="https://leetcode.cn/problems/maximum-length-of-pair-chain/">646. 最长数对链</a></h1><p>给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。 现在，我们定义一种跟随关系，当且仅当 b &lt; c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。 给定一个数对集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[[1,2], [2,3], [3,4]]</span><br><span class="line">输出：2</span><br><span class="line">解释：最长的数对链是 [1,2] -&gt; [3,4]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>给出数对的个数在 [1, 1000] 范围内。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>动态规划</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLongestChain</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(pairs.<span class="built_in">begin</span>(),pairs.<span class="built_in">end</span>());</span><br><span class="line">        <span class="function">vector <span class="title">dp</span><span class="params">(pairs.size(),<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pairs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123; </span><br><span class="line">                <span class="keyword">if</span>(pairs[i][<span class="number">0</span>]&gt;pairs[j][<span class="number">1</span>])&#123;</span><br><span class="line">                    dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[pairs.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度$O(n^2)$</li>
<li>空间复杂度$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>658. 找到 K 个最接近的元素</title>
    <url>/2022/08/25/LeetCode/658-%E6%89%BE%E5%88%B0-k-%E4%B8%AA%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/find-k-closest-elements/">https://leetcode.cn/problems/find-k-closest-elements/</a> 给定一个 排序好 的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。 整数 a 比整数 b 更接近 x 需要满足： a - x &lt; b - x 或者 a - x == b - x 且 a &lt; b 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,2,3,4,5], k = 4, x = 3</span><br><span class="line">输出：[1,2,3,4]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,2,3,4,5], k = 4, x = -1</span><br><span class="line">输出：[1,2,3,4]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &lt;= k &lt;= arr.length</span><br><span class="line">1 &lt;= arr.length &lt;= 104</span><br><span class="line">arr 按 升序 排列</span><br><span class="line">-104 &lt;= arr[i], x &lt;= 104</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>解法一：按照题意进行排序，返回前k个，官方解法写的确实短。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector findClosestElements(vector&lt;int&gt;&amp; arr, int k, int x) &#123;</span><br><span class="line">        sort(arr.begin(), arr.end(), [x](int a, int b) -&gt; bool &#123;</span><br><span class="line">            return abs(a - x) &lt; abs(b - x)  abs(a - x) == abs(b - x) &amp;&amp; a &lt; b;</span><br><span class="line">        &#125;);</span><br><span class="line">        sort(arr.begin(), arr.begin() + k);</span><br><span class="line">        return vector(arr.begin(), arr.begin() + k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>解法二：二分加双指针，依旧是简短的官方代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector findClosestElements(vector&lt;int&gt;&amp; arr, int k, int x) &#123;</span><br><span class="line">        int right = lower_bound(arr.begin(), arr.end(), x) - arr.begin();</span><br><span class="line">        int left = right - 1;</span><br><span class="line">        while (k--) &#123;</span><br><span class="line">            if (left &lt; 0) &#123; right++; &#125; else if (right &gt;= arr.size()) &#123;</span><br><span class="line">                left--;</span><br><span class="line">            &#125; else if (x - arr[left] &lt;= arr[right] - x) &#123;</span><br><span class="line">                left--;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return vector(arr.begin() + left + 1, arr.begin() + right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>652. 寻找重复的子树</title>
    <url>/2022/09/05/LeetCode/652-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="652-寻找重复的子树"><a href="#652-寻找重复的子树" class="headerlink" title="652. 寻找重复的子树"></a><a href="https://leetcode.cn/problems/find-duplicate-subtrees/">652. 寻找重复的子树</a></h1><p>给定一棵二叉树 root，返回所有重复的子树。 对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。 如果两棵树具有相同的结构和相同的结点值，则它们是重复的。 示例 1： <img src="https://assets.leetcode.com/uploads/2020/08/16/e1.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3,4,null,2,4,null,null,4]</span><br><span class="line">输出：[[2,4],[4]]</span><br></pre></td></tr></table></figure><br>示例 2： <img src="https://assets.leetcode.com/uploads/2020/08/16/e2.jpg" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,1,1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>
<p>示例 3： <img src="https://assets.leetcode.com/uploads/2020/08/16/e33.jpg" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,2,2,3,null,3,null]</span><br><span class="line">输出：[[2,3],[3]]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>树中的结点数在\([1,10^4]\)范围内。</li>
<li>-200 &lt;= Node.val &lt;= 200</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>emmm,这是中等题？ 参考<a href="https://leetcode.cn/problems/find-duplicate-subtrees/solution/xun-zhao-zhong-fu-de-zi-shu-by-leetcode-zoncw/">官方题解</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> &#123;repeat.<span class="built_in">begin</span>(), repeat.<span class="built_in">end</span>()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">dfs</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string serial = <span class="built_in">to_string</span>(node-&gt;val) + <span class="string">&quot;(&quot;</span> + <span class="built_in">dfs</span>(node-&gt;left) + <span class="string">&quot;)(&quot;</span> + <span class="built_in">dfs</span>(node-&gt;right) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">auto</span> it = seen.<span class="built_in">find</span>(serial); it != seen.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            repeat.<span class="built_in">insert</span>(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            seen[serial] = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map seen;</span><br><span class="line">    unordered_set repeat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度$O(n)$</li>
<li>空间复杂度$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>662. 二叉树最大宽度</title>
    <url>/2022/08/27/LeetCode/662-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/maximum-width-of-binary-tree/">https://leetcode.cn/problems/maximum-width-of-binary-tree/</a> 给你一棵二叉树的根节点 root ，返回树的 最大宽度 。 树的 最大宽度 是所有层中最大的 宽度 。 每一层的 宽度 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 null 节点，这些 null 节点也计入长度。 题目数据保证答案将会在  32 位 带符号整数范围内。 示例 1： <img src="https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,3,2,5,3,null,9]</span><br><span class="line">输出：4</span><br><span class="line">解释：最大宽度出现在树的第 3 层，宽度为 4 (5,3,null,9) 。</span><br></pre></td></tr></table></figure>
<p>示例 2： <img src="https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,3,2,5,null,null,9,6,null,7]</span><br><span class="line">输出：7</span><br><span class="line">解释：最大宽度出现在树的第 4 层，宽度为 7 (6,null,null,null,null,null,7) 。</span><br></pre></td></tr></table></figure>
<p>示例 3： <img src="https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,3,2,5]</span><br><span class="line">输出：2</span><br><span class="line">解释：最大宽度出现在树的第 2 层，宽度为 2 (3,2) 。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>\(树中节点的数目范围是 [1, 3000]\)</li>
<li>\(-100&lt;=Node.val&lt;=100\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>解法一：广度优先遍历（官方题解）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int widthOfBinaryTree(TreeNode* root) &#123;</span><br><span class="line">        unsigned long long res = 1;</span><br><span class="line">        vector&lt;pair&gt; arr;</span><br><span class="line">        arr.emplace_back(root, 1L);</span><br><span class="line">        while (!arr.empty()) &#123;</span><br><span class="line">            vector&lt;pair&gt; tmp;</span><br><span class="line">            for (auto &amp;[node, index] : arr) &#123;</span><br><span class="line">                if (node-&gt;left) &#123;</span><br><span class="line">                    tmp.emplace_back(node-&gt;left, index * 2);</span><br><span class="line">                &#125;</span><br><span class="line">                if (node-&gt;right) &#123;</span><br><span class="line">                    tmp.emplace_back(node-&gt;right, index * 2 + 1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res, arr.back().second - arr[0].second + 1);</span><br><span class="line">            arr = move(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(n)\)</li>
<li>空间复杂度：\(O(n)\)</li>
</ul>
<p>解法二：深度优先遍历（官方题解）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using ULL = unsigned long long;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int widthOfBinaryTree(TreeNode* root) &#123;</span><br><span class="line">        unordered_map&lt;int, ULL&gt; levelMin;</span><br><span class="line">        function&lt;ULL(TreeNode*, int, ULL)&gt; dfs = [&amp;](TreeNode* node, int depth, ULL index)-&gt;ULL &#123;</span><br><span class="line">            if (node == nullptr) &#123;</span><br><span class="line">                return 0LL;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!levelMin.count(depth)) &#123;</span><br><span class="line">                levelMin[depth] = index; // 每一层最先访问到的节点会是最左边的节点，即每一层编号的最小值</span><br><span class="line">            &#125;</span><br><span class="line">            return max(&#123;index - levelMin[depth] + 1LL, dfs(node-&gt;left, depth + 1, index * 2), dfs(node-&gt;right, depth + 1, index * 2 + 1)&#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        return dfs(root, 1, 1LL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(n)\)</li>
<li>空间复杂度：\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>667. 优美的排列 II</title>
    <url>/2022/09/08/LeetCode/667-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97-ii/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/beautiful-arrangement-ii/">https://leetcode.cn/problems/beautiful-arrangement-ii/</a> 给你两个整数 n 和 k ，请你构造一个答案列表 answer ，该列表应当包含从 1 到 n 的 n 个不同正整数，并同时满足下述条件： 假设该列表是 answer = [a1, a2, a3, … , an] ，那么列表 [a1 - a2, a2 - a3, a3 - a4, … , an-1 - an] 中应该有且仅有 k 个不同整数。 返回列表 answer 。如果存在多种答案，只需返回其中 任意一种 。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3, k = 1</span><br><span class="line">输出：[1, 2, 3]</span><br><span class="line">解释：[1, 2, 3] 包含 3 个范围在 1-3 的不同整数，并且 [1, 1] 中有且仅有 1 个不同整数：1</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3, k = 2</span><br><span class="line">输出：[1, 3, 2]</span><br><span class="line">解释：[1, 3, 2] 包含 3 个范围在 1-3 的不同整数，并且 [2, 1] 中有且仅有 2 个不同整数：1 和 2</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>\(1 &lt;= k &lt; n &lt;= 10^4\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>思维题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; constructArray(int n, int k) &#123;</span><br><span class="line">        vector&lt;int&gt; answer;</span><br><span class="line">        for (int i = 1; i &lt; n - k; ++i) &#123;</span><br><span class="line">            answer.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = n - k, j = n; i &lt;= j; ++i, --j) &#123;</span><br><span class="line">            answer.push_back(i);</span><br><span class="line">            if (i != j) &#123;</span><br><span class="line">                answer.push_back(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>670. 最大交换</title>
    <url>/2022/09/13/LeetCode/670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/maximum-swap/">https://leetcode.cn/problems/maximum-swap/</a>给定一个非负整数，你至多可以交换一次数字中的任意两位。返回你能得到的最大值。 示例 1 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 2736</span><br><span class="line">输出: 7236</span><br><span class="line">解释: 交换数字2和数字7。</span><br></pre></td></tr></table></figure>
<p>示例 2 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 9973</span><br><span class="line">输出: 9973</span><br><span class="line">解释: 不需要交换。</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>给定数字的范围是 \([0, 10^8]\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>暴力</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maximumSwap(int num) &#123;</span><br><span class="line">        vector&lt;int&gt; a;</span><br><span class="line">        while(num)&#123;</span><br><span class="line">            a.push_back(num%10);</span><br><span class="line">            num/=10;</span><br><span class="line">        &#125;</span><br><span class="line">        int t=1;</span><br><span class="line">        for(int j=1;j&lt;a.size();j++)&#123; </span><br><span class="line">            if(t)&#123; </span><br><span class="line">                int n=a[a.size()-j]; </span><br><span class="line">                int flag=a.size()-j; </span><br><span class="line">                for(int i=flag-1;i&gt;=0;i--)&#123;</span><br><span class="line">                    if((a[i]&gt;n&amp;&amp;t==1)(a[i]&gt;=n&amp;&amp;t==0))&#123;</span><br><span class="line">                        n=a[i];</span><br><span class="line">                        flag=i;</span><br><span class="line">                        t=0;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                a[flag]=a[a.size()-j];</span><br><span class="line">                a[a.size()-j]=n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=a.size()-1;i&gt;=0;i--)&#123;</span><br><span class="line">            num*=10;</span><br><span class="line">            num+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(log^2n)\)</li>
<li>空间复杂度\(O(logn)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>669. 修剪二叉搜索树</title>
    <url>/2022/09/10/LeetCode/669-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">https://leetcode.cn/problems/trim-a-binary-search-tree/</a> 给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。 所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。 示例 1： <img src="https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg" alt=""> 输入：root = [1,0,2], low = 1, high = 2 输出：[1,null,2] 示例 2： <img src="https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg" alt=""> 输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3 输出：[3,2,null,1] 提示：</p>
<ul>
<li>树中节点数在范围 [1, 104] 内</li>
<li>0 &lt;= Node.val &lt;= 104</li>
<li>树中每个节点的值都是 唯一 的</li>
<li>题目数据保证输入是一棵有效的二叉搜索树</li>
<li>0 &lt;= low &lt;= high &lt;= 104</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* trimBST(TreeNode* root, int low, int high) &#123;</span><br><span class="line">        if (root == nullptr) &#123;</span><br><span class="line">            return nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        if (root-&gt;val &lt; low) &#123; </span><br><span class="line">            return trimBST(root-&gt;right, low, high);</span><br><span class="line">        &#125; else if (root-&gt;val &gt; high) &#123;</span><br><span class="line">            return trimBST(root-&gt;left, low, high);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            root-&gt;left = trimBST(root-&gt;left, low, high);</span><br><span class="line">            root-&gt;right = trimBST(root-&gt;right, low, high);</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>672. 灯泡开关 Ⅱ</title>
    <url>/2022/09/15/LeetCode/672-%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3-%E2%85%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/bulb-switcher-ii/">https://leetcode.cn/problems/bulb-switcher-ii/</a> 房间中有 n 只已经打开的灯泡，编号从 1 到 n 。墙上挂着 4 个开关 。 这 4 个开关各自都具有不同的功能，其中： 开关 1 ：反转当前所有灯的状态（即开变为关，关变为开） 开关 2 ：反转编号为偶数的灯的状态（即 2, 4, …） 开关 3 ：反转编号为奇数的灯的状态（即 1, 3, …） 开关 4 ：反转编号为 j = 3k + 1 的灯的状态，其中 k = 0, 1, 2, …（即 1, 4, 7, 10, …） 你必须 恰好 按压开关 presses 次。每次按压，你都需要从 4 个开关中选出一个来执行按压操作。 给你两个整数 n 和 presses ，执行完所有按压之后，返回 不同可能状态 的数量。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1, presses = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：状态可以是：</span><br><span class="line">- 按压开关 1 ，[关]</span><br><span class="line">- 按压开关 2 ，[开]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2, presses = 1</span><br><span class="line">输出：3</span><br><span class="line">解释：状态可以是：</span><br><span class="line">- 按压开关 1 ，[关, 关]</span><br><span class="line">- 按压开关 2 ，[开, 关]</span><br><span class="line">- 按压开关 3 ，[关, 开]</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3, presses = 1</span><br><span class="line">输出：4</span><br><span class="line">解释：状态可以是：</span><br><span class="line">- 按压开关 1 ，[关, 关, 关]</span><br><span class="line">- 按压开关 2 ，[关, 开, 关]</span><br><span class="line">- 按压开关 3 ，[开, 开, 开]</span><br><span class="line">- 按压开关 4 ，[关, 开, 开]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= n &lt;= 1000</li>
<li>0 &lt;= presses &lt;= 1000</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int flipLights(int n, int presses) &#123;</span><br><span class="line">        if(presses==0)</span><br><span class="line">            return 1;</span><br><span class="line">        if(n==1)</span><br><span class="line">            return 2;</span><br><span class="line">        else if(n==2)</span><br><span class="line">            return presses==1?3:4;</span><br><span class="line">        else</span><br><span class="line">            return presses==1?4:presses==2?7:8;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(1)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>687. 最长同值路径</title>
    <url>/2022/09/02/LeetCode/687-%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/longest-univalue-path/">https://leetcode.cn/problems/longest-univalue-path/</a> 给定一个二叉树的 root ，返回 最长的路径的长度 ，这个路径中的 每个节点具有相同值 。 这条路径可以经过也可以不经过根节点。 两个节点之间的路径长度 由它们之间的边数表示。 示例 1: <img src="https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,4,5,1,1,5]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>
<p>示例 2: <img src="https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,4,5,4,4,5]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>
<p>提示:</p>
<ul>
<li>树的节点数的范围是 [0, 104]</li>
<li>-1000 &lt;= Node.val &lt;= 1000</li>
<li>树的深度将不超过 1000</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>利用深搜递归获得经过某个父节点得到的最长规定路径，从而得到全局最长规定路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">private:</span><br><span class="line">    int ans;</span><br><span class="line">public:</span><br><span class="line">    int longestUnivaluePath(TreeNode* root) &#123;</span><br><span class="line">        ans=0;</span><br><span class="line">        dfs(root);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">    int dfs(TreeNode* root)&#123;</span><br><span class="line">        if(!root)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int left=dfs(root-&gt;left);</span><br><span class="line">        int right=dfs(root-&gt;right);</span><br><span class="line">        if(root&amp;&amp;root-&gt;left&amp;&amp;root-&gt;val==root-&gt;left-&gt;val)&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            left=0;</span><br><span class="line">        &#125;</span><br><span class="line">        if(root&amp;&amp;root-&gt;right&amp;&amp;root-&gt;val==root-&gt;right-&gt;val)&#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            right=0;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,right+left);</span><br><span class="line">        return max(right,left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>698. 划分为k个相等的子集</title>
    <url>/2022/09/20/LeetCode/698-%E5%88%92%E5%88%86%E4%B8%BAk%E4%B8%AA%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AD%90%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/">https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/</a> 给定一个整数数组  nums 和一个正整数 k，找出是否有可能把这个数组分成 k 个非空子集，其总和都相等。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： nums = [4, 3, 2, 3, 5, 2, 1], k = 4</span><br><span class="line">输出： True</span><br><span class="line">说明： 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,2,3,4], k = 3</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= k &lt;= len(nums) &lt;= 16</li>
<li>0 &lt; nums[i] &lt; 10000</li>
<li>每个元素的频率在 [1,4] 范围内</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        int all = accumulate(nums.begin(), nums.end(), 0);</span><br><span class="line">        if (all % k &gt; 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int per = all / k; </span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        if (nums.back() &gt; per) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int n = nums.size();</span><br><span class="line">        vector&lt;bool&gt; dp(1 &lt;&lt; n, false);</span><br><span class="line">        vector&lt;int&gt; curSum(1 &lt;&lt; n, 0);</span><br><span class="line">        dp[0] = true;</span><br><span class="line">        for (int i = 0; i &lt; 1 &lt;&lt; n; i++) &#123;</span><br><span class="line">            if (!dp[i]) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123; if (curSum[i] + nums[j] &gt; per) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                if (((i &gt;&gt; j) &amp; 1) == 0) &#123;</span><br><span class="line">                    int next = i  (1 &lt;&lt; j);</span><br><span class="line">                    if (!dp[next]) &#123;</span><br><span class="line">                        curSum[next] = (curSum[i] + nums[j]) % per;</span><br><span class="line">                        dp[next] = true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[(1 &lt;&lt; n) - 1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n*2^n)\)</li>
<li>空间复杂度\(O(2^n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>707. 设计链表</title>
    <url>/2022/09/23/LeetCode/707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/design-linked-list/">https://leetcode.cn/problems/design-linked-list/</a> 设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。 addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。 deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyLinkedList linkedList = new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2); //链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1); //返回2</span><br><span class="line">linkedList.deleteAtIndex(1); //现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1); //返回3</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>所有val值都在 [1, 1000] 之内。</li>
<li>操作次数将在  [1, 1000] 之内。</li>
<li>请不要使用内置的 LinkedList 库。</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyLinkedList &#123;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    struct ListNode&#123;</span><br><span class="line">        int val;</span><br><span class="line">        ListNode* next;</span><br><span class="line">        ListNode* prev;</span><br><span class="line">        ListNode(int val):val(val), next(nullptr), prev(nullptr) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    int _size;</span><br><span class="line">    ListNode* _dummyHead;</span><br><span class="line">    ListNode* _dummyTail;</span><br><span class="line">    </span><br><span class="line">public:</span><br><span class="line">    MyLinkedList() &#123;</span><br><span class="line">        _dummyHead = new ListNode(0);</span><br><span class="line">        _dummyTail = new ListNode(0);</span><br><span class="line">        _dummyHead-&gt;next = _dummyTail;</span><br><span class="line">        _dummyTail-&gt;prev = _dummyHead;</span><br><span class="line">        _size = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int get(int index) &#123;</span><br><span class="line">        if(index &gt; _size - 1  index &lt; 0)&#123; return -1; &#125; ListNode* cur = _dummyHead-&gt;next;</span><br><span class="line">        while(index--)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void addAtHead(int val) &#123;</span><br><span class="line">        ListNode* p = new ListNode(val);</span><br><span class="line">        p-&gt;next = _dummyHead-&gt;next;</span><br><span class="line">        _dummyHead-&gt;next-&gt;prev = p;</span><br><span class="line">        _dummyHead-&gt;next = p;</span><br><span class="line">        p-&gt;prev = _dummyHead;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void addAtTail(int val) &#123;</span><br><span class="line">        ListNode* p = new ListNode(val);</span><br><span class="line">        _dummyTail-&gt;prev-&gt;next = p;</span><br><span class="line">        p-&gt;prev = _dummyTail-&gt;prev;</span><br><span class="line">        p-&gt;next = _dummyTail;</span><br><span class="line">        _dummyTail-&gt;prev = p;</span><br><span class="line">        _size++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void addAtIndex(int index, int val) &#123;</span><br><span class="line">        if(index &gt; _size  index &lt; 0)&#123; return ; &#125; ListNode* cur = _dummyHead-&gt;next;</span><br><span class="line">        ListNode* p = new ListNode(val);</span><br><span class="line">        while(index--)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;prev-&gt;next = p;</span><br><span class="line">        p-&gt;prev = cur-&gt;prev;</span><br><span class="line">        p-&gt;next = cur;</span><br><span class="line">        cur-&gt;prev = p;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void deleteAtIndex(int index) &#123;</span><br><span class="line">        if(index &gt; _size - 1  index &lt; 0)&#123; return ; &#125; ListNode* cur = _dummyHead-&gt;next;</span><br><span class="line">        while(index--)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">        delete(cur);</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="line"> * MyLinkedList* obj = new MyLinkedList();</span><br><span class="line"> * int param_1 = obj-&gt;get(index);</span><br><span class="line"> * obj-&gt;addAtHead(val);</span><br><span class="line"> * obj-&gt;addAtTail(val);</span><br><span class="line"> * obj-&gt;addAtIndex(index,val);</span><br><span class="line"> * obj-&gt;deleteAtIndex(index);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>754. 到达终点数字</title>
    <url>/2022/11/04/LeetCode/754-%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="754-到达终点数字"><a href="#754-到达终点数字" class="headerlink" title="754. 到达终点数字"></a><a href="https://leetcode.cn/problems/reach-a-number/description/">754. 到达终点数字</a></h1><p>在一根无限长的数轴上，你站在0的位置。终点在target的位置。</p>
<p>你可以做一些数量的移动 numMoves :</p>
<ul>
<li>每次你可以选择向左或向右移动。</li>
<li>第 i 次移动（从  i == 1 开始，到 i == numMoves ），在选择的方向上走 i 步。</li>
</ul>
<p>给定整数 target ，返回 到达目标所需的 最小 移动次数(即最小 numMoves ) 。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: target = 2</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">第一次移动，从 0 到 1 。</span><br><span class="line">第二次移动，从 1 到 -1 。</span><br><span class="line">第三次移动，从 -1 到 2 。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: target = 3</span><br><span class="line">输出: 2</span><br><span class="line">解释:</span><br><span class="line">第一次移动，从 0 到 1 。</span><br><span class="line">第二次移动，从 1 到 3 。</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>$-10^9 &lt;= target &lt;= 10^9$</li>
<li>target != 0</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (target &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            k++;</span><br><span class="line">            target -= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target % <span class="number">2</span> == <span class="number">0</span> ? k : k + <span class="number">1</span> + k % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>764. 最大加号标志</title>
    <url>/2022/11/09/LeetCode/764-%E6%9C%80%E5%A4%A7%E5%8A%A0%E5%8F%B7%E6%A0%87%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="764-最大加号标志"><a href="#764-最大加号标志" class="headerlink" title="764. 最大加号标志"></a><a href="https://leetcode.cn/problems/largest-plus-sign/description/">764. 最大加号标志</a></h1><p>在一个 n x n 的矩阵 grid 中，除了在数组 mines 中给出的元素为 0，其他每个元素都为 1。mines[i] = [$x_i, y_i$]表示 grid[$x_i$][$y_i$] == 0</p>
<p>返回  grid 中包含 1 的最大的 轴对齐 加号标志的阶数 。如果未找到加号标志，则返回 0 。</p>
<p>一个 k 阶由 1 组成的 “轴对称”加号标志 具有中心网格 grid[r][c] == 1 ，以及4个从中心向上、向下、向左、向右延伸，长度为 k-1，由 1 组成的臂。注意，只有加号标志的所有网格要求为 1 ，别的网格可能为 0 也可能为 1 。</p>
<p>示例 1：</p>
<p><img src="http://img.x-17.top/leetcode/plus1-grid.jpg" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 5, mines = [[4, 2]]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。</span><br></pre></td></tr></table></figure><br>示例 2：</p>
<p><img src="http://img.x-17.top/leetcode/plus2-grid.jpg" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 1, mines = [[0, 0]]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 没有加号标志，返回 0 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= n &lt;= 500</li>
<li>1 &lt;= mines.length &lt;= 5000</li>
<li>0 &lt;= $x_i, y_i$ &lt; n</li>
<li>每一对 ($x_i, y_i$) 都 不重复</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, n));</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; banned;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;vec : mines) &#123;</span><br><span class="line">            banned.<span class="built_in">emplace</span>(vec[<span class="number">0</span>] * n + vec[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* left */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.<span class="built_in">count</span>(i * n + j)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], count);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* right */</span> </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.<span class="built_in">count</span>(i * n + j)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* up */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.<span class="built_in">count</span>(j * n + i)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[j][i] = <span class="built_in">min</span>(dp[j][i], count);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* down */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.<span class="built_in">count</span>(j * n + i)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[j][i] = <span class="built_in">min</span>(dp[j][i], count);</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n^2)$</li>
<li>空间复杂度：$O(n^2)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>769. 最多能完成排序的块</title>
    <url>/2022/10/13/LeetCode/769-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="769-最多能完成排序的块"><a href="#769-最多能完成排序的块" class="headerlink" title="769. 最多能完成排序的块"></a><a href="https://leetcode.cn/problems/max-chunks-to-make-sorted/">769. 最多能完成排序的块</a></h1><p>给定一个长度为 n 的整数数组 arr ，它表示在 [0, n - 1] 范围内的整数的排列。</p>
<p>我们将 arr 分割成若干 块 (即分区)，并对每个块单独排序。将它们连接起来后，使得连接的结果和按升序排序后的原数组相同。</p>
<p>返回数组能分成的最多块数量。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: arr = [4,3,2,1,0]</span><br><span class="line">输出: 1</span><br><span class="line">解释:</span><br><span class="line">将数组分成2块或者更多块，都无法得到所需的结果。</span><br><span class="line">例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: arr = [1,0,2,3,4]</span><br><span class="line">输出: 4</span><br><span class="line">解释:</span><br><span class="line">我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。</span><br><span class="line">然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>n == arr.length</li>
<li>1 &lt;= n &lt;= 10</li>
<li>0 &lt;= arr[i] &lt; n</li>
<li>arr 中每个元素都 不同</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>其实只要理解题意，这道题很简单，无非就是要我们依次找出数组前缀排序后与原数组排序后相同；又因为数组中的数为[0,n-1]并且只有n个数，那么一定不会重复；因此我们只需要找出当前前缀最大值和前缀最后一位下标是否相等即可。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            m=<span class="built_in">max</span>(arr[i],m);</span><br><span class="line">            <span class="keyword">if</span>(m==i)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>复杂度分析：</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>775. 全局倒置与局部倒置</title>
    <url>/2022/11/16/LeetCode/775-%E5%85%A8%E5%B1%80%E5%80%92%E7%BD%AE%E4%B8%8E%E5%B1%80%E9%83%A8%E5%80%92%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="775-全局倒置与局部倒置"><a href="#775-全局倒置与局部倒置" class="headerlink" title="775. 全局倒置与局部倒置"></a><a href="https://leetcode.cn/problems/global-and-local-inversions/description/">775. 全局倒置与局部倒置</a></h1><p>给你一个长度为 n 的整数数组 nums ，表示由范围 [0, n - 1] 内所有整数组成的一个排列。</p>
<p>全局倒置 的数目等于满足下述条件不同下标对 (i, j) 的数目：</p>
<ul>
<li>0 &lt;= i &lt; j &lt; n</li>
<li><p>nums[i] &gt; nums[j]<br>局部倒置 的数目等于满足下述条件的下标 i 的数目：</p>
</li>
<li><p>0 &lt;= i &lt; n - 1</p>
</li>
<li>nums[i] &gt; nums[i + 1]<br>当数组 nums 中 全局倒置 的数量等于 局部倒置 的数量时，返回 true ；否则，返回 false 。</li>
</ul>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,0,2]</span><br><span class="line">输出：true</span><br><span class="line">解释：有 1 个全局倒置，和 1 个局部倒置。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,0]</span><br><span class="line">输出：false</span><br><span class="line">解释：有 2 个全局倒置，和 1 个局部倒置。</span><br></pre></td></tr></table></figure><br>提示：</p>
<ul>
<li>n == nums.length</li>
<li>1 &lt;= n &lt;= $10^5$</li>
<li>0 &lt;= nums[i] &lt; n</li>
<li>nums 中的所有整数 互不相同</li>
<li>nums 是范围 [0, n - 1] 内所有数字组成的一个排列</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIdealPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(nums[i] - i) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>777. 在LR字符串中交换相邻字符</title>
    <url>/2022/10/02/LeetCode/777-%E5%9C%A8lr%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/swap-adjacent-in-lr-string/">https://leetcode.cn/problems/swap-adjacent-in-lr-string/</a> 在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如”RXXLRXRXL”）中进行移动操作。一次移动操作指用一个”LX”替换一个”XL”，或者用一个”XR”替换一个”RX”。现给定起始字符串start和结束字符串end，请编写代码，当且仅当存在一系列移动操作使得start可以转换成end时， 返回True。 示例 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释:</span><br><span class="line">我们可以通过以下几步将start转换成end:</span><br><span class="line">RXXLRXRXL -&gt;</span><br><span class="line">XRXLRXRXL -&gt;</span><br><span class="line">XRLXRXRXL -&gt;</span><br><span class="line">XRLXXRRXL -&gt;</span><br><span class="line">XRLXXRRLX</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= len(start) = len(end) &lt;= 10000。</li>
<li>start和end中的字符串仅限于’L’, ‘R’和’X’。</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool canTransform(string start, string end) &#123;</span><br><span class="line">        int n = start.length();</span><br><span class="line">        int i = 0, j = 0;</span><br><span class="line">        while (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            while (i &lt; n &amp;&amp; start[i] == &#x27;X&#x27;) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            while (j &lt; n &amp;&amp; end[j] == &#x27;X&#x27;) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">                if (start[i] != end[j]) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                char c = start[i];</span><br><span class="line">                if ((c == &#x27;L&#x27; &amp;&amp; i &lt; j)  (c == &#x27;R&#x27; &amp;&amp; i &gt; j)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while (i &lt; n) &#123;</span><br><span class="line">            if (start[i] != &#x27;X&#x27;) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        while (j &lt; n) &#123;</span><br><span class="line">            if (end[j] != &#x27;X&#x27;) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>779. 第K个语法符号</title>
    <url>/2022/10/20/LeetCode/779-%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="779-第K个语法符号"><a href="#779-第K个语法符号" class="headerlink" title="779. 第K个语法符号"></a><a href="https://leetcode.cn/problems/k-th-symbol-in-grammar/">779. 第K个语法符号</a></h1><p>我们构建了一个包含 n 行( 索引从 1  开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</p>
<ul>
<li>例如，对于 n = 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。</li>
</ul>
<p>给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 1, k = 1</span><br><span class="line">输出: 0</span><br><span class="line">解释: 第一行：0</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 2, k = 1</span><br><span class="line">输出: 0</span><br><span class="line">解释: </span><br><span class="line">第一行: 0 </span><br><span class="line">第二行: 01</span><br></pre></td></tr></table></figure><br>示例 3:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 2, k = 2</span><br><span class="line">输出: 1</span><br><span class="line">解释:</span><br><span class="line">第一行: 0</span><br><span class="line">第二行: 01</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>1 &lt;= n &lt;= 30</li>
<li>1 &lt;= k &lt;= $2^n - 1$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题和腾讯笔试题很像。<br>本质上每一次操作都是在上一行基础上添加其按位取反后的结果。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthGrammar</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            k &amp;= k - <span class="number">1</span>;</span><br><span class="line">            res ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(logk)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>782.变为棋盘</title>
    <url>/2022/08/23/LeetCode/782-%E5%8F%98%E4%B8%BA%E6%A3%8B%E7%9B%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/transform-to-chessboard/">https://leetcode.cn/problems/transform-to-chessboard/</a></p>
<p>一个 n x n 的二维网络 board 仅由 0 和 1 组成 。每次移动，你能任意交换两列或是两行的位置。<br>返回 将这个矩阵变为  “棋盘”  所需的最小移动次数 。如果不存在可行的变换，输出 -1。<br>“棋盘” 是指任意一格的上下左右四个方向的值均与本身不同的矩阵。<br>示例 1:<br><img src="https://x-17.top/wp-content/uploads/2022/08/chessboard1-grid.jpg" alt=""><br>输入: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]<br>输出: 2<br>解释:一种可行的变换方式如下，从左到右：<br>第一次移动交换了第一列和第二列。<br>第二次移动交换了第二行和第三行。<br>示例 2:<br><img src="https://x-17.top/wp-content/uploads/2022/08/chessboard2-grid.jpg" alt=""><br>输入: board = [[0, 1], [1, 0]]<br>输出: 0<br>解释: 注意左上角的格值为0时也是合法的棋盘，也是合法的棋盘.<br>示例 3:<br><img src="https://x-17.top/wp-content/uploads/2022/08/chessboard3-grid.jpg" alt=""><br>输入: board = [[1, 0], [1, 0]]<br>输出: -1<br>解释: 任意的变换都不能使这个输入变为合法的棋盘。  </p>
<p>提示：<br>n == board.length<br>n == board[i].length<br>2 &lt;= n &lt;= 30<br>board[i][j] 将只包含 0或 1</p>
</blockquote>
<h2 id="官方解法："><a href="#官方解法：" class="headerlink" title="官方解法："></a>官方解法：</h2><p>方法一：分维度计算</p>
<p>首先需要思考的是对矩阵做一次交换之后，矩阵的变换状态。比如我们以交换列为代表，在对任意两列进行交换之后，可以看到列交换是不会改变任意相邻两行之间的元素异同对应关系，比如相邻两行的两个元素<em>board</em>[i][j],<em>board</em>[i+1][j]原本就相同，任意列交换之后这个两个元素对应的关系保持不变，如果这两个元素本来就不同，经过列交换之后也仍然不同，因此可以推出矩阵一定只能包含有两种不同的行，要么与第一行的元素相同，要么每一行的元素刚好与第一行的元素“相反”。如果矩阵可以转换为合法的“棋盘”，假设第 1 行的元素为 [0,1,1,1,0]，则其他行的元素要么为 [0,1,1,1,0]，要么为 [1,0,0,0,1]。最终的棋盘一定只有两种不同的行，要么以 0 开始的 [0,1,0,1,⋯]，要么以 11 开始的 [1,0,1,0,⋯]，因此我们可以推出棋盘也一定可以通过列变换将所有的行变为只有以上两种状态的行，否则无法得到最终合法的“棋盘”。同时我们可以观察到，先换行再换列跟先换列再换行结果是一样的，因为我们可以先将所有的行调整到正确的位置，再将所有的列调整到正确的位置。行与列之间的变换实际是相互独立的，二者互不影响，列变换不会影响相邻两行的异同关系，行变换不会不会影响相邻两列的异同关系。</p>
<p>由于最终只有两种不同的行，要达成最终的“棋盘”实际上等价于将矩阵的行表示成 0,1 相互交替的状态，如果一个行无法变为 0,1 交替的状态，则我们认为矩阵不存在可行的变换。假设矩阵的某行用 [0,1] 表示之后得到数组为 [0,1,1,1,0,0]，那么只需求出这个数组变成 [0,1,0,1,0,1] 或者 [1,0,1,0,1,0] 的最少交换次数即可。同理，对于矩阵的列也是如此，这就将二维问题变成了两个一维问题。我们实际只需要分别将矩阵的第一行变为最终状态和第一列变为最终状态，最终的矩阵一定为合法“棋盘”。</p>
<p>首先我们需要检测矩阵的合法性，即该矩阵是否可以变为合法的“棋盘”。我们依次检测矩阵的每一行是否是否可以变为 0,1 交替，即变为 [0,1,0,1,⋯],[1,0,1,0,⋯] 两种可能的行；然后依次检测矩阵的每一列是否可以变为 0,10,1 交替，即变为 [0,1,0,1,⋯],[1,0,1,0,⋯] 两种可能的列。设行的数目为 n，检测矩阵的行与列时需要进行如下检测：</p>
<p>检测每一行和每一列的状态是否合法：由于列变换不改变相邻两行元素的对应关系，因此我们可以知道矩阵的行要么与第 11 行相同，要么与第 11 行“相反”。设第一行的状态为 <em>rowMask</em>，与之相反对应的状态为 <em>reverseRowMask</em>，我们检测每一行是否属于这两个合法的状态 <em>rowMask,reverseRowMask</em>，如果不合法直接返回，对于列也采用同样的检测方法。由于题目中的行与列的值均为 0 或者 1，且行数和列数最大为 30，我们利用压缩位图来表示每一行或者每一列的状态，可以用一个 32 位整数来表示每一行，其中整数每位上的数字对应着每列上的数字。</p>
<p>检测每一行和每一列中含有的数字是否合法：检测每一行或者每一列若要变为 0,1 交替的状态，如果 n 为偶数，则每一行中 1 的数目与 0 的数目相等；如果 n 为奇数，则每一行中 1 的数目与 0 的数目相差的绝对值一定为 1。此时我们只需要检测第一行中含有的数字 0,1 的个数是否合法，对于列我们也采用同样的检测方法。由于我们用一个 32 位整数来表示每一行或者每一列，我们只需要要快速计算出整数的二进制位上含有的 1 的数目即可。</p>
<p>检测不同状态的行数和列数是否合法：我们设矩阵中与第一行相同的行的数量为 <em>count</em>。根据我们之前的推论可知，需要满足两种不同的行交替分情况讨论：如果 n 为偶数，由于必须要满足两种不同的行交替，每种行的数目只能占到总行数的一半，此时一定有 <em>count</em>×2=n；如果 n 为奇数，由于必须要满足两种不同的行交替，则另一种行的数量只能为 <em>n−count</em>，由于必须满足交替不同，则二者之间的差值的绝对值一定为 11，因此此时一定满足 ∣2×<em>count</em>−n∣=1，满足以上条件才是合法的行数。我们采用同样的方法对矩阵的列数进行检测。</p>
<p>其次我们求出将矩阵变为棋盘的最少交换次数。分为两种情况讨论:</p>
<p>如果 n 为偶数，则此时最终的合法棋盘有两种可能，即第一行的元素的第一个元素 <em>board</em>[0][0]=0 或者 <em>board</em>[0][0]=1。我们可以选择将第 1 行变为以 0 开头，此时只需将偶数位上的 0 全部替换为 1 即可；也可以选择将第 1 行变为以 1 开头，此时只需将奇数位上的 0 全部替换为 1 即可。我们可以用位图来快速计算出偶数位或者奇数位上 1 的个数，可以与特定的数进行布尔代数运算即可快速消除奇数位或者偶数位上的 1。</p>
<p>如果 n 为奇数，则此时最终的合法棋盘只有一种可能，如果第一行中 0 的数目大于 1 的数目，此时第一行只能变为以 0 为开头交替的序列，此时我们只需要将偶数位上的 0 全部变为 1；如果第一行中 0 的数目小于 1 的数目，此时第一行只能交换变为以 1 为开头交替的序列，此时我们只需要将奇数位上的 0 全部变为 1。可以用位图来快速计算出偶数位或者奇数位上 1 的个数，可以与特定的数进行布尔代数运算即可快速消除奇数位或者偶数位上的 1。</p>
<p>由于我们采用 32 位整数表示每一行或者每一列，在快速计算偶数位或者上的 1 的数目时可以采用位运算掩码。比如 32 位整数 x，我们只保留 x 偶数位上的 1，此时我们需要去掉奇数位上的 1，此时只需将 x 与掩码：</p>
<p>\((1010 1010 1010 1010 1010 1010 1010 1010)_2=0xAAAAAAAA\)</p>
<p>相与即可；我们只保留 xx 奇数位上的 11，此时我们需要去掉偶数位上的 11，此时只需将 xx 与掩码：</p>
<p>\((0101 0101 0101 0101 0101 0101 0101 0101)_2=0x55555555\)</p>
<p>相与即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int getMoves(int mask, int count, int n) &#123;</span><br><span class="line">        int ones = __builtin_popcount(mask);</span><br><span class="line">        if (n &amp; 1) &#123;</span><br><span class="line">            /* 如果 n 为奇数，则每一行中 1 与 0 的数目相差为 1，且满足相邻行交替 */</span><br><span class="line">            if (abs(n - 2 * ones) != 1  abs(n - 2 * count) != 1 ) &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125;</span><br><span class="line">            if (ones == (n &gt;&gt; 1)) &#123;</span><br><span class="line">                /* 偶数位变为 1 的最小交换次数 */</span><br><span class="line">                return n / 2 - __builtin_popcount(mask &amp; 0xAAAAAAAA);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /* 奇数位变为 1 的最小交换次数 */</span><br><span class="line">                return (n + 1) / 2 - __builtin_popcount(mask &amp; 0x55555555);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123; </span><br><span class="line">            /* 如果 n 为偶数，则每一行中 1 与 0 的数目相等，且满足相邻行交替 */</span><br><span class="line">            if (ones != (n &gt;&gt; 1)  count != (n &gt;&gt; 1)) &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125;</span><br><span class="line">            /* 偶数位变为 1 的最小交换次数 */</span><br><span class="line">            int count0 = n / 2 - __builtin_popcount(mask &amp; 0xAAAAAAAA);</span><br><span class="line">            /* 奇数位变为 1 的最小交换次数 */</span><br><span class="line">            int count1 = n / 2 - __builtin_popcount(mask &amp; 0x55555555);  </span><br><span class="line">            return min(count0, count1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int movesToChessboard(vector&lt;vector&lt;int&gt;&gt;&amp; board) &#123;</span><br><span class="line">        int n = board.size();</span><br><span class="line">        int rowMask = 0, colMask = 0;        </span><br><span class="line"></span><br><span class="line">        /* 检查棋盘的第一行与第一列 */</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            rowMask = (board[0][i] &lt;&lt; i);</span><br><span class="line">            colMask = (board[i][0] &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">        int reverseRowMask = ((1 &lt;&lt; n) - 1) ^ rowMask;</span><br><span class="line">        int reverseColMask = ((1 &lt;&lt; n) - 1) ^ colMask;</span><br><span class="line">        int rowCnt = 0, colCnt = 0;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            int currRowMask = 0;</span><br><span class="line">            int currColMask = 0;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                currRowMask = (board[i][j] &lt;&lt; j);</span><br><span class="line">                currColMask = (board[j][i] &lt;&lt; j);</span><br><span class="line">            &#125;</span><br><span class="line">            /* 检测每一行的状态是否合法 */</span><br><span class="line">            if (currRowMask != rowMask &amp;&amp; currRowMask != reverseRowMask) &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125; else if (currRowMask == rowMask) &#123;</span><br><span class="line">                /* 记录与第一行相同的行数 */</span><br><span class="line">                rowCnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            /* 检测每一列的状态是否合法 */</span><br><span class="line">            if (currColMask != colMask &amp;&amp; currColMask != reverseColMask) &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125; else if (currColMask == colMask) &#123;</span><br><span class="line">                /* 记录与第一列相同的列数 */</span><br><span class="line">                colCnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int rowMoves = getMoves(rowMask, rowCnt, n);</span><br><span class="line">        int colMoves = getMoves(colMask, colCnt, n);</span><br><span class="line">        return (rowMoves == -1  colMoves == -1) ? -1 : (rowMoves + colMoves); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>784. 字母大小写全排列</title>
    <url>/2022/10/30/LeetCode/784-%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列</a></h1><p>给定一个字符串 s ，通过将字符串 s 中的每个字母转变大小写，我们可以获得一个新的字符串。</p>
<p>返回 所有可能得到的字符串集合 。以 任意顺序 返回输出。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a1b2&quot;</span><br><span class="line">输出：[&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;3z4&quot;</span><br><span class="line">输出: [&quot;3z4&quot;,&quot;3Z4&quot;]</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>1 &lt;= s.length &lt;= 12</li>
<li>s 由小写英文字母、大写英文字母和数字组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        queue&lt;string&gt; qu;</span><br><span class="line">        qu.<span class="built_in">emplace</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            string &amp;curr = qu.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (curr.<span class="built_in">size</span>() == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(curr);</span><br><span class="line">                qu.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> pos = curr.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isalpha</span>(s[pos])) &#123;</span><br><span class="line">                    string next = curr;</span><br><span class="line">                    next.<span class="built_in">push_back</span>(s[pos] ^ <span class="number">32</span>);</span><br><span class="line">                    qu.<span class="built_in">emplace</span>(next);</span><br><span class="line">                &#125;</span><br><span class="line">                curr.<span class="built_in">push_back</span>(s[pos]);                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n*2^n)$</li>
<li>空间复杂度：$O(n*2^n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>788. 旋转数字</title>
    <url>/2022/09/25/LeetCode/788-%E6%97%8B%E8%BD%AC%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/rotated-digits/">https://leetcode.cn/problems/rotated-digits/</a> 我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。 如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。 现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？ 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 4</span><br><span class="line">解释: </span><br><span class="line">在[1, 10]中有四个好数： 2, 5, 6, 9。</span><br><span class="line">注意 1 和 10 不是好数, 因为他们在旋转之后不变。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>N 的取值范围是 [1, 10000]。</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    map&lt;int,int&gt; m;</span><br><span class="line"></span><br><span class="line">    bool is(int n)&#123;</span><br><span class="line">        bool flag=false;</span><br><span class="line">        while(n)&#123;</span><br><span class="line">            if(m.count(n%10)&amp;&amp;m[n%10]==1)&#123;</span><br><span class="line">                flag=true;</span><br><span class="line">            &#125;</span><br><span class="line">            if(m.count(n%10)==0)&#123;</span><br><span class="line">                flag=false;</span><br><span class="line">                return flag;</span><br><span class="line">            &#125;</span><br><span class="line">            n/=10;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int rotatedDigits(int n) &#123;</span><br><span class="line">        m[0]=0;</span><br><span class="line">        m[1]=0;</span><br><span class="line">        m[2]=1;</span><br><span class="line">        m[5]=1;</span><br><span class="line">        m[6]=1;</span><br><span class="line">        m[8]=0;</span><br><span class="line">        m[9]=1;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            if(is(i))&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(nlogn)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>790. 多米诺和托米诺平铺</title>
    <url>/2022/11/12/LeetCode/790-%E5%A4%9A%E7%B1%B3%E8%AF%BA%E5%92%8C%E6%89%98%E7%B1%B3%E8%AF%BA%E5%B9%B3%E9%93%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="790-多米诺和托米诺平铺"><a href="#790-多米诺和托米诺平铺" class="headerlink" title="790. 多米诺和托米诺平铺"></a><a href="https://leetcode.cn/problems/domino-and-tromino-tiling/description/">790. 多米诺和托米诺平铺</a></h1><p>有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 “L” 的托米诺形。两种形状都可以旋转。</p>
<p><img src="http://img.x-17.top/leetcode/lc-domino.jpg" alt=""></p>
<p>给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 $10^9 + 7$ 取模 的值。</p>
<p>平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。</p>
<p>示例 1:</p>
<p><img src="http://img.x-17.top/leetcode/lc-domino1.jpg" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 3</span><br><span class="line">输出: 5</span><br><span class="line">解释: 五种不同的方法如上所示。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 1</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= n &lt;= 1000</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(<span class="number">4</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = (dp[i - <span class="number">1</span>][<span class="number">0</span>] + dp[i - <span class="number">1</span>][<span class="number">2</span>]) % mod;</span><br><span class="line">            dp[i][<span class="number">2</span>] = (dp[i - <span class="number">1</span>][<span class="number">0</span>] + dp[i - <span class="number">1</span>][<span class="number">1</span>]) % mod;</span><br><span class="line">            dp[i][<span class="number">3</span>] = (dp[i - <span class="number">1</span>][<span class="number">0</span>] + dp[i - <span class="number">1</span>][<span class="number">1</span>] + dp[i - <span class="number">1</span>][<span class="number">2</span>] + dp[i - <span class="number">1</span>][<span class="number">3</span>]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>792. 匹配子序列的单词数</title>
    <url>/2022/11/17/LeetCode/792-%E5%8C%B9%E9%85%8D%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="792-匹配子序列的单词数"><a href="#792-匹配子序列的单词数" class="headerlink" title="792. 匹配子序列的单词数"></a><a href="https://leetcode.cn/problems/number-of-matching-subsequences/description/">792. 匹配子序列的单词数</a></h1><p>给定字符串 s 和字符串数组 words, 返回  words[i] 中是s的子序列的单词个数 。</p>
<p>字符串的 子序列 是从原始字符串中生成的新字符串，可以从中删去一些字符(可以是none)，而不改变其余字符的相对顺序。</p>
<ul>
<li>例如， “ace” 是 “abcde” 的子序列。</li>
</ul>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcde&quot;, words = [&quot;a&quot;,&quot;bb&quot;,&quot;acd&quot;,&quot;ace&quot;]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 有三个是 s 的子序列的单词: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;dsahjpjauf&quot;, words = [&quot;ahjpjau&quot;,&quot;ja&quot;,&quot;ahbwzgqnuk&quot;,&quot;tnmlanowax&quot;]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>1 &lt;= s.length &lt;= 5 * $10^4$</li>
<li>1 &lt;= words.length &lt;= 5000</li>
<li>1 &lt;= words[i].length &lt;= 50</li>
<li>words[i]和 s 都只由小写字母组成。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numMatchingSubseq</span><span class="params">(string s, vector&lt;string&gt; &amp;words)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pos</span>(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            pos[s[i] - <span class="string">&#x27;a&#x27;</span>].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;w : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w.<span class="built_in">size</span>() &gt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                --res;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> p = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : w) &#123;</span><br><span class="line">                <span class="keyword">auto</span> &amp;ps = pos[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                <span class="keyword">auto</span> it = <span class="built_in">upper_bound</span>(ps.<span class="built_in">begin</span>(), ps.<span class="built_in">end</span>(), p);</span><br><span class="line">                <span class="keyword">if</span> (it == ps.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    --res;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p = *it;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(\sum_{i=0}^{m-1}size_i*log n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>791. 自定义字符串排序</title>
    <url>/2022/11/13/LeetCode/791-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="791-自定义字符串排序"><a href="#791-自定义字符串排序" class="headerlink" title="791. 自定义字符串排序"></a><a href="https://leetcode.cn/problems/custom-sort-string/">791. 自定义字符串排序</a></h1><p>给定两个字符串 order 和 s 。order 的所有单词都是 唯一 的，并且以前按照一些自定义的顺序排序。</p>
<p>对 s 的字符进行置换，使其与排序的 order 相匹配。更具体地说，如果在 order 中的字符 x 出现字符 y 之前，那么在排列后的字符串中， x 也应该出现在 y 之前。</p>
<p>返回 满足这个性质的 s 的任意排列 。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: order = &quot;cba&quot;, s = &quot;abcd&quot;</span><br><span class="line">输出: &quot;cbad&quot;</span><br><span class="line">解释: </span><br><span class="line">“a”、“b”、“c”是按顺序出现的，所以“a”、“b”、“c”的顺序应该是“c”、“b”、“a”。</span><br><span class="line">因为“d”不是按顺序出现的，所以它可以在返回的字符串中的任何位置。“dcba”、“cdba”、“cbda”也是有效的输出。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: order = &quot;cbafg&quot;, s = &quot;abcd&quot;</span><br><span class="line">输出: &quot;cbad&quot;</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>1 &lt;= order.length &lt;= 26</li>
<li>1 &lt;= s.length &lt;= 200</li>
<li>order 和 s 由小写英文字母组成</li>
<li>order 中的所有字符都 不同</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">customSortString</span><span class="params">(string order, string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; order.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            val[order[i] - <span class="string">&#x27;a&#x27;</span>] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), [&amp;](<span class="type">char</span> c0, <span class="type">char</span> c1) &#123;</span><br><span class="line">            <span class="keyword">return</span> val[c0 - <span class="string">&#x27;a&#x27;</span>] &lt; val[c1 - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(nlogn + C)$</li>
<li>空间复杂度：$O(C)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>793. 阶乘函数后 K 个零</title>
    <url>/2022/08/28/LeetCode/793-%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E5%90%8E-k-%E4%B8%AA%E9%9B%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/">https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/</a> f(x) 是 x! 末尾是 0 的数量。回想一下 x! = 1 * 2 * 3 * … * x，且 0! = 1 。 例如， f(3) = 0 ，因为 3! = 6 的末尾没有 0 ；而 f(11) = 2 ，因为 11!= 39916800 末端有 2 个 0 。 给定 k，找出返回能满足 f(x) = k 的非负整数 x 的数量。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：k = 0</span><br><span class="line">输出：5</span><br><span class="line">解释：0!, 1!, 2!, 3!, 和 4! 均符合 k = 0 的条件。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：k = 5</span><br><span class="line">输出：0</span><br><span class="line">解释：没有匹配到这样的 x!，符合 k = 5 的条件。</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 3</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure>
<p>提示:</p>
<ul>
<li>\(0 &lt;= k &lt;= 10^9\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>根据题意，只有因子2和5相乘能得到以0为结尾的数。 又因为2出现次数远大于5，因此只需求5为因子出现的次数（25及类似的要记多次），也可分析出所求其实只有0和5两种结果。（官方代码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int zeta(long x) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        while (x) &#123;</span><br><span class="line">            res += x / 5;</span><br><span class="line">            x /= 5;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long long help(int k) &#123;</span><br><span class="line">        long long r = 5LL * k;</span><br><span class="line">        long long l = 0;</span><br><span class="line">        while (l &lt;= r) &#123;</span><br><span class="line">            long long mid = (l + r) / 2;</span><br><span class="line">            if (zeta(mid) &lt; k) &#123;</span><br><span class="line">                l = mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                r = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return r + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int preimageSizeFZF(int k) &#123;</span><br><span class="line">        return help(k + 1) - help(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(log^2k)\)</li>
<li>空间复杂度：\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>795. 区间子数组个数</title>
    <url>/2022/11/24/LeetCode/795-%E5%8C%BA%E9%97%B4%E5%AD%90%E6%95%B0%E7%BB%84%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="795-区间子数组个数"><a href="#795-区间子数组个数" class="headerlink" title="795. 区间子数组个数"></a><a href="https://leetcode.cn/problems/number-of-subarrays-with-bounded-maximum/description/">795. 区间子数组个数</a></h1><p>给你一个整数数组 nums 和两个整数：left 及 right 。找出 nums 中连续、非空且其中最大元素在范围 [left, right] 内的子数组，并返回满足条件的子数组的个数。</p>
<p>生成的测试用例保证结果符合 32-bit 整数范围。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,1,4,3], left = 2, right = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：满足条件的三个子数组：[2], [2, 1], [3]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,9,2,5,6], left = 2, right = 8</span><br><span class="line">输出：7</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= nums.length &lt;= $10^5$</li>
<li>0 &lt;= nums[i] &lt;= $10^9$</li>
<li>0 &lt;= left &lt;= right &lt;= $10^9$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayBoundedMax</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(nums, right) - <span class="built_in">count</span>(nums, left - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> lower)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : nums) &#123;</span><br><span class="line">            cur = x &lt;= lower ? cur + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            res += cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>799. 香槟塔</title>
    <url>/2022/11/20/LeetCode/799-%E9%A6%99%E6%A7%9F%E5%A1%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="799-香槟塔"><a href="#799-香槟塔" class="headerlink" title="799. 香槟塔"></a><a href="https://leetcode.cn/problems/champagne-tower/description/">799. 香槟塔</a></h1><p>我们把玻璃杯摆成金字塔的形状，其中 第一层 有 1 个玻璃杯， 第二层 有 2 个，依次类推到第 100 层，每个玻璃杯 (250ml) 将盛有香槟。</p>
<p>从顶层的第一个玻璃杯开始倾倒一些香槟，当顶层的杯子满了，任何溢出的香槟都会立刻等流量的流向左右两侧的玻璃杯。当左右两边的杯子也满了，就会等流量的流向它们左右两边的杯子，依次类推。（当最底层的玻璃杯满了，香槟会流到地板上）</p>
<p>例如，在倾倒一杯香槟后，最顶层的玻璃杯满了。倾倒了两杯香槟后，第二层的两个玻璃杯各自盛放一半的香槟。在倒三杯香槟后，第二层的香槟满了 - 此时总共有三个满的玻璃杯。在倒第四杯后，第三层中间的玻璃杯盛放了一半的香槟，他两边的玻璃杯各自盛放了四分之一的香槟，如下图所示。</p>
<p>现在当倾倒了非负整数杯香槟后，返回第 i 行 j 个玻璃杯所盛放的香槟占玻璃杯容积的比例（ i 和 j 都从0开始）。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: poured(倾倒香槟总杯数) = 1, query<span class="emphasis">_glass(杯子的位置数) = 1, query_</span>row(行数) = 1</span><br><span class="line">输出: 0.00000</span><br><span class="line">解释: 我们在顶层（下标是（0，0））倒了一杯香槟后，没有溢出，因此所有在顶层以下的玻璃杯都是空的。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: poured(倾倒香槟总杯数) = 2, query<span class="emphasis">_glass(杯子的位置数) = 1, query_</span>row(行数) = 1</span><br><span class="line">输出: 0.50000</span><br><span class="line">解释: 我们在顶层（下标是（0，0）倒了两杯香槟后，有一杯量的香槟将从顶层溢出，位于（1，0）的玻璃杯和（1，1）的玻璃杯平分了这一杯香槟，所以每个玻璃杯有一半的香槟。</span><br></pre></td></tr></table></figure><br>示例 3:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: poured = 100000009, query<span class="emphasis">_row = 33, query_</span>glass = 17</span><br><span class="line">输出: 1.00000</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>0 &lt;= poured &lt;= $10^9$</li>
<li>0 &lt;= query_glass &lt;= query_row &lt; 100</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">champagneTower</span><span class="params">(<span class="type">int</span> poured, <span class="type">int</span> query_row, <span class="type">int</span> query_glass)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; row = &#123;(<span class="type">double</span>)poured&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= query_row; i++) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">nextRow</span><span class="params">(i + <span class="number">1</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; row.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="type">double</span> volume = row[j];</span><br><span class="line">                <span class="keyword">if</span> (volume &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    nextRow[j] += (volume - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                    nextRow[j + <span class="number">1</span>] += (volume - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            row = nextRow;</span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="number">1.0</span>, row[query_glass]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n^2)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>801. 使序列递增的最小交换次数</title>
    <url>/2022/10/10/LeetCode/801-%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="801-使序列递增的最小交换次数"><a href="#801-使序列递增的最小交换次数" class="headerlink" title="801. 使序列递增的最小交换次数"></a><a href="https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/">801. 使序列递增的最小交换次数</a></h1><p>我们有两个长度相等且不为空的整型数组 nums1 和 nums2 。在一次操作中，我们可以交换 nums1[i] 和 nums2[i]的元素。</p>
<ul>
<li>例如，如果 nums1 = [1,2,3,8] ， nums2 =[5,6,7,4] ，你可以交换 i = 3 处的元素，得到 nums1 =[1,2,3,4] 和 nums2 =[5,6,7,8] 。<br>返回 使 nums1 和 nums2 严格递增 所需操作的最小次数 。</li>
</ul>
<p>数组 arr 严格递增 且  arr[0] &lt; arr[1] &lt; arr[2] &lt; … &lt; arr[arr.length - 1] 。</p>
<p>注意：</p>
<ul>
<li>用例保证可以实现操作。</li>
</ul>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: nums1 = [1,3,5,4], nums2 = [1,2,3,7]</span><br><span class="line">输出: 1</span><br><span class="line">解释: </span><br><span class="line">交换 A[3] 和 B[3] 后，两个数组如下:</span><br><span class="line">A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]</span><br><span class="line">两个数组均为严格递增的。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>$2 &lt;= nums1.length &lt;= 10^5$</li>
<li>$nums2.length == nums1.length$</li>
<li>$0 &lt;= nums1[i], nums2[i] &lt;= 2 * 10^5$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先，在位置i会出现不需要交换，需要交换和不能交换三种情况，即如下两式其中一个成立或者同时成立</p>
<ol>
<li>$nums_1[i] &gt; nums_1[i-1] 且 nums_2[i] &gt; nums_2[i-1] $</li>
<li>$nums_1[i] &gt; nums_2[i-1] 且 nums_2[i] &gt; nums_1[i-1] $</li>
</ol>
<p>因此，<br>用<code>dp[i][0]</code>表示到第i位满足要求且第i位不进行交换；<br>用<code>dp[i][1]</code>表示到第i位满足要求且第i位进行交换；<br>当满足式1而不满足式2时，有</p>
<script type="math/tex; mode=display">
\begin{cases}
dp[i][0] = dp[i-1][0]\\
dp[i][1] = dp[i-1][1] + 1
\end{cases}</script><p>当满足式2而不满足式1时，有</p>
<script type="math/tex; mode=display">
\begin{cases}
dp[i][0] = dp[i-1][1]\\
dp[i][1] = dp[i-1][0] + 1
\end{cases}</script><p>当两式同时满足时，有</p>
<script type="math/tex; mode=display">
\begin{cases}
dp[i][0] = min\{dp[i-1][0],dp[i-1][1]\}\\
dp[i][1] = min\{dp[i-1][1],dp[i-1][0]\} + 1
\end{cases}</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> at = a, bt = b;</span><br><span class="line">            a = b = n;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &gt; nums1[i - <span class="number">1</span>] &amp;&amp; nums2[i] &gt; nums2[i - <span class="number">1</span>])  &#123;</span><br><span class="line">                a = <span class="built_in">min</span>(a, at);</span><br><span class="line">                b = <span class="built_in">min</span>(b, bt + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &gt; nums2[i - <span class="number">1</span>] &amp;&amp; nums2[i] &gt; nums1[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                a = <span class="built_in">min</span>(a, bt);</span><br><span class="line">                b = <span class="built_in">min</span>(b, at + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>805. 数组的均值分割</title>
    <url>/2022/11/14/LeetCode/805-%E6%95%B0%E7%BB%84%E7%9A%84%E5%9D%87%E5%80%BC%E5%88%86%E5%89%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="805-数组的均值分割"><a href="#805-数组的均值分割" class="headerlink" title="805. 数组的均值分割"></a><a href="https://leetcode.cn/problems/split-array-with-same-average/">805. 数组的均值分割</a></h1><p>给定你一个整数数组 nums</p>
<p>我们要将 nums 数组中的每个元素移动到 A 数组 或者 B 数组中，使得 A 数组和 B 数组不为空，并且 average(A) == average(B) 。</p>
<p>如果可以完成则返回true ， 否则返回 false  。</p>
<p>注意：对于数组 arr ,  average(arr) 是 arr 的所有元素的和除以 arr 长度。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,2,3,4,5,6,7,8]</span><br><span class="line">输出: true</span><br><span class="line">解释: 我们可以将数组分割为 [1,4,5,8] 和 [2,3,6,7], 他们的平均值都是4.5。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: nums = [3,1]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>1 &lt;= nums.length &lt;= 30</li>
<li>0 &lt;= nums[i] &lt;= $10^4$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">splitArraySameAverage</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), m = n / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">bool</span> isPossible = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum * i % n == <span class="number">0</span>) &#123;</span><br><span class="line">                isPossible = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (!isPossible) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;unordered_set&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>].<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x: dp[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> curr = x + num;</span><br><span class="line">                    <span class="keyword">if</span> (curr * n == sum * i) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dp[i].<span class="built_in">emplace</span>(curr);</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n^2*sum(nums))$</li>
<li>空间复杂度：$O(n*sum(nums))$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>808. 分汤</title>
    <url>/2022/11/21/LeetCode/808-%E5%88%86%E6%B1%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="808-分汤"><a href="#808-分汤" class="headerlink" title="808. 分汤"></a><a href="https://leetcode.cn/problems/soup-servings/description/">808. 分汤</a></h1><p>有 A 和 B 两种类型 的汤。一开始每种类型的汤有 n 毫升。有四种分配操作：</p>
<p>提供 100ml 的 汤A 和 0ml 的 汤B 。<br>提供 75ml 的 汤A 和 25ml 的 汤B 。<br>提供 50ml 的 汤A 和 50ml 的 汤B 。<br>提供 25ml 的 汤A 和 75ml 的 汤B 。<br>当我们把汤分配给某人之后，汤就没有了。每个回合，我们将从四种概率同为 0.25 的操作中进行分配选择。如果汤的剩余量不足以完成某次操作，我们将尽可能分配。当两种类型的汤都分配完时，停止操作。</p>
<p>注意 不存在先分配 100 ml 汤B 的操作。</p>
<p>需要返回的值： 汤A 先分配完的概率 +  汤A和汤B 同时分配完的概率 / 2。返回值在正确答案 10-5 的范围内将被认为是正确的。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 50</span><br><span class="line">输出: 0.62500</span><br><span class="line">解释:如果我们选择前两个操作，A 首先将变为空。</span><br><span class="line">对于第三个操作，A 和 B 会同时变为空。</span><br><span class="line">对于第四个操作，B 首先将变为空。</span><br><span class="line">所以 A 变为空的总概率加上 A 和 B 同时变为空的概率的一半是 0.25 <span class="emphasis">*(1 + 1 + 0.5 + 0)= 0.625。</span></span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: n = 100</span><br><span class="line">输出: 0.71875</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>0 &lt;= n &lt;= $10^9$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><code>C++
class Solution &#123;
public:
    double soupServings(int n) &#123;
        n = ceil((double) n / 25);
        if (n &gt;= 179) &#123;
            return 1.0;
        &#125;
        vector&lt;vector&lt;double&gt;&gt; dp(n + 1, vector&lt;double&gt;(n + 1));
        dp[0][0] = 0.5;
        for (int i = 1; i &lt;= n; i++) &#123;
            dp[0][i] = 1.0;
        &#125;
        for (int i = 1; i &lt;= n; i++) &#123;
            for (int j = 1; j &lt;= n; j++) &#123;
                dp[i][j] = (dp[max(0, i - 4)][j] + dp[max(0, i - 3)][max(0, j - 1)] +
                           dp[max(0, i - 2)][max(0, j - 2)] + dp[max(0, i - 1)][max(0, j - 3)]) / 4.0;
            &#125;
        &#125;
        return dp[n][n];
    &#125;
&#125;;</code>​​​​​​​</p>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(C^2)$</li>
<li>空间复杂度：$O(C^2)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>809. 情感丰富的文字</title>
    <url>/2022/11/25/LeetCode/809-%E6%83%85%E6%84%9F%E4%B8%B0%E5%AF%8C%E7%9A%84%E6%96%87%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="809-情感丰富的文字"><a href="#809-情感丰富的文字" class="headerlink" title="809. 情感丰富的文字"></a><a href="https://leetcode.cn/problems/expressive-words/description/">809. 情感丰富的文字</a></h1><p>有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&gt; “heeellooo”, “hi” -&gt; “hiii”。我们将相邻字母都相同的一串字符定义为相同字母组，例如：”h”, “eee”, “ll”, “ooo”。</p>
<p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到 3 或以上。</p>
<p>例如，以 “hello” 为例，我们可以对字母组 “o” 扩张得到 “hellooo”，但是无法以同样的方法得到 “helloo” 因为字母组 “oo” 长度小于 3。此外，我们可以进行另一种扩张 “ll” -&gt; “lllll” 以获得 “helllllooo”。如果 s = “helllllooo”，那么查询词 “hello” 是可扩张的，因为可以对它执行这两种扩张操作使得 query = “hello” -&gt; “hellooo” -&gt; “helllllooo” = s。</p>
<p>输入一组查询单词，输出其中可扩张的单词数量。</p>
<p>示例：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入： </span><br><span class="line">s = &quot;heeellooo&quot;</span><br><span class="line">words = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]</span><br><span class="line">输出：1</span><br><span class="line">解释：</span><br><span class="line">我们能通过扩张 &quot;hello&quot; 的 &quot;e&quot; 和 &quot;o&quot; 来得到 &quot;heeellooo&quot;。</span><br><span class="line">我们不能通过扩张 &quot;helo&quot; 来得到 &quot;heeellooo&quot; 因为 &quot;ll&quot; 的长度小于 3 。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= s.length, words.length &lt;= 100</li>
<li>1 &lt;= words[i].length &lt;= 100</li>
<li>s 和所有在 words 中的单词都只由小写字母组成。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">expressiveWords</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string&amp; word: words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">expand</span>(s, word)) &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">expand</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">const</span> string&amp; t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; j &lt; t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != t[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> ch = s[i];</span><br><span class="line">            <span class="type">int</span> cnti = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] == ch) &#123;</span><br><span class="line">                ++cnti;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> cntj = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; t.<span class="built_in">size</span>() &amp;&amp; t[j] == ch) &#123;</span><br><span class="line">                ++cntj;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnti &lt; cntj) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnti != cntj &amp;&amp; cnti &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == s.<span class="built_in">size</span>() &amp;&amp; j == t.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n|s|+\sum_i|words_i|)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>811. 子域名访问计数</title>
    <url>/2022/10/05/LeetCode/811-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="811-子域名访问计数"><a href="#811-子域名访问计数" class="headerlink" title="811. 子域名访问计数"></a><a href="https://leetcode.cn/problems/subdomain-visit-count/">811. 子域名访问计数</a></h1><blockquote>
<p>网站域名 “discuss.leetcode.com” 由多个子域名组成。顶级域名为 “com” ，二级域名为 “leetcode.com” ，最低一级为 “discuss.leetcode.com” 。当访问域名 “discuss.leetcode.com” 时，同时也会隐式访问其父域名 “leetcode.com” 以及 “com” 。</p>
<p>计数配对域名 是遵循 “rep d1.d2.d3” 或 “rep d1.d2” 格式的一个域名表示，其中 rep 表示访问域名的次数，d1.d2.d3 为域名本身。</p>
<p>例如，”9001 discuss.leetcode.com” 就是一个 计数配对域名 ，表示 discuss.leetcode.com 被访问了 9001 次。<br>给你一个 计数配对域名 组成的数组 cpdomains ，解析得到输入中每个子域名对应的 计数配对域名 ，并以数组形式返回。可以按 任意顺序 返回答案。</p>
<p> 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：cpdomains = [&quot;9001 discuss.leetcode.com&quot;]</span><br><span class="line">输出：[&quot;9001 leetcode.com&quot;,&quot;9001 discuss.leetcode.com&quot;,&quot;9001 com&quot;]</span><br><span class="line">解释：例子中仅包含一个网站域名：&quot;discuss.leetcode.com&quot;。</span><br><span class="line">按照前文描述，子域名 &quot;leetcode.com&quot; 和 &quot;com&quot; 都会被访问，所以它们都被访问了 9001 次。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：cpdomains = [&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]</span><br><span class="line">输出：[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]</span><br><span class="line">解释：按照前文描述，会访问 &quot;google.mail.com&quot; 900 次，&quot;yahoo.com&quot; 50 次，&quot;intel.mail.com&quot; 1 次，&quot;wiki.org&quot; 5 次。</span><br><span class="line">而对于父域名，会访问 &quot;mail.com&quot; 900 + 1 = 901 次，&quot;com&quot; 900 + 50 + 1 = 951 次，和 &quot;org&quot; 5 次。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><p>1 &lt;= cpdomain.length &lt;= 100</p>
</li>
<li><p>1 &lt;= cpdomain[i].length &lt;= 100</p>
</li>
<li>cpdomain[i] 会遵循 “repi d1i.d2i.d3i” 或 “repi d1i.d2i” 格式</li>
<li>repi 是范围 [1, 104] 内的一个整数</li>
<li>d1i、d2i 和 d3i 由小写英文字母组成</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">subdomainVisits</span><span class="params">(vector&lt;string&gt;&amp; cpdomains)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; counts;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;cpdomain : cpdomains) &#123;</span><br><span class="line">            <span class="type">int</span> space = cpdomain.<span class="built_in">find</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="type">int</span> count = <span class="built_in">stoi</span>(cpdomain.<span class="built_in">substr</span>(<span class="number">0</span>, space));</span><br><span class="line">            string domain = cpdomain.<span class="built_in">substr</span>(space + <span class="number">1</span>);</span><br><span class="line">            counts[domain] += count;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; domain.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (domain[i] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    string subdomain = domain.<span class="built_in">substr</span>(i + <span class="number">1</span>);</span><br><span class="line">                    counts[subdomain] += count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[subdomain, count] : counts) &#123;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(<span class="built_in">to_string</span>(count) + <span class="string">&quot; &quot;</span> + subdomain);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>813. 最大平均值和的分组</title>
    <url>/2022/11/28/LeetCode/813-%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC%E5%92%8C%E7%9A%84%E5%88%86%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="813-最大平均值和的分组"><a href="#813-最大平均值和的分组" class="headerlink" title="813. 最大平均值和的分组"></a><a href="https://leetcode.cn/problems/largest-sum-of-averages/description/">813. 最大平均值和的分组</a></h1><p>给定数组 nums 和一个整数 k 。我们将给定的数组 nums 分成 最多 k 个相邻的非空子数组 。 分数 由每个子数组内的平均值的总和构成。</p>
<p>注意我们必须使用 nums 数组中的每一个数进行分组，并且分数不一定需要是整数。</p>
<p>返回我们所能得到的最大 分数 是多少。答案误差在 10-6 内被视为是正确的。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: nums = [9,1,2,3,9], k = 3</span><br><span class="line">输出: 20.00000</span><br><span class="line">解释: </span><br><span class="line">nums 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20. </span><br><span class="line">我们也可以把 nums 分成[9, 1], [2], [3, 9]. </span><br><span class="line">这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,2,3,4,5,6,7], k = 4</span><br><span class="line">输出: 20.50000</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>1 &lt;= nums.length &lt;= 100</li>
<li>1 &lt;= nums[i] &lt;= $10^4$</li>
<li>1 &lt;= k &lt;= nums.length</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">largestSumOfAverages</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">prefix</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            prefix[i + <span class="number">1</span>] = prefix[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = prefix[i] / i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= j; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = j - <span class="number">1</span>; x &lt; i; x++) &#123;</span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i], dp[x] + (prefix[i] - prefix[x]) / (i - x));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(k*n^2)$</li>
<li>空间复杂度：$O(k*n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>816. 模糊坐标</title>
    <url>/2022/11/07/LeetCode/816-%E6%A8%A1%E7%B3%8A%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="816-模糊坐标"><a href="#816-模糊坐标" class="headerlink" title="816. 模糊坐标"></a><a href="https://leetcode.cn/problems/ambiguous-coordinates/description/">816. 模糊坐标</a></h1><p>我们有一些二维坐标，如 “(1, 3)” 或 “(2, 0.5)”，然后我们移除所有逗号，小数点和空格，得到一个字符串S。返回所有可能的原始字符串到一个列表中。</p>
<p>原始的坐标表示法不会存在多余的零，所以不会出现类似于”00”, “0.0”, “0.00”, “1.0”, “001”, “00.01”或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现“.1”形式的数字。</p>
<p>最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。</p>
<p>示例 1:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: &quot;(123)&quot;</span><br><span class="line">输出: [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: &quot;(00011)&quot;</span><br><span class="line">输出:  [&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]</span><br><span class="line">解释: </span><br><span class="line">0.0, 00, 0001 或 00.01 是不被允许的。</span><br></pre></td></tr></table></figure><br>示例 3:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: &quot;(0123)&quot;</span><br><span class="line">输出: [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]</span><br></pre></td></tr></table></figure><br>示例 4:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: &quot;(100)&quot;</span><br><span class="line">输出: [(10, 0)]</span><br><span class="line">解释: </span><br><span class="line">1.0 是不被允许的。</span><br></pre></td></tr></table></figure></p>
<p>提示:</p>
<ul>
<li>4 &lt;= S.length &lt;= 12.</li>
<li>S[0] = “(“, S[S.length - 1] = “)”, 且字符串 S 中的其他元素都是数字。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">getPos</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; pos;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] != <span class="string">&#x27;0&#x27;</span> || s == <span class="string">&quot;0&quot;</span>) pos.<span class="built_in">push_back</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">1</span>; p &lt; s.<span class="built_in">size</span>(); ++p) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p != <span class="number">1</span> &amp;&amp; s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) || s.<span class="built_in">back</span>() == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            pos.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, p) + <span class="string">&quot;.&quot;</span> + s.<span class="built_in">substr</span>(p));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">ambiguousCoordinates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>() - <span class="number">2</span>;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        s = s.<span class="built_in">substr</span>(<span class="number">1</span>, s.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt; n; ++l) &#123;</span><br><span class="line">            vector&lt;string&gt; lt = <span class="built_in">getPos</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, l));</span><br><span class="line">            <span class="keyword">if</span> (lt.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            vector&lt;string&gt; rt = <span class="built_in">getPos</span>(s.<span class="built_in">substr</span>(l));</span><br><span class="line">            <span class="keyword">if</span> (rt.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : lt) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; j : rt) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(<span class="string">&quot;(&quot;</span> + i + <span class="string">&quot;, &quot;</span> + j + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n^3)$</li>
<li>空间复杂度：$O(n^3)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>817. 链表组件</title>
    <url>/2022/10/12/LeetCode/817-%E9%93%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="817-链表组件"><a href="#817-链表组件" class="headerlink" title="817. 链表组件"></a><a href="https://leetcode.cn/problems/linked-list-components/">817. 链表组件</a></h1><p>给定链表头结点 <code>head</code>，该链表上的每个结点都有一个 唯一的整型值 。同时给定列表 <code>nums</code>，该列表是上述链表中整型值的一个子集。</p>
<p>返回列表 <code>nums</code> 中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表 <code>nums</code> 中）构成的集合。</p>
<p>示例 1：</p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom1.jpg" alt=""></p>
<p>输入: head = [0,1,2,3], nums = [0,1,3]<br>输出: 2<br>解释: 链表中,0 和 1 是相连接的，且 nums 中不包含 2，所以 [0, 1] 是 nums 的一个组件，同理 [3] 也是一个组件，故返回 2。<br>示例 2：</p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom2.jpg" alt=""></p>
<p>输入: head = [0,1,2,3,4], nums = [0,3,1,4]<br>输出: 2<br>解释: 链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</p>
<p>提示：</p>
<ul>
<li>链表中节点数为n</li>
<li>1 &lt;= n &lt;= 104</li>
<li>0 &lt;= Node.val &lt; n</li>
<li>Node.val 中所有值 不同</li>
<li>1 &lt;= nums.length &lt;= n</li>
<li>0 &lt;= nums[i] &lt; n</li>
<li>nums 中所有值 不同</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>根据题意，我们只需要找出数组中的 在链表中是连续的数 的组数。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numComponents</span><span class="params">(ListNode* head, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            m.<span class="built_in">emplace</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag&amp;&amp;m.<span class="built_in">count</span>(head-&gt;val))&#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                head=head-&gt;next;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!flag&amp;&amp;m.<span class="built_in">count</span>(head-&gt;val))&#123;</span><br><span class="line">                head=head-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                head=head-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(m)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>827. 最大人工岛</title>
    <url>/2022/09/18/LeetCode/827-%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/making-a-large-island/">https://leetcode.cn/problems/making-a-large-island/</a> 给你一个大小为 n x n 二进制矩阵 grid 。最多 只能将一格 0 变成 1 。 返回执行此操作后，grid 中最大的岛屿面积是多少？ 岛屿 由一组上、下、左、右四个方向相连的 1 形成。 示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: grid = [[1, 0], [0, 1]]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: grid = [[1, 1], [1, 0]]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 将一格0变成1，岛屿的面积扩大为 4。</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: grid = [[1, 1], [1, 1]]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 没有0可以让我们变成1，面积依然为 4。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>n == grid.length</li>
<li>n == grid[i].length</li>
<li>1 &lt;= n &lt;= 500</li>
<li>grid[i][j] 为 0 或 1</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const vector&lt;int&gt; d = &#123;0, -1, 0, 1, 0&#125;;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool valid(int n, int x, int y) &#123;</span><br><span class="line">        return x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int dfs(const vector&lt;vector&lt;int&gt;&gt; &amp;grid, int x, int y, vector&lt;vector&lt;int&gt;&gt; &amp;tag, int t) &#123;</span><br><span class="line">        int n = grid.size(), res = 1;</span><br><span class="line">        tag[x][y] = t;</span><br><span class="line">        for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">            int x1 = x + d[i], y1 = y + d[i + 1];</span><br><span class="line">            if (valid(n, x1, y1) &amp;&amp; grid[x1][y1] == 1 &amp;&amp; tag[x1][y1] == 0) &#123;</span><br><span class="line">                res += dfs(grid, x1, y1, tag, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int largestIsland(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        int n = grid.size(), res = 0;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; tag(n, vector&lt;int&gt;(n));</span><br><span class="line">        unordered_map&lt;int, int&gt; area;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                if (grid[i][j] == 1 &amp;&amp; tag[i][j] == 0) &#123;</span><br><span class="line">                    int t = i * n + j + 1;</span><br><span class="line">                    area[t] = dfs(grid, i, j, tag, t);</span><br><span class="line">                    res = max(res, area[t]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                if (grid[i][j] == 0) &#123;</span><br><span class="line">                    int z = 1;</span><br><span class="line">                    unordered_set&lt;int&gt; connected;</span><br><span class="line">                    for (int k = 0; k &lt; 4; k++) &#123; int x = i + d[k], y = j + d[k + 1]; if (!valid(n, x, y)  tag[x][y] == 0  connected.count(tag[x][y]) &gt; 0) &#123;</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                        z += area[tag[x][y]];</span><br><span class="line">                        connected.insert(tag[x][y]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res = max(res, z);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n^2)\)</li>
<li>空间复杂度\(O(n^2)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>828. 统计子串中的唯一字符</title>
    <url>/2022/09/06/LeetCode/828-%E7%BB%9F%E8%AE%A1%E5%AD%90%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/">https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/</a> 我们定义了一个函数 countUniqueChars(s) 来统计字符串 s 中的唯一字符，并返回唯一字符的个数。 例如：s = “LEETCODE” ，则其中 “L”, “T”,”C”,”O”,”D” 都是唯一字符，因为它们只出现一次，所以 countUniqueChars(s) = 5 。 本题将会给你一个字符串 s ，我们需要返回 countUniqueChars(t) 的总和，其中 t 是 s 的子字符串。输入用例保证返回值为 32 位整数。 注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计 s 的所有子字符串中的唯一字符）。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;ABC&quot;</span><br><span class="line">输出: 10</span><br><span class="line">解释: 所有可能的子串为：&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; 和 &quot;ABC&quot;。</span><br><span class="line">其中，每一个子串都由独特字符构成。</span><br><span class="line">所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;ABA&quot;</span><br><span class="line">输出: 8</span><br><span class="line">解释: 除了 countUniqueChars(&quot;ABA&quot;) = 1 之外，其余与示例 1 相同。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;LEETCODE&quot;</span><br><span class="line">输出：92</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 10^5</li>
<li>s 只包含大写英文字符</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题意是求出给定字符串的全部子串中唯一字符的个数，因此只需要计算每个字符能在多少个子串中成为唯一字符，即一个字符分别在第i,j,k位出现的话，就应该有\((j-i)*(k-j)\)个字符串中位于j位的该字符是唯一字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int uniqueLetterString(string s) &#123;</span><br><span class="line">        map&lt;char,vector&lt;int&gt;&gt; a;</span><br><span class="line">        for(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">            a[s[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for(auto it=a.begin();it!=a.end();it++)&#123;</span><br><span class="line">            vector&lt;int&gt; b;</span><br><span class="line">            b.push_back(-1);</span><br><span class="line">            for(int i=0;i&lt;it-&gt;second.size();i++)&#123;</span><br><span class="line">                b.push_back(it-&gt;second[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            b.push_back(s.length());</span><br><span class="line">            for(int i=1;i&lt;b.size()-1;i++)&#123;</span><br><span class="line">                ans+=(b[i]-b[i-1])*(b[i+1]-b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>850. 矩形面积 II</title>
    <url>/2022/09/16/LeetCode/850-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF-ii/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/rectangle-area-ii/">https://leetcode.cn/problems/rectangle-area-ii/</a> 我们给出了一个（轴对齐的）二维矩形列表 rectangles 。 对于 rectangle[i] = [x1, y1, x2, y2]，其中（x1，y1）是矩形 i 左下角的坐标， (xi1, yi1) 是该矩形 左下角 的坐标， (xi2, yi2) 是该矩形 右上角 的坐标。 计算平面中所有 rectangles 所覆盖的 总面积 。任何被两个或多个矩形覆盖的区域应只计算 一次 。 返回 总面积 。因为答案可能太大，返回 \(10^9 + 7\) 的 模 。 示例 1： <img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]</span><br><span class="line">输出：6</span><br><span class="line">解释：如图所示，三个矩形覆盖了总面积为6的区域。</span><br><span class="line">从(1,1)到(2,2)，绿色矩形和红色矩形重叠。</span><br><span class="line">从(1,0)到(2,3)，三个矩形都重叠。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：rectangles = [[0,0,1000000000,1000000000]]</span><br><span class="line">输出：49</span><br></pre></td></tr></table></figure>
<p>解释：答案是 \(10^{18} 对 (10^9 + 7) \)取模的结果， 即 49 。 提示：</p>
<ul>
<li>1 &lt;= rectangles.length &lt;= 200</li>
<li>rectanges[i].length = 4</li>
<li>\(0 &lt;= x_{i1}, y_{i1}, x_{i2}, y_{i2} &lt;= 10^9\)</li>
<li>矩形叠加覆盖后的总面积不会超越 \(2^{63}  - 1 \)，这意味着可以用一个 64 位有符号整数来保存面积结果。</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int rectangleArea(vector&lt;vector&lt;int&gt;&gt;&amp; rectangles) &#123;</span><br><span class="line">        int n = rectangles.size();</span><br><span class="line">        vector&lt;int&gt; hbound;</span><br><span class="line">        for (const auto&amp; rect: rectangles) &#123;</span><br><span class="line">            // 下边界</span><br><span class="line">            hbound.push_back(rect[1]);</span><br><span class="line">            // 上边界</span><br><span class="line">            hbound.push_back(rect[3]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(hbound.begin(), hbound.end());</span><br><span class="line">        hbound.erase(unique(hbound.begin(), hbound.end()), hbound.end());</span><br><span class="line">        int m = hbound.size();</span><br><span class="line">        // 「思路与算法部分」的 length 数组并不需要显式地存储下来</span><br><span class="line">        // length[i] 可以通过 hbound[i+1] - hbound[i] 得到</span><br><span class="line">        vector&lt;int&gt; seg(m - 1);</span><br><span class="line"></span><br><span class="line">        vector&lt;tuple&lt;int, int, int&gt;&gt; sweep;</span><br><span class="line">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            // 左边界</span><br><span class="line">            sweep.emplace_back(rectangles[i][0], i, 1);</span><br><span class="line">            // 右边界</span><br><span class="line">            sweep.emplace_back(rectangles[i][2], i, -1);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(sweep.begin(), sweep.end());</span><br><span class="line"></span><br><span class="line">        long long ans = 0;</span><br><span class="line">        for (int i = 0; i &lt; sweep.size(); ++i) &#123;</span><br><span class="line">            int j = i;</span><br><span class="line">            while (j + 1 &lt; sweep.size() &amp;&amp; get&lt;0&gt;(sweep[i]) == get&lt;0&gt;(sweep[j + 1])) &#123;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            if (j + 1 == sweep.size()) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            // 一次性地处理掉一批横坐标相同的左右边界</span><br><span class="line">            for (int k = i; k &lt;= j; ++k) &#123;</span><br><span class="line">                auto&amp;&amp; [_, idx, diff] = sweep[k];</span><br><span class="line">                int left = rectangles[idx][1], right = rectangles[idx][3];</span><br><span class="line">                for (int x = 0; x &lt; m - 1; ++x) &#123;</span><br><span class="line">                    if (left &lt;= hbound[x] &amp;&amp; hbound[x + 1] &lt;= right) &#123;</span><br><span class="line">                        seg[x] += diff;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            int cover = 0;</span><br><span class="line">            for (int k = 0; k &lt; m - 1; ++k) &#123; if (seg[k] &gt; 0) &#123;</span><br><span class="line">                    cover += (hbound[k + 1] - hbound[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += static_cast&lt;long long&gt;(cover) * (get&lt;0&gt;(sweep[j + 1]) - get&lt;0&gt;(sweep[j]));</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans % static_cast&lt;int&gt;(1e9 + 7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n^2)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>854. 相似度为 K 的字符串</title>
    <url>/2022/09/21/LeetCode/854-%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BA-k-%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/k-similar-strings/">https://leetcode.cn/problems/k-similar-strings/</a> 对于某些非负整数 k ，如果交换 s1 中两个字母的位置恰好 k 次，能够使结果字符串等于 s2 ，则认为字符串 s1 和 s2 的 相似度为 k 。 给你两个字母异位词 s1 和 s2 ，返回 s1 和 s2 的相似度 k 的最小值。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;ab&quot;, s2 = &quot;ba&quot;</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;abc&quot;, s2 = &quot;bca&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= s1.length &lt;= 20</li>
<li>s2.length == s1.length</li>
<li>s1 和 s2  只包含集合 {‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’} 中的小写字母</li>
<li>s2 是 s1 的一个字母异位词</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int kSimilarity(string s1, string s2) &#123;</span><br><span class="line">        int n = s1.size();</span><br><span class="line">        queue&lt;pair&lt;string, int&gt;&gt; qu;</span><br><span class="line">        unordered_set&lt;string&gt; visit;</span><br><span class="line">        qu.emplace(s1, 0);</span><br><span class="line">        visit.emplace(s1);</span><br><span class="line">        for (int step = 0;; step++) &#123;</span><br><span class="line">            int sz = qu.size();</span><br><span class="line">            for (int i = 0; i &lt; sz; i++) &#123;</span><br><span class="line">                auto [cur, pos] = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                if (cur == s2) &#123;</span><br><span class="line">                    return step;</span><br><span class="line">                &#125;</span><br><span class="line">                while (pos &lt; n &amp;&amp; cur[pos] == s2[pos]) &#123;</span><br><span class="line">                    pos++;</span><br><span class="line">                &#125;</span><br><span class="line">                for (int j = pos + 1; j &lt; n; j++) &#123;</span><br><span class="line">                    if (cur[j] != s2[j] &amp;&amp; cur[j] == s2[pos]) &#123; // 剪枝，只在 cur[j] != s2[j] 时去交换</span><br><span class="line">                        swap(cur[pos], cur[j]);</span><br><span class="line">                        if (!visit.count(cur)) &#123;</span><br><span class="line">                            visit.emplace(cur);</span><br><span class="line">                            qu.emplace(cur, pos + 1);</span><br><span class="line">                        &#125;</span><br><span class="line">                        swap(cur[pos], cur[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>856. 括号的分数</title>
    <url>/2022/10/09/LeetCode/856-%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="856-括号的分数"><a href="#856-括号的分数" class="headerlink" title="856. 括号的分数"></a><a href="https://leetcode.cn/problems/score-of-parentheses/">856. 括号的分数</a></h1><p>给定一个平衡括号字符串 S，按下述规则计算该字符串的分数：</p>
<ul>
<li><p>() 得 1 分。</p>
</li>
<li><p>AB 得 A + B 分，其中 A 和 B 是平衡括号字符串。</p>
</li>
<li>(A) 得 2 * A 分，其中 A 是平衡括号字符串。</li>
</ul>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： &quot;()&quot;</span><br><span class="line">输出： 1</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： &quot;(())&quot;</span><br><span class="line">输出： 2</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： &quot;()()&quot;</span><br><span class="line">输出： 2</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： &quot;(()(()))&quot;</span><br><span class="line">输出： 6</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><p>S 是平衡括号字符串，且只含有 ( 和 ) 。</p>
</li>
<li><p>2 &lt;= S.length &lt;= 50</p>
</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>根据题意，我们可以求每组”()”对应的深度d，那么$2^d$就是这组”()”所贡献的分数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">scoreOfParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>,flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            flag+=(s[i]==<span class="string">&#x27;(&#x27;</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                ans+=<span class="number">1</span>&lt;&lt;flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>857. 雇佣 K 名工人的最低成本</title>
    <url>/2022/09/11/LeetCode/857-%E9%9B%87%E4%BD%A3-k-%E5%90%8D%E5%B7%A5%E4%BA%BA%E7%9A%84%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/">https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/</a> 有 n 名工人。 给定两个数组 quality 和 wage ，其中，quality[i] 表示第 i 名工人的工作质量，其最低期望工资为 wage[i] 。 现在我们想雇佣 k 名工人组成一个工资组。在雇佣 一组 k 名工人时，我们必须按照下述规则向他们支付工资： 对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。 工资组中的每名工人至少应当得到他们的最低期望工资。 给定整数 k ，返回 组成满足上述条件的付费群体所需的最小金额 。在实际答案的 10-5 以内的答案将被接受。。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： quality = [10,20,5], wage = [70,50,30], k = 2</span><br><span class="line">输出： 105.00000</span><br><span class="line">解释： 我们向 0 号工人支付 70，向 2 号工人支付 35。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3</span><br><span class="line">输出： 30.66667</span><br><span class="line">解释： 我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>n == quality.length == wage.length</li>
<li>\(1 &lt;= k &lt;= n &lt;= 10^4\)</li>
<li>\(1 &lt;= quality[i], wage[i] &lt;= 10^4\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double mincostToHireWorkers(vector&lt;int&gt;&amp; quality, vector&lt;int&gt;&amp; wage, int k) &#123;</span><br><span class="line">        int n = quality.size();</span><br><span class="line">        vector&lt;int&gt; h(n, 0);</span><br><span class="line">        iota(h.begin(), h.end(), 0);</span><br><span class="line">        sort(h.begin(), h.end(), [&amp;](int&amp; a, int&amp; b) &#123;</span><br><span class="line">            return quality[a] * wage[b] &gt; quality[b] * wage[a];</span><br><span class="line">        &#125;);</span><br><span class="line">        double res = 1e9;</span><br><span class="line">        double totalq = 0.0;</span><br><span class="line">        priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; q;</span><br><span class="line">        for (int i = 0; i &lt; k - 1; i++) &#123;</span><br><span class="line">            totalq += quality[h[i]];</span><br><span class="line">            q.push(quality[h[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = k - 1; i &lt; n; i++) &#123;</span><br><span class="line">            int idx = h[i];</span><br><span class="line">            totalq += quality[idx];</span><br><span class="line">            q.push(quality[idx]);</span><br><span class="line">            double totalc = ((double) wage[idx] / quality[idx]) * totalq;</span><br><span class="line">            res = min(res, totalc);</span><br><span class="line">            totalq -= q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(nlogn)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>862. 和至少为 K 的最短子数组</title>
    <url>/2022/10/26/LeetCode/862-%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-K-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="862-和至少为-K-的最短子数组"><a href="#862-和至少为-K-的最短子数组" class="headerlink" title="862. 和至少为 K 的最短子数组"></a><a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/">862. 和至少为 K 的最短子数组</a></h1><p>给你一个整数数组 nums 和一个整数 k ，找出 nums 中和至少为 k 的 最短非空子数组 ，并返回该子数组的长度。如果不存在这样的 子数组 ，返回 -1 。</p>
<p>子数组 是数组中 连续 的一部分。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [1], k = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2], k = 4</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,-1,2], k = 3</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= nums.length &lt;= $10^5$</li>
<li>$-10^5$ &lt;= nums[i] &lt;= $10^5$</li>
<li>1 &lt;= k &lt;= $10^9$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span>&gt; <span class="title">preSumArr</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            preSumArr[i + <span class="number">1</span>] = preSumArr[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = n + <span class="number">1</span>;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; qu;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">long</span> curSum = preSumArr[i];</span><br><span class="line">            <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>() &amp;&amp; curSum - preSumArr[qu.<span class="built_in">front</span>()] &gt;= k) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, i - qu.<span class="built_in">front</span>());</span><br><span class="line">                qu.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>() &amp;&amp; preSumArr[qu.<span class="built_in">back</span>()] &gt;= curSum) &#123;</span><br><span class="line">                qu.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            qu.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res &lt; n + <span class="number">1</span> ? res : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>864. 获取所有钥匙的最短路径</title>
    <url>/2022/11/10/LeetCode/864-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="864-获取所有钥匙的最短路径"><a href="#864-获取所有钥匙的最短路径" class="headerlink" title="864. 获取所有钥匙的最短路径"></a><a href="https://leetcode.cn/problems/shortest-path-to-get-all-keys/description/">864. 获取所有钥匙的最短路径</a></h1><p>给定一个二维网格 grid ，其中：</p>
<ul>
<li>‘.’ 代表一个空房间</li>
<li>‘#’ 代表一堵</li>
<li>‘@’ 是起点</li>
<li>小写字母代表钥匙</li>
<li>大写字母代表锁</li>
</ul>
<p>我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p>
<p>假设 k 为 钥匙/锁 的个数，且满足 1 &lt;= k &lt;= 6，字母表中的前 k 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p>
<p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回 -1 。</p>
<p>示例 1：</p>
<p><img src="http://img.x-17.top/leetcode/lc-keys2.jpg" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：grid = [&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]</span><br><span class="line">输出：8</span><br><span class="line">解释：目标是获得所有钥匙，而不是打开所有锁。</span><br></pre></td></tr></table></figure><br>示例 2：</p>
<p><img src="http://img.x-17.top/leetcode/lc-key2.jpg" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：grid = [&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><br>示例 3:<br><img src="http://img.x-17.top/leetcode/lc-keys3.jpg" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: grid = [&quot;@Aa&quot;]</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>m == grid.length</li>
<li>n == grid[i].length</li>
<li>1 &lt;= m, n &lt;= 30</li>
<li>grid[i][j] 只含有 ‘.’, ‘#’, ‘@’, ‘a’-‘f’ 以及 ‘A’-‘F’</li>
<li>钥匙的数目范围是 [1, 6] </li>
<li>每个钥匙都对应一个 不同 的字母</li>
<li>每个钥匙正好打开一个对应的锁</li>
</ul>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathAllKeys</span><span class="params">(vector&lt;string&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sx = <span class="number">0</span>, sy = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; key_to_idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">                    sx = i;</span><br><span class="line">                    sy = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(grid[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!key_to_idx.<span class="built_in">count</span>(grid[i][j])) &#123;</span><br><span class="line">                        <span class="type">int</span> idx = key_to_idx.<span class="built_in">size</span>();</span><br><span class="line">                        key_to_idx[grid[i][j]] = idx;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">dist</span>(m, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span> &lt;&lt; key_to_idx.<span class="built_in">size</span>(), <span class="number">-1</span>)));</span><br><span class="line">        q.<span class="built_in">emplace</span>(sx, sy, <span class="number">0</span>);</span><br><span class="line">        dist[sx][sy][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, y, mask] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + dirs[i][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> ny = y + dirs[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (grid[nx][ny] == <span class="string">&#x27;.&#x27;</span> || grid[nx][ny] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (dist[nx][ny][mask] == <span class="number">-1</span>) &#123;</span><br><span class="line">                            dist[nx][ny][mask] = dist[x][y][mask] + <span class="number">1</span>;</span><br><span class="line">                            q.<span class="built_in">emplace</span>(nx, ny, mask);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(grid[nx][ny])) &#123;</span><br><span class="line">                        <span class="type">int</span> idx = key_to_idx[grid[nx][ny]];</span><br><span class="line">                        <span class="keyword">if</span> (dist[nx][ny][mask | (<span class="number">1</span> &lt;&lt; idx)] == <span class="number">-1</span>) &#123;</span><br><span class="line">                            dist[nx][ny][mask | (<span class="number">1</span> &lt;&lt; idx)] = dist[x][y][mask] + <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((mask | (<span class="number">1</span> &lt;&lt; idx)) == (<span class="number">1</span> &lt;&lt; key_to_idx.<span class="built_in">size</span>()) - <span class="number">1</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> dist[nx][ny][mask | (<span class="number">1</span> &lt;&lt; idx)];</span><br><span class="line">                            &#125;</span><br><span class="line">                            q.<span class="built_in">emplace</span>(nx, ny, mask | (<span class="number">1</span> &lt;&lt; idx));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">int</span> idx = key_to_idx[<span class="built_in">tolower</span>(grid[nx][ny])];</span><br><span class="line">                        <span class="keyword">if</span> ((mask &amp; (<span class="number">1</span> &lt;&lt; idx)) &amp;&amp; dist[nx][ny][mask] == <span class="number">-1</span>) &#123;</span><br><span class="line">                            dist[nx][ny][mask] = dist[x][y][mask] + <span class="number">1</span>;</span><br><span class="line">                            q.<span class="built_in">emplace</span>(nx, ny, mask);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(mn*2^k)$</li>
<li>空间复杂度：$O(mn*2^k)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>886. 可能的二分法</title>
    <url>/2022/10/16/LeetCode/886-%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="886-可能的二分法"><a href="#886-可能的二分法" class="headerlink" title="886. 可能的二分法"></a><a href="https://leetcode.cn/problems/possible-bipartition/https://leetcode.cn/problems/possible-bipartition/">886. 可能的二分法</a></h1><p>给定一组 n 人（编号为 1, 2, …, n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p>
<p>给定整数 n 和数组 dislikes ，其中 dislikes[i] = [ai, bi] ，表示不允许将编号为 ai 和  bi的人归入同一组。当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：n = 4, dislikes = [[1,2],[1,3],[2,4]]</span><br><span class="line">输出：true</span><br><span class="line">解释：group1 [1,4], group2 [2,3]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：n = 3, dislikes = [[1,2],[1,3],[2,3]]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= n &lt;= 2000</li>
<li>0 &lt;= dislikes.length &lt;= $10^4$</li>
<li>dislikes[i].length == 2</li>
<li>1 &lt;= dislikes[i][j] &lt;= n</li>
<li>ai &lt; bi</li>
<li>dislikes 中每一组都 不同</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>染色法加深搜</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> curnode, <span class="type">int</span> nowcolor, vector&lt;<span class="type">int</span>&gt;&amp; color, <span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; g)</span> </span>&#123;</span><br><span class="line">        color[curnode] = nowcolor;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; nextnode : g[curnode]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[nextnode] &amp;&amp; color[nextnode] == color[curnode]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!color[nextnode] &amp;&amp; !<span class="built_in">dfs</span>(nextnode, <span class="number">3</span> ^ nowcolor, color, g)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">possibleBipartition</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dislikes)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">color</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; p : dislikes) &#123;</span><br><span class="line">            g[p[<span class="number">0</span>]].<span class="built_in">push_back</span>(p[<span class="number">1</span>]);</span><br><span class="line">            g[p[<span class="number">1</span>]].<span class="built_in">push_back</span>(p[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[i] == <span class="number">0</span> &amp;&amp; !<span class="built_in">dfs</span>(i, <span class="number">1</span>, color, g)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n+m)$</li>
<li>空间复杂度：$O(n+m)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>891. 子序列宽度之和</title>
    <url>/2022/11/18/LeetCode/891-%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="891-子序列宽度之和"><a href="#891-子序列宽度之和" class="headerlink" title="891. 子序列宽度之和"></a><a href="https://leetcode.cn/problems/sum-of-subsequence-widths/description/">891. 子序列宽度之和</a></h1><p>一个序列的 宽度 定义为该序列中最大元素和最小元素的差值。</p>
<p>给你一个整数数组 nums ，返回 nums 的所有非空 子序列 的 宽度之和 。由于答案可能非常大，请返回对 109 + 7 取余 后的结果。</p>
<p>子序列 定义为从一个数组里删除一些（或者不删除）元素，但不改变剩下元素的顺序得到的数组。例如，[3,6,2,7] 就是数组 [0,3,1,6,2,2,7] 的一个子序列。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,1,3]</span><br><span class="line">输出：6</span><br><span class="line">解释：子序列为 [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3] 。</span><br><span class="line">相应的宽度是 0, 0, 0, 1, 1, 2, 2 。</span><br><span class="line">宽度之和是 6 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [2]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= nums.length &lt;= $10^5$</li>
<li>1 &lt;= nums[i] &lt;= $10^5$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumSubseqWidths</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x = nums[<span class="number">0</span>], y = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            res = (res + nums[j] * (y - <span class="number">1</span>) - x) % mod;</span><br><span class="line">            x = (x * <span class="number">2</span> + nums[j]) % mod;</span><br><span class="line">            y = y * <span class="number">2</span> % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (res + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(nlogn)$</li>
<li>空间复杂度：$O(logn)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>882. 细分图中的可到达节点</title>
    <url>/2022/11/26/LeetCode/882-%E7%BB%86%E5%88%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="882-细分图中的可到达节点"><a href="#882-细分图中的可到达节点" class="headerlink" title="882. 细分图中的可到达节点"></a><a href="https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/description/">882. 细分图中的可到达节点</a></h1><p>给你一个无向图（原始图），图中有 n 个节点，编号从 0 到 n - 1 。你决定将图中的每条边 细分 为一条节点链，每条边之间的新节点数各不相同。</p>
<p>图用由边组成的二维数组 edges 表示，其中 edges[i] = [ui, vi, cnti] 表示原始图中节点 ui 和 vi 之间存在一条边，cnti 是将边 细分 后的新节点总数。注意，cnti == 0 表示边不可细分。</p>
<p>要 细分 边 [ui, vi] ，需要将其替换为 (cnti + 1) 条新边，和 cnti 个新节点。新节点为 x1, x2, …, xcnti ，新边为 [ui, x1], [x1, x2], [x2, x3], …, [xcnti+1, xcnti], [xcnti, vi] 。</p>
<p>现在得到一个 新的细分图 ，请你计算从节点 0 出发，可以到达多少个节点？如果节点间距离是 maxMoves 或更少，则视为 可以到达 。</p>
<p>给你原始图和 maxMoves ，返回 新的细分图中从节点 0 出发 可到达的节点数 。</p>
<p>示例 1：<br><img src="http://img.x-17.top/leetcode/origfinal.png" alt=""><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3</span><br><span class="line">输出：13</span><br><span class="line">解释：边的细分情况如上图所示。</span><br><span class="line">可以到达的节点已经用黄色标注出来。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5</span><br><span class="line">输出：1</span><br><span class="line">解释：节点 0 与图的其余部分没有连通，所以只有节点 0 可以到达。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, $10^4$)</li>
<li>edges[i].length == 3</li>
<li>0 &lt;= $u_i$ &lt; $v_i$ &lt; n</li>
<li>图中 不存在平行边</li>
<li>0 &lt;= cnti &lt;= $10^4$</li>
<li>0 &lt;= maxMoves &lt;= $10^9$</li>
<li>1 &lt;= n &lt;= 3000</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">encode</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u * n + v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachableNodes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> maxMoves, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">adList</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], nodes = edge[<span class="number">2</span>];</span><br><span class="line">            adList[u].<span class="built_in">emplace_back</span>(v, nodes);</span><br><span class="line">            adList[v].<span class="built_in">emplace_back</span>(u, nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; used;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">        <span class="type">int</span> reachableNodes = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">        pq.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>().first &lt;= maxMoves) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [step, u] = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">count</span>(u)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited.<span class="built_in">emplace</span>(u);</span><br><span class="line">            reachableNodes++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [v, nodes] : adList[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodes + step + <span class="number">1</span> &lt;= maxMoves &amp;&amp; !visited.<span class="built_in">count</span>(v)) &#123;</span><br><span class="line">                    pq.<span class="built_in">emplace</span>(nodes + step + <span class="number">1</span>, v);</span><br><span class="line">                &#125;</span><br><span class="line">                used[<span class="built_in">encode</span>(u, v, n)] = <span class="built_in">min</span>(nodes, maxMoves - step);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], nodes = edge[<span class="number">2</span>];</span><br><span class="line">            reachableNodes += <span class="built_in">min</span>(nodes, used[<span class="built_in">encode</span>(u, v, n)] + used[<span class="built_in">encode</span>(v, u, n)]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reachableNodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(E*logV)$</li>
<li>空间复杂度：$O(V+E)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>895. 最大频率栈</title>
    <url>/2022/11/30/LeetCode/895-%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="895-最大频率栈"><a href="#895-最大频率栈" class="headerlink" title="895. 最大频率栈"></a><a href="https://leetcode.cn/problems/maximum-frequency-stack/description/">895. 最大频率栈</a></h1><p>设计一个类似堆栈的数据结构，将元素推入堆栈，并从堆栈中弹出出现频率最高的元素。</p>
<p>实现 FreqStack 类:</p>
<p>FreqStack() 构造一个空的堆栈。<br>void push(int val) 将一个整数 val 压入栈顶。<br>int pop() 删除并返回堆栈中出现频率最高的元素。<br>如果出现频率最高的元素不只一个，则移除并返回最接近栈顶的元素。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;],</span><br><span class="line">[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]</span><br><span class="line">输出：[null,null,null,null,null,null,null,5,7,5,4]</span><br><span class="line">解释：</span><br><span class="line">FreqStack = new FreqStack();</span><br><span class="line">freqStack.push (5);//堆栈为 [5]</span><br><span class="line">freqStack.push (7);//堆栈是 [5,7]</span><br><span class="line">freqStack.push (5);//堆栈是 [5,7,5]</span><br><span class="line">freqStack.push (7);//堆栈是 [5,7,5,7]</span><br><span class="line">freqStack.push (4);//堆栈是 [5,7,5,7,4]</span><br><span class="line">freqStack.push (5);//堆栈是 [5,7,5,7,4,5]</span><br><span class="line">freqStack.pop ();//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,5,7,4]。</span><br><span class="line">freqStack.pop ();//返回 7 ，因为 5 和 7 出现频率最高，但7最接近顶部。堆栈变成 [5,7,5,4]。</span><br><span class="line">freqStack.pop ();//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,4]。</span><br><span class="line">freqStack.pop ();//返回 4 ，因为 4, 5 和 7 出现频率最高，但 4 是最接近顶部的。堆栈变成 [5,7]。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>0 &lt;= val &lt;= $10^9$</li>
<li>push 和 pop 的操作数不大于 $2 * 10^4$。</li>
<li>输入保证在调用 pop 之前堆栈中至少有一个元素。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FreqStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FreqStack</span>() &#123;</span><br><span class="line">        maxFreq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        freq[val]++;</span><br><span class="line">        group[freq[val]].<span class="built_in">push</span>(val);</span><br><span class="line">        maxFreq = <span class="built_in">max</span>(maxFreq, freq[val]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val = group[maxFreq].<span class="built_in">top</span>();</span><br><span class="line">        freq[val]--;</span><br><span class="line">        group[maxFreq].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (group[maxFreq].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            maxFreq--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; freq;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, stack&lt;<span class="type">int</span>&gt;&gt; group;</span><br><span class="line">    <span class="type">int</span> maxFreq;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(1)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>901. 股票价格跨度</title>
    <url>/2022/10/21/LeetCode/901-%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="901-股票价格跨度"><a href="#901-股票价格跨度" class="headerlink" title="901. 股票价格跨度"></a><a href="https://leetcode.cn/problems/online-stock-span/">901. 股票价格跨度</a></h1><p>编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p>
<p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p>
<p>例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。</p>
<p>示例：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]]</span><br><span class="line">输出：[null,1,1,1,2,1,4,6]</span><br><span class="line">解释：</span><br><span class="line">首先，初始化 S = StockSpanner()，然后：</span><br><span class="line">S.next(100) 被调用并返回 1，</span><br><span class="line">S.next(80) 被调用并返回 1，</span><br><span class="line">S.next(60) 被调用并返回 1，</span><br><span class="line">S.next(70) 被调用并返回 2，</span><br><span class="line">S.next(60) 被调用并返回 1，</span><br><span class="line">S.next(75) 被调用并返回 4，</span><br><span class="line">S.next(85) 被调用并返回 6。</span><br><span class="line"></span><br><span class="line">注意 (例如) S.next(75) 返回 4，因为截至今天的最后 4 个价格</span><br><span class="line">(包括今天的价格 75) 小于或等于今天的价格。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>调用 StockSpanner.next(int price) 时，将有 1 &lt;= price &lt;= $10^5$。</li>
<li>每个测试用例最多可以调用  10000 次 StockSpanner.next。</li>
<li>在所有测试用例中，最多调用 150000 次 StockSpanner.next。</li>
<li>此问题的总时间限制减少了 50%。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StockSpanner</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StockSpanner</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;stk.<span class="built_in">emplace</span>(<span class="number">-1</span>, INT_MAX);</span><br><span class="line">        <span class="keyword">this</span>-&gt;idx = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> price)</span> </span>&#123;</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="keyword">while</span> (price &gt;= stk.<span class="built_in">top</span>().second) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = idx - stk.<span class="built_in">top</span>().first;</span><br><span class="line">        stk.<span class="built_in">emplace</span>(idx, price);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; stk; </span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>902. 最大为 N 的数字组合</title>
    <url>/2022/10/18/LeetCode/902-%E6%9C%80%E5%A4%A7%E4%B8%BA-N-%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="902-最大为-N-的数字组合"><a href="#902-最大为-N-的数字组合" class="headerlink" title="902. 最大为 N 的数字组合"></a><a href="https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/">902. 最大为 N 的数字组合</a></h1><p>给定一个按 非递减顺序 排列的数字数组 digits 。你可以用任意次数 digits[i] 来写的数字。例如，如果 digits = [‘1’,’3’,’5’]，我们可以写数字，如 ‘13’, ‘551’, 和 ‘1351315’。</p>
<p>返回 可以生成的小于或等于给定整数 n 的正整数的个数 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：digits = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], n = 100</span><br><span class="line">输出：20</span><br><span class="line">解释：</span><br><span class="line">可写出的 20 个数字是：</span><br><span class="line">1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：digits = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], n = 1000000000</span><br><span class="line">输出：29523</span><br><span class="line">解释：</span><br><span class="line">我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，</span><br><span class="line">81 个四位数字，243 个五位数字，729 个六位数字，</span><br><span class="line">2187 个七位数字，6561 个八位数字和 19683 个九位数字。</span><br><span class="line">总共，可以使用D中的数字写出 29523 个整数。</span><br></pre></td></tr></table></figure><br>示例 3:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：digits = [&quot;7&quot;], n = 8</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= digits.length &lt;= 9</li>
<li>digits[i].length == 1</li>
<li>digits[i] 是从 ‘1’ 到 ‘9’ 的数</li>
<li>digits 中的所有值都 不同</li>
<li>digits 按 非递减顺序 排列</li>
<li>1 &lt;= n &lt;= $10^9$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>数位DP<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">atMostNGivenDigitSet</span><span class="params">(vector&lt;string&gt;&amp; digits, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string s = <span class="built_in">to_string</span>(n);</span><br><span class="line">        <span class="type">int</span> m = digits.<span class="built_in">size</span>(), k = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(k + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (digits[j][<span class="number">0</span>] == s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (digits[j][<span class="number">0</span>] &lt; s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][<span class="number">0</span>] += dp[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] += m + dp[i - <span class="number">1</span>][<span class="number">0</span>] * m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[k][<span class="number">0</span>] + dp[k][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>复杂度分析：</p>
<ul>
<li>时间复杂度：$O(klogn)$</li>
<li>空间复杂度：$O(logn)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>904. 水果成篮</title>
    <url>/2022/10/17/LeetCode/904-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></h1><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。</p>
<p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p>
<p>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。<br>你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘全部 3 棵树。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：fruits = [0,1,2,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘 [1,2,2] 这三棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,3,2,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：可以采摘 [2,3,2,2] 这四棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：可以采摘 [1,2,1,1,2] 这五棵树。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>$1 &lt;= fruits.length &lt;= 10^5$</li>
<li>$0 &lt;= fruits[i] &lt; fruits.length$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>滑动窗口加哈希表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = fruits.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">            ++cnt[fruits[right]];</span><br><span class="line">            <span class="keyword">while</span> (cnt.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = cnt.<span class="built_in">find</span>(fruits[left]);</span><br><span class="line">                --it-&gt;second;</span><br><span class="line">                <span class="keyword">if</span> (it-&gt;second == <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt.<span class="built_in">erase</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>907. 子数组的最小值之和</title>
    <url>/2022/10/28/LeetCode/907-%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="907-子数组的最小值之和"><a href="#907-子数组的最小值之和" class="headerlink" title="907. 子数组的最小值之和"></a><a href="https://leetcode.cn/problems/sum-of-subarray-minimums/">907. 子数组的最小值之和</a></h1><p>给定一个整数数组 arr，找到 min(b) 的总和，其中 b 的范围为 arr 的每个（连续）子数组。</p>
<p>由于答案可能很大，因此 返回答案模 $10^9 + 7$ 。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：arr = [3,1,2,4]</span><br><span class="line">输出：17</span><br><span class="line">解释：</span><br><span class="line">子数组为 [3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 </span><br><span class="line">最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：arr = [11,81,94,43,3]</span><br><span class="line">输出：444</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= arr.length &lt;= $3 * 10^4$</li>
<li>1 &lt;= arr[i] &lt;= $3 * 10^4$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumSubarrayMins</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; monoStack;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[monoStack.<span class="built_in">top</span>()] &gt; arr[i]) &#123;</span><br><span class="line">                monoStack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> k = monoStack.<span class="built_in">empty</span>() ? (i + <span class="number">1</span>) : (i - monoStack.<span class="built_in">top</span>());</span><br><span class="line">            dp[i] = k * arr[i] + (monoStack.<span class="built_in">empty</span>() ? <span class="number">0</span> : dp[i - k]);</span><br><span class="line">            ans = (ans + dp[i]) % mod;</span><br><span class="line">            monoStack.<span class="built_in">emplace</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>915. 分割数组</title>
    <url>/2022/10/24/LeetCode/915-%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="915-分割数组"><a href="#915-分割数组" class="headerlink" title="915. 分割数组"></a><a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/">915. 分割数组</a></h1><p>给定一个数组 nums ，将其划分为两个连续子数组 left 和 right， 使得：</p>
<p>left 中的每个元素都小于或等于 right 中的每个元素。<br>left 和 right 都是非空的。<br>left 的长度要尽可能小。<br>在完成这样的分组后返回 left 的 长度 。</p>
<p>用例可以保证存在这样的划分方法。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,0,3,8,6]</span><br><span class="line">输出：3</span><br><span class="line">解释：left = [5,0,3]，right = [8,6]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,1,0,6,12]</span><br><span class="line">输出：4</span><br><span class="line">解释：left = [1,1,1,0]，right = [6,12]</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>2 &lt;= nums.length &lt;= $10^5$</li>
<li>0 &lt;= nums[i] &lt;= $10^6$</li>
<li>可以保证至少有一种方法能够按题目所描述的那样对 nums 进行划分。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partitionDisjoint</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ma</span><span class="params">(nums.size()+<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mi</span><span class="params">(nums.size()+<span class="number">2</span>,<span class="number">100000000</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            ma[i+<span class="number">1</span>]=<span class="built_in">max</span>(nums[i],ma[i]);</span><br><span class="line">            mi[nums.<span class="built_in">size</span>()-i]=<span class="built_in">min</span>(nums[nums.<span class="built_in">size</span>()-i<span class="number">-1</span>],mi[nums.<span class="built_in">size</span>()-i+<span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ma[i]&lt;=mi[i+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>878. 第 N 个神奇数字</title>
    <url>/2022/11/22/LeetCode/878-%E7%AC%AC-N-%E4%B8%AA%E7%A5%9E%E5%A5%87%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="878-第-N-个神奇数字"><a href="#878-第-N-个神奇数字" class="headerlink" title="878. 第 N 个神奇数字"></a><a href="https://leetcode.cn/problems/nth-magical-number/description/">878. 第 N 个神奇数字</a></h1><p>一个正整数如果能被 a 或 b 整除，那么它是神奇的。</p>
<p>给定三个整数 n , a , b ，返回第 n 个神奇的数字。因为答案可能很大，所以返回答案 对 $10^9 + 7$ 取模 后的值。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：n = 1, a = 2, b = 3</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：n = 4, a = 2, b = 3</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= n &lt;= $10^9$</li>
<li>2 &lt;= a, b &lt;= 4 * $10^4$</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthMagicalNumber</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> l = <span class="built_in">min</span>(a, b);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> r = (<span class="type">long</span> <span class="type">long</span>) n * <span class="built_in">min</span>(a, b);</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">lcm</span>(a, b);</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cnt = mid / a + mid / b - mid / c;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= n) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (r + <span class="number">1</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(log(n*max(a,b)))$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>921. 使括号有效的最少添加</title>
    <url>/2022/10/04/LeetCode/921.%20%E4%BD%BF%E6%8B%AC%E5%8F%B7%E6%9C%89%E6%95%88%E7%9A%84%E6%9C%80%E5%B0%91%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="921-使括号有效的最少添加"><a href="#921-使括号有效的最少添加" class="headerlink" title="921. 使括号有效的最少添加"></a><a href="https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/">921. 使括号有效的最少添加</a></h1><blockquote>
<p>只有满足下面几点之一，括号字符串才是有效的：</p>
<p>它是一个空字符串，或者<br>它可以被写成 AB （A 与 B 连接）, 其中 A 和 B 都是有效字符串，或者<br>它可以被写作 (A)，其中 A 是有效字符串。<br>给定一个括号字符串 s ，移动N次，你就可以在字符串的任何位置插入一个括号。</p>
<p>例如，如果 s = “()))” ，你可以插入一个开始括号为 “(()))” 或结束括号为 “())))” 。<br>返回 为使结果字符串 s 有效而必须添加的最少括号数。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;())&quot;</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;(((&quot;</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><p>1 &lt;= s.length &lt;= 1000</p>
</li>
<li><p>s 只包含 ‘(‘ 和 ‘)’ 字符。</p>
</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>根据题意，其实只要找出最后不匹配的括号数量即可。这里采用匹配出栈，不匹配压栈的方法，统计最后栈中括号数量即可得到所求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minAddToMakeValid(string s) &#123;</span><br><span class="line">        stack&lt;char&gt; sta;</span><br><span class="line">        for(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">            if(s[i]!=&#x27;(&#x27;&amp;&amp;s[i]!=&#x27;)&#x27;)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(sta.empty())&#123;</span><br><span class="line">                sta.push(s[i]);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(sta.top()==&#x27;(&#x27;&amp;&amp;s[i]==&#x27;)&#x27;)&#123;</span><br><span class="line">                    sta.pop();</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    sta.push(s[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sta.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>927. 三等分</title>
    <url>/2022/10/06/LeetCode/927-%E4%B8%89%E7%AD%89%E5%88%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="927-三等分"><a href="#927-三等分" class="headerlink" title="927. 三等分"></a><a href="https://leetcode.cn/problems/three-equal-parts/">927. 三等分</a></h1><blockquote>
<p>给定一个由 0 和 1 组成的数组 arr ，将数组分成  3 个非空的部分 ，使得所有这些部分表示相同的二进制值。</p>
<p>如果可以做到，请返回任何 [i, j]，其中 i+1 &lt; j，这样一来：</p>
<ul>
<li><p>arr[0], arr[1], …, arr[i] 为第一部分；</p>
</li>
<li><p>arr[i + 1], arr[i + 2], …, arr[j - 1] 为第二部分；</p>
</li>
<li>arr[j], arr[j + 1], …, arr[arr.length - 1] 为第三部分。</li>
<li>这三个部分所表示的二进制值相等。</li>
<li>如果无法做到，就返回 [-1, -1]。</li>
</ul>
<p>注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，[1,1,0] 表示十进制中的 6，而不会是 3。此外，前导零也是被允许的，所以 [0,1,1] 和 [1,1] 表示相同的值。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,0,1,0,1]</span><br><span class="line">输出：[0,3]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,1,0,1,1]</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,1,0,0,1]</span><br><span class="line">输出：[0,2]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><p>3 &lt;= arr.length &lt;= 3 * 104</p>
</li>
<li><p>arr[i] 是 0 或 1</p>
</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">threeEqualParts</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> partial = sum / <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> first = <span class="number">0</span>, second = <span class="number">0</span>, third = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123;</span><br><span class="line">                    first = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cur == partial) &#123;</span><br><span class="line">                    second = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="number">2</span> * partial) &#123;</span><br><span class="line">                    third = i;</span><br><span class="line">                &#125;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len = (<span class="type">int</span>)arr.<span class="built_in">size</span>() - third;</span><br><span class="line">        <span class="keyword">if</span> (first + len &lt;= second &amp;&amp; second + len &lt;= third) &#123;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (third + i &lt; arr.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[first + i] != arr[second + i] || arr[first + i] != arr[third + i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;first + len - <span class="number">1</span>, second + len&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>934. 最短的桥</title>
    <url>/2022/10/25/LeetCode/934-%E6%9C%80%E7%9F%AD%E7%9A%84%E6%A1%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="934-最短的桥"><a href="#934-最短的桥" class="headerlink" title="934. 最短的桥"></a><a href="https://leetcode.cn/problems/shortest-bridge/">934. 最短的桥</a></h1><p>给你一个大小为 n x n 的二元矩阵 grid ，其中 1 表示陆地，0 表示水域。</p>
<p>岛 是由四面相连的 1 形成的一个最大组，即不会与非组内的任何其他 1 相连。grid 中 恰好存在两座岛 。</p>
<p>你可以将任意数量的 0 变为 1 ，以使两座岛连接起来，变成 一座岛 。</p>
<p>返回必须翻转的 0 的最小数目。</p>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：grid = [[0,1],[1,0]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：grid = [[0,1,0],[0,0,0],[0,0,1]]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>n == grid.length == grid[i].length</li>
<li>2 &lt;= n &lt;= 100</li>
<li>grid[i][j] 为 0 或 1</li>
<li>grid 中恰有两个岛</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestBridge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; island;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; qu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    qu.<span class="built_in">emplace</span>(i, j);</span><br><span class="line">                    grid[i][j] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> [x, y] = qu.<span class="built_in">front</span>();</span><br><span class="line">                        qu.<span class="built_in">pop</span>();</span><br><span class="line">                        island.<span class="built_in">emplace_back</span>(x, y);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                            <span class="type">int</span> nx = x + dirs[k][<span class="number">0</span>];</span><br><span class="line">                            <span class="type">int</span> ny = y + dirs[k][<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] == <span class="number">1</span>) &#123;</span><br><span class="line">                                qu.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">                                grid[nx][ny] = <span class="number">-1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y] : island) &#123;</span><br><span class="line">                        qu.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="type">int</span> sz = qu.<span class="built_in">size</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                            <span class="keyword">auto</span> [x, y] = qu.<span class="built_in">front</span>();</span><br><span class="line">                            qu.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                                <span class="type">int</span> nx = x + dirs[k][<span class="number">0</span>];</span><br><span class="line">                                <span class="type">int</span> ny = y + dirs[k][<span class="number">1</span>];</span><br><span class="line">                                <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; n) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (grid[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                                        qu.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">                                        grid[nx][ny] = <span class="number">-1</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grid[nx][ny] == <span class="number">1</span>) &#123;</span><br><span class="line">                                        <span class="keyword">return</span> step;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        step++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：$O(n^2)$</li>
<li>空间复杂度：$O(n^2)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>870. 优势洗牌</title>
    <url>/2022/10/08/LeetCode/870-%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="870-优势洗牌"><a href="#870-优势洗牌" class="headerlink" title="870. 优势洗牌"></a><a href="https://leetcode.cn/problems/advantage-shuffle/">870. 优势洗牌</a></h1><p>给定两个大小相等的数组 nums1 和 nums2，nums1 相对于 nums2 的优势可以用满足 nums1[i] &gt; nums2[i] 的索引 i 的数目来描述。</p>
<p>返回 nums1 的任意排列，使其相对于 nums2 的优势最大化。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [2,7,11,15], nums2 = [1,10,4,11]</span><br><span class="line">输出：[2,11,7,15]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [12,24,8,32], nums2 = [13,25,32,11]</span><br><span class="line">输出：[24,32,8,12]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><p>1 &lt;= nums1.length &lt;= 105</p>
</li>
<li><p>nums2.length == nums1.length</p>
</li>
<li>0 &lt;= nums1[i], nums2[i] &lt;= 109</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">advantageCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums1, vector&lt;<span class="type">int</span>&gt; &amp;nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>(), ids[n];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">iota</span>(ids, ids + n, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(ids, ids + n, [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) &#123; <span class="keyword">return</span> nums2[i] &lt; nums2[j]; &#125;);</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums1)</span><br><span class="line">            ans[x &gt; nums2[ids[left]] ? ids[left++] : ids[right--]] = x;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：<script type="math/tex">O(nlogn)</script></li>
<li>空间复杂度：<script type="math/tex">O(n)</script></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>940. 不同的子序列 II</title>
    <url>/2022/10/14/LeetCode/940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97-II/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="940-不同的子序列-II"><a href="#940-不同的子序列-II" class="headerlink" title="940. 不同的子序列 II"></a><a href="https://leetcode.cn/problems/distinct-subsequences-ii/">940. 不同的子序列 II</a></h1><p>给定一个字符串 s，计算 s 的 不同非空子序列 的个数。因为结果可能很大，所以返回答案需要对 $10^9 + 7$ 取余 。</p>
<p>字符串的 子序列 是经由原字符串删除一些（也可能不删除）字符但不改变剩余字符相对位置的一个新字符串。</p>
<ul>
<li>例如，”ace” 是 “abcde” 的一个子序列，但 “aec” 不是。</li>
</ul>
<p>示例 1：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abc&quot;</span><br><span class="line">输出：7</span><br><span class="line">解释：7 个不同的子序列分别是 &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, 以及 &quot;abc&quot;。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;aba&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：6 个不同的子序列分别是 &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; 以及 &quot;aba&quot;。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;aaa&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：3 个不同的子序列分别是 &quot;a&quot;, &quot;aa&quot; 以及 &quot;aaa&quot;。</span><br></pre></td></tr></table></figure></p>
<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 2000</li>
<li>s 仅由小写英文字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这题用到了动态规划，我们可以用一个长度为26的数组存储每一个字母位于末位时含有的不重复子序列个数，最初我们将其初始化为0，对于第i位的字母，以它为最后一位的子序列数就是其前缀的不重复子序列数量+1个，而这其中重复的子序列个数，就是我们存储的这个字母前一次为子序列最后一位时不重复子序列的个数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distinctSubseqII</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">g</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> m=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> n=g[m];</span><br><span class="line">            g[m]=ans+<span class="number">1</span>;</span><br><span class="line">            ans=((ans+g[m]-n)%(<span class="type">int</span>)(<span class="number">1e9</span>+<span class="number">7</span>)+(<span class="type">int</span>)(<span class="number">1e9</span>+<span class="number">7</span>))%(<span class="type">int</span>)(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：$O(n+|\sum|)$</li>
<li>空间复杂度：$O(|\sum|)$</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>946. 验证栈序列</title>
    <url>/2022/08/31/LeetCode/946-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/validate-stack-sequences/">https://leetcode.cn/problems/validate-stack-sequences/</a> 给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class="line">输出：true</span><br><span class="line">解释：我们可以按以下顺序执行：</span><br><span class="line">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class="line">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]</span><br><span class="line">输出：false</span><br><span class="line">解释：1 不能在 2 之前弹出。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= pushed.length &lt;= 1000</li>
<li>0 &lt;= pushed[i] &lt;= 1000</li>
<li>pushed 的所有元素 互不相同</li>
<li>popped.length == pushed.length</li>
<li>popped 是 pushed 的一个排列</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>栈模拟</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool validateStackSequences(vector&lt;int&gt;&amp; pushed, vector&lt;int&gt;&amp; popped) &#123;</span><br><span class="line">        int flag=0;</span><br><span class="line">        stack s;</span><br><span class="line">        for(int i=0;i&lt;pushed.size();i++)&#123;</span><br><span class="line">            s.push(pushed[i]);</span><br><span class="line">            while(s.top()==popped[flag])&#123;</span><br><span class="line">                s.pop();</span><br><span class="line">                flag++;</span><br><span class="line">                if(flag==popped.size())&#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">                if(s.empty())&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(n)\)</li>
<li>空间复杂度：\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>998. 最大二叉树 II</title>
    <url>/2022/08/30/LeetCode/998-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-ii/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/maximum-binary-tree-ii/">https://leetcode.cn/problems/maximum-binary-tree-ii/</a> 最大树 定义：一棵树，并满足：其中每个节点的值都大于其子树中的任何其他值。 给你最大树的根节点 root 和一个整数 val 。 就像 之前的问题 那样，给定的树是利用 Construct(a) 例程从列表 a（root = Construct(a)）递归地构建的： 如果 a 为空，返回 null 。 否则，令 a[i] 作为 a 的最大元素。创建一个值为 a[i] 的根节点 root 。 root 的左子树将被构建为 Construct([a[0], a[1], …, a[i - 1]]) 。 root 的右子树将被构建为 Construct([a[i + 1], a[i + 2], …, a[a.length - 1]]) 。 返回 root 。 请注意，题目没有直接给出 a ，只是给出一个根节点 root = Construct(a) 。 假设 b 是 a 的副本，并在末尾附加值 val。题目数据保证 b 中的值互不相同。 返回 Construct(b) 。 示例 1： <img src="https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-1-1.png" alt=""><img src="https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-1-2.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,1,3,null,null,2], val = 5</span><br><span class="line">输出：[5,4,null,1,3,null,null,2]</span><br><span class="line">解释：a = [1,4,2,3], b = [1,4,2,3,5]</span><br></pre></td></tr></table></figure>
<p>示例 2： <img src="https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-2-1.png" alt=""><img src="https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-2-2.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,2,4,null,1], val = 3</span><br><span class="line">输出：[5,2,4,null,1,null,3]</span><br><span class="line">解释：a = [2,1,5,4], b = [2,1,5,4,3]</span><br></pre></td></tr></table></figure>
<p>示例 3： <img src="https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-3-1.png" alt=""><img src="https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-3-2.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,2,3,null,1], val = 4</span><br><span class="line">输出：[5,2,4,null,1,3]</span><br><span class="line">解释：a = [2,1,5,3], b = [2,1,5,3,4]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>\(树中节点数目在范围 [1, 100] 内\)</li>
<li>\(1 &lt;= Node.val &lt;= 100\)</li>
<li>\(树中的所有值 互不相同\)</li>
<li>\(1 &lt;= val &lt;= 100\)</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>因为val是附加在末尾的，所以根据题意，如果val大于a中所有值，那只需要将整个a作为以val为根节点的左子树即可得到b；否则就在a的右子树中找到小于val的节点值，将值为val的节点插在此处并将该节点及其子树作为val节点的左子树即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* insertIntoMaxTree(TreeNode* root, int val) &#123;</span><br><span class="line">        TreeNode* parent = nullptr;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        while (cur) &#123;</span><br><span class="line">            if (val &gt; cur-&gt;val) &#123;</span><br><span class="line">                if (!parent) &#123;</span><br><span class="line">                    return new TreeNode(val, root, nullptr);</span><br><span class="line">                &#125;</span><br><span class="line">                TreeNode* node = new TreeNode(val, cur, nullptr);</span><br><span class="line">                parent-&gt;right = node;</span><br><span class="line">                return root;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        parent-&gt;right = new TreeNode(val);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度：\(O(n)\)</li>
<li>空间复杂度：\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>第308场周赛</title>
    <url>/2022/08/28/LeetCode/%E7%AC%AC308%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>第四题拓扑排序</p>
]]></content>
      <categories>
        <category>leetcode周赛</category>
      </categories>
      <tags>
        <tag>leetcode周赛</tag>
      </tags>
  </entry>
  <entry>
    <title>第309场周赛</title>
    <url>/2022/09/04/LeetCode/%E7%AC%AC309%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>leetcode周赛</category>
      </categories>
      <tags>
        <tag>leetcode周赛</tag>
      </tags>
  </entry>
  <entry>
    <title>第86场双周赛</title>
    <url>/2022/09/04/LeetCode/%E7%AC%AC86%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>leetcode周赛</category>
      </categories>
      <tags>
        <tag>leetcode周赛</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 01.02. 判定是否互为字符重排</title>
    <url>/2022/09/27/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-02-%E5%88%A4%E5%AE%9A%E6%98%AF%E5%90%A6%E4%BA%92%E4%B8%BA%E5%AD%97%E7%AC%A6%E9%87%8D%E6%8E%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/check-permutation-lcci/">https://leetcode.cn/problems/check-permutation-lcci/</a> 给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s1 = &quot;abc&quot;, s2 = &quot;bca&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s1 = &quot;abc&quot;, s2 = &quot;bad&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>0 &lt;= len(s1) &lt;= 100</li>
<li>0 &lt;= len(s2) &lt;= 100</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>排序，哈希都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool CheckPermutation(string s1, string s2) &#123;</span><br><span class="line">        sort(s1.begin(),s1.end());</span><br><span class="line">        sort(s2.begin(),s2.end());</span><br><span class="line">        if(s1==s2)</span><br><span class="line">            return true;</span><br><span class="line">        else</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(nlogn)\)</li>
<li>空间复杂度\(O(logn)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 01.08. 零矩阵</title>
    <url>/2022/09/30/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-08-%E9%9B%B6%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/zero-matrix-lcci/">https://leetcode.cn/problems/zero-matrix-lcci/</a> 编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。 示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[</span><br><span class="line">[1,1,1],</span><br><span class="line">[1,0,1],</span><br><span class="line">[1,1,1]</span><br><span class="line">]</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">[1,0,1],</span><br><span class="line">[0,0,0],</span><br><span class="line">[1,0,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[</span><br><span class="line">[0,1,2,0],</span><br><span class="line">[3,4,5,2],</span><br><span class="line">[1,3,1,5]</span><br><span class="line">]</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">[0,0,0,0],</span><br><span class="line">[0,4,5,0],</span><br><span class="line">[0,3,1,0]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void setZeroes(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        vector&lt;int&gt; h(matrix[0].size(),0);</span><br><span class="line">        vector&lt;int&gt; s(matrix.size(),0);</span><br><span class="line">        for(int i=0;i&lt;matrix.size();i++)&#123;</span><br><span class="line">            for(int j=0;j&lt;matrix[0].size();j++)&#123;</span><br><span class="line">                if(matrix[i][j]==0)&#123;</span><br><span class="line">                    h[j]=1;</span><br><span class="line">                    s[i]=1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;matrix.size();i++)&#123;</span><br><span class="line">            if(s[i]==1)&#123;</span><br><span class="line">                for(int j=0;j&lt;matrix[0].size();j++)&#123;</span><br><span class="line">                    matrix[i][j]=0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;matrix[0].size();i++)&#123;</span><br><span class="line">            if(h[i]==1)&#123;</span><br><span class="line">                for(int j=0;j&lt;matrix.size();j++)&#123;</span><br><span class="line">                    matrix[j][i]=0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(mn)\)</li>
<li>空间复杂度\(O(m+n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 01.09. 字符串轮转</title>
    <url>/2022/09/29/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-09-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AE%E8%BD%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/string-rotation-lcci/">https://leetcode.cn/problems/string-rotation-lcci/</a> 字符串轮转。给定两个字符串s1和s2，请编写代码检查s2是否为s1旋转而成（比如，waterbottle是erbottlewat旋转后的字符串）。 示例1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;waterbottle&quot;, s2 = &quot;erbottlewat&quot;</span><br><span class="line">输出：True</span><br></pre></td></tr></table></figure>
<p>示例2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s1 = &quot;aa&quot;, s2 = &quot;aba&quot;</span><br><span class="line">输出：False</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>字符串长度在[0, 100000]范围内。</li>
</ul>
<p>说明:</p>
<ul>
<li>你能只调用一次检查子串的方法吗？</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isFlipedString(string s1, string s2) &#123;</span><br><span class="line">        return s1.size() == s2.size() &amp;&amp; (s1 + s1).find(s2) != string::npos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(n)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Easy</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 17.09. 第 k 个数</title>
    <url>/2022/09/28/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-09-%E7%AC%AC-k-%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/get-kth-magic-number-lcci/">https://leetcode.cn/problems/get-kth-magic-number-lcci/</a> 有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，5，7，9，15，21。 示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 5</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int getKthMagicNumber(int k) &#123;</span><br><span class="line">        vector&lt;int&gt; factors = &#123;3, 5, 7&#125;;</span><br><span class="line">        unordered_set&lt;long&gt; seen;</span><br><span class="line">        priority_queue&lt;long, vector&lt;long&gt;, greater&lt;long&gt;&gt; heap;</span><br><span class="line">        seen.insert(1L);</span><br><span class="line">        heap.push(1L);</span><br><span class="line">        int ugly = 0;</span><br><span class="line">        for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">            long curr = heap.top();</span><br><span class="line">            heap.pop();</span><br><span class="line">            ugly = (int)curr;</span><br><span class="line">            for (int factor : factors) &#123;</span><br><span class="line">                long next = curr * factor;</span><br><span class="line">                if (!seen.count(next)) &#123;</span><br><span class="line">                    seen.insert(next);</span><br><span class="line">                    heap.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ugly;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(klogk)\)</li>
<li>空间复杂度\(O(logk)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Medium</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 17.19. 消失的两个数字</title>
    <url>/2022/09/26/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-19-%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="https://leetcode.cn/problems/missing-two-lcci/">https://leetcode.cn/problems/missing-two-lcci/</a> 给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？ 以任意顺序返回这两个数字均可。 示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [1]</span><br><span class="line">输出: [2,3]</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [2,3]</span><br><span class="line">输出: [1,4]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>nums.length &lt;= 30000</li>
</ul>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector missingTwo(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        long n = nums.size() + 2;</span><br><span class="line">        int a = -accumulate(nums.cbegin(), nums.cend(), -(1 + n) * n / 2);</span><br><span class="line">        int b = -inner_product(nums.cbegin(), nums.cend(), nums.cbegin(), -(1 + n) * n / 2 * (2 * n + 1) / 3);</span><br><span class="line">        int tmp = sqrt(2 * b - a * a);</span><br><span class="line">        return &#123; (a + tmp) / 2, (a - tmp) / 2 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>复杂度分析：</p>
<ul>
<li>时间复杂度\(O(n)\)</li>
<li>空间复杂度\(O(1)\)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>免费随机图片api接口网站</title>
    <url>/2022/08/23/%E5%85%B6%E4%BB%96/%E5%85%8D%E8%B4%B9%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87api%E6%8E%A5%E5%8F%A3%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://blog.csdn.net/SectSnow/article/details/115835711">https://blog.csdn.net/SectSnow/article/details/115835711</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(一)</title>
    <url>/2022/10/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>本系列呢，目前是我个人学习C++ Primer这本书的学习纪录，整本书19章，顺利的话这个系列大概会持续1个月左右，尽量每天一章那个样子吧，可能记的没什么逻辑格式等等等等，毕竟，只是个笔记，太注重格式感觉本末倒置了，尽量持续更新吧，希望不鸽。</p>
</blockquote>
<h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1. 函数"></a>1. 函数</h1><p>函数的定义包含四部分：返回类型（return type）、函数名（function name）、一个括号包围的形参列表（parameter list，允许为空）以及函数体（function body）。<br>main函数是比较特殊的，操作系统需要通过调用main来运行C++程序，但它在定义上与其他函数是一样的。<br>main函数的返回类型必须为int，即整数类型。int类型是一种内置类型（built-in type），即语言自身定义的类型。<br>函数定义的最后一部分是函数体，它是一个以左花括号（curly brace）开始，以右花括号结束的语句块（block of statements）</p>
<h1 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h1><p>类型是程序设计最基本的概念之一，在本书中我们会反复遇到它。一种类型不仅定义了数据元素的内容，还定义了这类数据上可以进行的运算。<br>程序所处理的数据都保存在变量中，而每个变量都有自己的类型。如果一个名为v的变量的类型为T，我们通常说“v具有类型T”，或等价的，“v是一个T类型变量”。</p>
<h1 id="3-标准输入输出"><a href="#3-标准输入输出" class="headerlink" title="3. 标准输入输出"></a>3. 标准输入输出</h1><p>首先呢，C++并未定义任何输入输出语句，而是包含标准库（standard library）提供IO机制，例如iostream库。<br>iostream库包含两个基础类型istream和ostream，分别表示输入流和输出流。一个流就是一个字符序列，是从IO设备读出或写入IO设备的。术语“流”（stream）想要表达的是，随着时间推移，字符是顺序生成或消耗的。<br>标准输入输出对象</p>
<ul>
<li>cin istream类型 标准输入</li>
<li>cout ostream类型 标准输出</li>
<li>cerr ostream类型 输出警告和错误信息</li>
<li>clog ostream类型 输出程序运行时的一般性信息</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// 告诉编译器要使用iostream库，尖括号中的名字（iostream）是一个头文件</span></span></span><br><span class="line">...</span><br><span class="line">std::cin &gt;&gt; v1 &gt;&gt; v2; <span class="comment">// 输入运算符（&gt;&gt;）</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; std::endl; <span class="comment">// 输出运算符（&lt;&lt;） 字符串字面值常量/string literal（&quot;Hello World&quot;） 操纵符/manipulator（endl） </span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>写入endl的效果是结束当前行，并将与设备关联的缓冲区（buffer）中的内容刷到设备中。缓冲刷新操作可以保证到目前为止程序所产生的所有输出都真正写入输出流中，而不是仅停留在内存中等待写入流。<br>而上面代码块中使用<code>std::cin</code>和<code>std::cout</code>而不是<code>cin</code>和<code>cout</code>，前缀<code>std::</code>指出<code>cin</code>和<code>cout</code>是定义在名为<code>std</code>的命名空间（namespace）中的。命名空间可以帮助我们避免不经意的名字定义冲突。标准库定义的所有名字都在命名空间<code>std</code>中。<br>通过命名空间使用标准库导致我们想使用来自命名空间std中的名字必须使用<code>作用域运算符::</code>指出我们想使用定义在命名空间std中的名字。当然，之后会给出更简单的方法。</p>
<h1 id="4-注释"><a href="#4-注释" class="headerlink" title="4. 注释"></a>4. 注释</h1><p>C++中注释的种类<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 半/单行注释 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br>请注意，不要嵌套多层多行注释，那会导致你的程序产生错误，请不要为难你的编译器。</p>
<h1 id="5-控制流"><a href="#5-控制流" class="headerlink" title="5. 控制流"></a>5. 控制流</h1><ul>
<li>while</li>
</ul>
<p>反复执行一段代码，直到给定条件为假为止。<br>例如<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, val = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当val小于等于10时，运行大括号内部的代码</span></span><br><span class="line">    <span class="keyword">while</span> (val &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        sum += val; <span class="comment">//将 sum + val 赋给 sum</span></span><br><span class="line">        ++val;      <span class="comment">// 将 val 加 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    std:cout &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先可以先想一想上面的代码块解决了什么问题。<br>其中，条件/codition 对应的是 val &lt;= 10<br>在代码块中我们用到了<code>复合赋值运算符（+=）</code>，即<br>sum += val =&gt; sum = sum + val<br>还用到了<code>前缀递增运算符（++）</code>，即<br>++val =&gt; val = val + 1 </p>
<ul>
<li>for</li>
</ul>
<p>每个for语句都包含两部分：循环头和循环体。<br>循环头控制循环体的执行次数，它有三部分组成：一个初始化语句（init-statement）、一个循环条件（condition）以及一个表达式（expression）。</p>
<ul>
<li>读取数量不定的输入数据</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(std::cin &gt;&gt; value)</span><br></pre></td></tr></table></figure>
<p>循环条件实际上检测的是<code>std::cin</code>，当我们使用一个<code>istream</code>对象作为条件时，其效果是检测流状态。如果流是有效的，即流未遇到错误，那么监测成功。当遇到文件结束符（end-of-file），或遇到一个无效输入时（例如读入的值不是一个整数），istream对象的状态会变为无效。处于无效状态的istream对象会使条件变为假。<br><div class="note success simple"><ul>
<li><p>键盘输入文件结束符</p>
<ul>
<li>Windows<br>  先<kbd>Ctrl</kbd> + <kbd>Z</kbd><br>  再<kbd>Enter</kbd> / <kbd>Return</kbd></li>
<li>Mac OS X<br>  <kbd>Ctrl</kbd> + <kbd>D</kbd></li>
</ul>
</li>
<li><p>再探编译<br>  编译器无法保证一个程序是否按照其作者的意图工作，但它可以检查形式（form）上的错误。</p>
<ul>
<li>语法错误（syntax error）</li>
<li>类型错误（type error）</li>
<li><p>声明错误（declaration error)</p>
<p>错误信息通常包含一个行号和一条简短描述，描述了编译器认为的我们所犯的错误。按照报告的顺序来逐个修正错误，是一种好习惯。因为一个单个错误常常会具有传递效应，导致编译器在其后报告比实际数量多得多的错误信息。另一个好习惯是在每修正一个错误后就立即重新编译代码，或者最多是修正了一小部分明显的错误后就重新编译。这就是所谓的“编辑-编译-调试”（edit-compile-debug）周期。</p>
</li>
</ul>
</li>
</ul>
</div></p>
<ul>
<li>if</li>
</ul>
<p>当然，if也能像上面while一样将istream对象作为条件，不同的是，if会执行真的但不会循环。<br>在if条件中我们常会用到相等运算符（==）用于检测两个元素的值是否相同。要注意这里不要错用<code>=</code>，在C++中<code>=</code>是赋值符号，而能单独用来进行判断元素间关系。</p>
<h1 id="6-C-程序的缩进和格式"><a href="#6-C-程序的缩进和格式" class="headerlink" title="6. C++程序的缩进和格式"></a>6. C++程序的缩进和格式</h1><p>对于这个问题最正确的观点就是，不存在唯一的正确风格，但是保持一致性是非常重要的。不只是自己编写代码格式的统一，也是一个团队间代码风格的统一，缩进会使得复杂的程序有更好的可读性和易理解性，而一旦选择了一种风格，就要坚持使用。</p>
<h1 id="7-类"><a href="#7-类" class="headerlink" title="7. 类"></a>7. 类</h1><p>类机制是C++最重要的特性之一。<br>一个类定义了一个类型以及与其关联的一组操作。<br>C++最初的一个设计焦点就是能定义使用上像内置类型一样自然的类类型。<br>类定义了行为，作者定义了类对象可以执行的所有动作。一般而言，类的作者决定了类类型对象上可以使用的所有操作。<br>对于类，我们需要为其定义一个头文件，我们可以通过这个头文件访问自定义的类。而我们引用自定义的类的头文件时，应该用双引号（””）包围。<br>成员函数（member function）是定义为类的一部分的函数，也称之为方法（method）。<br>我们通常以一个类对象的名义来调用成员函数，以点运算符（.)来表达我们需要某对象的某成员。点运算符只能用于类类型的对象，其左侧运算对象必须是一个类类型的对象，右侧运算对象必须是该类型的一个成员名，运算结果为右侧运算对象指定的成员。<br>当用点运算符访问一个成员函数时，我们使用一个调用运算符（()）来调用一个函数。调用运算符是一对圆括号，里面放置实参（argument）列表（可能为空）。</p>
<h1 id="8-文件重定向"><a href="#8-文件重定向" class="headerlink" title="8. 文件重定向"></a>8. 文件重定向</h1><p>未避免重复无意义的键盘输入测试，我们可以将标准输入和标准输出与命名文件关联起来，大多数操作系统支持这种文件重定向。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">addItems &lt;infile &gt;outfile</span></span><br></pre></td></tr></table></figure><br>其中，<code>$</code>是操作系统提示符，<code>addItems.exe</code>是我们以编译好的可执行文件，而上述命令会将我们在<code>infile</code>文件中预先编辑好的数据读入，并将输出结果写入到<code>outfile</code>文件中。</p>
<h1 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h1><p>下面会罗列一些本章节我们遇到的术语，你可以回顾一下，如果不理解你可以结合上文以及百度，或者留言我会尽力帮你理解它。如果文章中有任何错误，欢迎留言指正。</p>
<ul>
<li>参数（实参，argument）</li>
<li>赋值（assignment）</li>
<li>程序块（block）</li>
<li>缓冲区（buffer）</li>
<li>内置类型（built-in type）</li>
<li>Cerr</li>
<li>字符串字面值常量（character string literal）</li>
<li>cin</li>
<li>类（class）</li>
<li>类类型（class type）</li>
<li>clog</li>
<li>注释（comment）</li>
<li>条件（condition）</li>
<li>cout</li>
<li>花括号（curly brace）</li>
<li>数据结构（data structure）</li>
<li>编辑-编译-调试（edit-compile-debug）</li>
<li>文件结束符（end-of-file）</li>
<li>表达式（expression）</li>
<li>for语句（for statement）</li>
<li>函数（function）</li>
<li>函数体（function body）</li>
<li>函数名（function name）</li>
<li>头文件（header）</li>
<li>if 语句（if statement）</li>
<li>初始化（initialize）</li>
<li>iostream</li>
<li>istream</li>
<li>库类型（library type）</li>
<li>main</li>
<li>操纵符（manipulator）</li>
<li>成员函数（member function）</li>
<li>方法（method）</li>
<li>命名空间（namespace）</li>
<li>ostream</li>
<li>形参列表（parameter list）</li>
<li>返回类型（return type）</li>
<li>源文件（source file）</li>
<li>标准错误（standard error）</li>
<li>标准输入（standard input）</li>
<li>标准库（standard library）</li>
<li>标准输出（standard output）</li>
<li>语句（statement）</li>
<li>std</li>
<li>字符串常量（string literal）</li>
<li>未初始化的变量（uninitialized variable）</li>
<li>变量（variable）</li>
<li>while 语句（while statement）</li>
<li>()运算符（()operator）</li>
<li>++运算符（++operator）</li>
<li>+=运算符（+=operator）</li>
<li>.运算符（.operator）</li>
<li>::运算符（::operator）</li>
<li>=运算符（=operator）</li>
<li>--运算符（--operator）</li>
<li>&lt;&lt;运算符（&lt;&lt; operator）</li>
<li>>>运算符（&gt;&gt;operator）</li>
<li># include</li>
<li>==运算符（==operator）</li>
<li>!=运算符（!=operator）</li>
<li>&lt;=运算符（&lt;=operator）</li>
<li>&lt; 运算符（&lt; operator）</li>
<li>>=运算符（&gt;=operator）</li>
<li>>运算符（&gt;operator）</li>
</ul>
<p>上面就是第一章全部内容了，后续可能读第二遍会添加新内容。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++ Primer</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2022/10/12/%E5%85%AB%E8%82%A1/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文整理自网络，后续将不断充实，也许等我变牛了能写出更好的吧，推荐这篇<a href="https://www.cnblogs.com/loveis715/archive/2012/07/18/2598409.html">文章</a>，感觉很牛。</p>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><div class="note success simple"><p>设计模式之一<br>这种设计模式属于创建型模式，它提供了一种创建对象的最佳方式<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方法，可以直接访问，不需要实例化该类的对象。</p>
</div>
<div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ol>
</div>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="1-懒汉模式，线程不安全"><a href="#1-懒汉模式，线程不安全" class="headerlink" title="1.懒汉模式，线程不安全"></a>1.懒汉模式，线程不安全</h3><p>懒汉模式(Lazy-Initialization)直到使用时才会实例化对象，即调用Instance()方法时才会new一个单例的对象，如果不被调用就不会占用内存。这种模式单线程没有问题，但多线程时就会出现不可靠的情况。(以时间换空间)<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton *<span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == _pInstance) &#123;</span><br><span class="line">            _pInstance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _pInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pInstance) &#123;</span><br><span class="line">            <span class="keyword">delete</span> _pInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;构造函数：Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;析构函数：~Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton &amp;signal);</span><br><span class="line">    <span class="type">const</span> Singleton &amp;<span class="keyword">operator</span> = (<span class="type">const</span> Singleton &amp; signal);</span><br><span class="line">    <span class="type">static</span> Singleton *_pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton * Singleton::_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Singleton *p1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton *p2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">    Singleton:<span class="built_in">destory</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-懒汉模式，加锁"><a href="#2-懒汉模式，加锁" class="headerlink" title="2.懒汉模式，加锁"></a>2.懒汉模式，加锁</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::shared_ptr&lt;Singleton&gt; Ptr;</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;析构函数：~Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> Ptr <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(_mutex)</span></span>;</span><br><span class="line">            _instance = std::<span class="built_in">shared_ptr</span>&lt;Singleton&gt;(<span class="keyword">new</span> Singleton);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>();</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton &amp;sigle);</span><br><span class="line">    <span class="type">const</span> Singleton &amp;<span class="keyword">operator</span> = (<span class="type">const</span> Singleton &amp;sigle);</span><br><span class="line">    <span class="type">static</span> Ptr _instance;</span><br><span class="line">    <span class="type">static</span> std::mutex _mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton::Ptr Singleton::_instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::mutex Singleton::_mutex;</span><br><span class="line">Singleton::Singleton::<span class="built_in">Singleton</span>() &#123;</span><br><span class="line">    coout &lt;&lt; <span class="string">&quot;构造函数：Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Singleton::Ptr p1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton::Ptr p2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-懒汉模式，magic-static"><a href="#3-懒汉模式，magic-static" class="headerlink" title="3.懒汉模式，magic static"></a>3.懒汉模式，magic static</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton&amp; <span class="title">get_instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> Singleton instance;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        std:cout &lt;&lt; <span class="string">&quot;构造函数：Singleton()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        std:cout &lt;&lt; <span class="string">&quot;析构函数：~Singleton()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    Singleton&amp; p1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton&amp; p2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-饿汉模式"><a href="#4-饿汉模式" class="headerlink" title="4.饿汉模式"></a>4.饿汉模式</h3><p>加载时就实例化对象（以空间换时间）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singelton</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singelton</span>()&#123;</span><br><span class="line">        m_count ++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Singelton begin\n&quot;</span>);</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">1000</span>);                            <span class="comment">// 加sleep为了放大效果</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Singelton end\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> Singelton *single;<span class="comment">//定义一个唯一指向实例的指针，并且是私有的</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singelton *<span class="title">GetSingelton</span><span class="params">()</span></span>;<span class="comment">//定义一个公有函数，可以获取这个唯一实例</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 饿汉模式的关键：定义即实例化</span></span><br><span class="line">Singelton *Singelton::single = <span class="keyword">new</span> Singelton;</span><br><span class="line"><span class="type">int</span> Singelton::m_count = <span class="number">0</span>;</span><br><span class="line"><span class="function">Singelton *<span class="title">Singelton::GetSingelton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 不再需要进行实例化</span></span><br><span class="line">    <span class="comment">//if(single == nullptr)&#123;</span></span><br><span class="line">    <span class="comment">//    single = new Singelton;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">return</span> single;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Singelton::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;m_count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;we get the instance&quot;</span> &lt;&lt; endl;</span><br><span class="line">	singleton* a1 = singleton::<span class="built_in">getinstance</span>();</span><br><span class="line">	singleton* a2 = singleton::<span class="built_in">getinstance</span>();</span><br><span class="line">	singleton* a3 = singleton::<span class="built_in">getinstance</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;we destroy the instance&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>八股文</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(三)</title>
    <url>/2022/10/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>接下来是本书第二章的剩余内容</p>
</blockquote>
<h1 id="1-const限定符"><a href="#1-const限定符" class="headerlink" title="1. const限定符"></a>1. const限定符</h1><p>如果我们想定义一种值不要被随便改变的变量，就可以用const对变量类型加以限定，并且一旦创建后它的值就不能在改变，所以，我们必须初始化这个const对象。<br>默认状态下，const对象仅在文件中有效。我们默认在多个文件中出现了同名的const变量时，其实等同于在不同的文件中分别定义了独立的变量。<br>如果我们想让const对象只在一个文件中定义它同时在其他文件中声明并使用它，只要在声明及定义时都添加extern关键字就可以了。</p>
<h1 id="2-const的引用"><a href="#2-const的引用" class="headerlink" title="2. const的引用"></a>2. const的引用</h1><p>还记得上一篇文章提到的引用吗，（忘了回去看看），我们可以把引用绑定到const对象上，就和其他的对象一样，我们称之为对常量的引用（reference to const）。与普通引用的区别是，对常量的引用不能被用作修改它所绑定的对象。</p>
<blockquote>
<p>常量引用是我们对于const引用的简称，虽然这简称挺形象，但务必记住这只是简称，毕竟常量引用严格而言是不存在的，因为引用不是一个对象，我们没法让引用本身恒定不变。事实上，由于C++语言并不允许随意改变引用所绑定的对象，从这一定义上理解所有的引用又都算是常量。引用的对象是常量还是非常量可以决定其所能参与的操作，却无论如何都不会影响到引用和对象的绑定关系本身。</p>
</blockquote>
<p>前面说过，引用的类型必须与其所引用对象的类型一致，但有两个例外。第一种例外情况就是在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。<br>我们讨论为何会发生这种例外。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;ri = dval;</span><br></pre></td></tr></table></figure><br>如上的代码，编译器为了确保让ri绑定一个整数，把它变成了下面这样。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> temp = dval;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;ri = temp;</span><br></pre></td></tr></table></figure><br>这种情况下，ri绑定了一个临时量（temporary）对象。所谓临时量对象就是编译器需要一个空间来暂存表达式的求值结果时临时创建的一个未命名的对象，我们也将其称为临时量。<br>当然，如果ri不是常量，没有const限制，那么我们就允许通过ri对其所引用的对象进行赋值修改，但是我们实际绑定的只是一个临时量，没有人想要修改那个临时量，你无法通过ri修改原本的dval的值，因而这样做毫无意义，C++语言也自然把这种行为归为非法。<br>请记住，对const的引用可能引用一个并非const的对象，我们无法通过const引用改变所绑定的变量值，但是其他途径仍是能修改它的。</p>
<h1 id="3-指针和const"><a href="#3-指针和const" class="headerlink" title="3. 指针和const"></a>3. 指针和const</h1><p>与引用一样，也可以令指针指向常量或非常量，指向常量的指针（pointer to const）不能用于改变其所指对象的值。要想存放常量对象的地址，只能使用指向常量的指针。<br>同样，之前说过，指针的类型必须与其所指对象的类型一致，但是有两个例外。第一种例外情况就是允许令一个指向常量的指针指向一个非常量对象。<br>并且指向常量的指针也没有规定其所指的对象必须是一个常量。所谓指向常量的指针仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过其他途径改变。</p>
<blockquote>
<p>也可以这么理解，常量引用和常量指针它们自认为指向了常量，所以不去改变所引用或所指对象的值。</p>
</blockquote>
<p>我们还需要记得，指针本质上是对象，因此我们允许把指针本身定为常量。常量指针（const pointer）必须初始化，而且一旦初始化完成，它的值就不能再改变了。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.14</span>; <span class="comment">// 常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *cptr = &amp;pi; <span class="comment">// 指向常量的指针</span></span><br><span class="line"><span class="type">int</span> errNumb = <span class="number">0</span>; <span class="comment">// 变量</span></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> cuErr = &amp;errNumb; <span class="comment">// 常量指针，或者说是常量的指针类型</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *<span class="type">const</span> pip = &amp;pi; <span class="comment">// 指向常量的常量指针</span></span><br></pre></td></tr></table></figure><br>根据上面的代码，你应该区分清楚它们的区别，尤其是指向常量的指针和是常量的指针类型。百度上对常量指针和指针常量的解读非常模糊混乱，看到了如下解读方法。</p>
<blockquote>
<p>从右往左读，首先是标识符，然后加上<code>is a</code>，之后遇到<code>*</code>就替换为<code>point to</code>，其余的关键字照抄，这样得到的一句英文的确可以较好地说明这个标识符亦或是变量的类型。</p>
</blockquote>
<h1 id="4-顶层const"><a href="#4-顶层const" class="headerlink" title="4. 顶层const"></a>4. 顶层const</h1><p>就像上面所说的，由于指针本身既是对象，又可以指向对象，因此指针本身是否为常量以及指针所指向的对象是否为常量就是两个相互独立的问题。<br>用名词顶层const（top-level const）表示指针本身是个常量。<br>用名词底层const（low-level const）表示指针所指的对象是一个常量。<br>当然，顶层const可以表示任意对象是常量，更通俗地说就是，任意本身是常量的对象就是顶层const。<br>而底层const只与指针和引用等复合类型的基本类型部分有关。<br>所以，指针类型可以既是顶层const又是底层const，这是特殊于其他类型的。<br>当执行拷贝操作时，顶层const不受什么影响；而底层const要求拷入和拷出的对象必须具有相同的底层const资格，或者两个对象的数据类型能够转换。一般而言，非常量可以转换成常量，反之则不行。</p>
<h1 id="5-constexpr和常量表达式"><a href="#5-constexpr和常量表达式" class="headerlink" title="5. constexpr和常量表达式"></a>5. constexpr和常量表达式</h1><p>常量表达式（const expression）是指值不会改变并且在编译过程就能得到计算结果的表达式。显然，字面值属于常量表达式，用常量表达式初始化的const对象也是常量表达式。一个对象（或表达式）是不是常量表达式由它的数据类型和初始值共同决定。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> max_files = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> limite = max_files + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> staff_size = <span class="number">27</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz = <span class="built_in">get_size</span>();</span><br></pre></td></tr></table></figure><br>尽管staff_size的初始值是个字面值常量，但由于它的数据类型只是一个普通int而非const int，所以它不属于常量表达式。另一方面，尽管sz本身是一个常量，但它的具体值直到运行时才能获取到，所以也不是常量表达式。</p>
<p>为了更好地分辨一个初始值到底是不是常量表达式，C++11规定，允许将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式。声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化。<br>并且，你可以用constexpr定义一个特殊的函数，它应该足够简单以使得编译时就可以计算其结果，这样就可以用constexpr函数去初始化constexpr变量。</p>
<p>常量表达式的值需要在编译时就得到计算，因此对声明constexpr时用到的类型必须有所限制。因为这些类型比较简单，值也显而易见、容易得到，就把它们称为字面值类型（literal type）。<br>目前为止，算术类型、引用和指针都属于字面值类型。<br>尽管指针和引用都能定义成constexpr，但他们的初始值却受到严格限制。一个constexpr指针的初始值必须是nullptr或者0，或者是存储于某个固定地址中的对象。<br>函数体内定义的变量一般来说并非存放在固定地址中，因此constexpr指针不能指向这样的变量；当然，函数还允许定义一类有效范围超出函数本身的变量，这类变量和定义在函数体之外的变量一样也有固定地址，因此constexpr引用/指针可以绑定/指向这样的变量。</p>
<p>请注意，在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指的对象无关。</p>
<h1 id="6-处理类型"><a href="#6-处理类型" class="headerlink" title="6. 处理类型"></a>6. 处理类型</h1><p>由于程序复杂性的提升，程序中用到的类型也越来越复杂。</p>
<ul>
<li>一些类型难于拼写，既难记又容易写错，还无法明确体现其真实目的和含义。</li>
<li>搞不清到底需要什么类型，程序员不得不通过程序上下文寻求帮助。</li>
</ul>
<p>类型别名（type alias）因此而产生，它是一个名字，是某种类型的同义词。它让复杂的类型名字变得简单明了、易于理解和使用，还有助于程序员清楚地知道使用该类型的真实目的。可通过以下两种方法定义类型别名：</p>
<ul>
<li>关键字typedef<br>  其中关键字typedef作为声明语句中的基本数据类型的一部分出现。含有typedef的声明语句定义的不再是变量而是类型别名。和以前的声明语句一样，这里的声明符也可以包含类型修饰，从而也能由基本数据类型构造出符合类型。</li>
<li>别名声明（alias declaration）<br>  这种方法用关键字using作为别名声明的开始，其后紧跟别名和等号，其作用是把等号左侧的名字规定成等号右侧类型的别名。<br>类型别名和类型的名字等价，只要是类型的名字能出现的地方，就能使用类型别名。</li>
</ul>
<h1 id="7-auto类型说明符"><a href="#7-auto类型说明符" class="headerlink" title="7. auto类型说明符"></a>7. auto类型说明符</h1><p>为了解决在声明变量时得知表达式类型的问题，C++11引入了auto类型说明符，它能让编译器代替我们去分析表达式所属的类型。和之前那些只对应一种特定类型的说明符不同，auto让编译器通过初始值来推算变量的类型。显然，auto定义的变量必须有初始值。<br>可以使用auto在一条语句中声明多个变量，但是该语句中所有变量的初始基本数据类型都必须一样。</p>
<ul>
<li>首先，使用引用实际是使用引用的对象，特别是当引用被用作初始值时，真正参与初始化的其实是引用对象的值。此时编译器以引用对象的类型作为auto的类型。</li>
<li>其次，auto一般会忽略掉顶层const，同时底层const则会保留下来。</li>
<li>如果希望推断出的auto类型是一个顶层const，须明确指出。</li>
<li>还可以将引用的类型设为auto，并适用于原初始化规则。</li>
<li>设置一个类型为auto的引用时，初始值中的顶层常量属性仍然保留。和往常一样，如果我们给初始值绑定一个引用，则此时的常量就不是顶层常量了。</li>
<li>要在一条语句中定义多个变量，切记符号&amp;和 * 只从属于某个声明符，而非基本数据类型的一部分，因此初始值必须是同一种类型。</li>
</ul>
<h1 id="8-decltype类型识别符"><a href="#8-decltype类型识别符" class="headerlink" title="8. decltype类型识别符"></a>8. decltype类型识别符</h1><p>有时呢，我们希望从表达式的类型推断出要定义的变量的类型，但是不想用该表达式的值初始化变量。为了满足这一要求，C++11引入了第二种类型说明符decltype，它的作用是选择并返回操作数的数据类型。在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。<br>如果decltype使用的表达式是一个变量，则decltype返回该变量的类型（包括顶层const和引用在内）。<br>需要指出的是，引用从来都作为其所指对象的同义词出现，只有用在decltype处是一个例外。<br>如下<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i =<span class="number">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r + <span class="number">0</span>) b;</span><br><span class="line"><span class="keyword">decltype</span>(*p) c;</span><br></pre></td></tr></table></figure><br>因为r是一个引用，很明显decltype(r)结果是引用类型，如果想要结果类型是r所引用的类型，可以把r作为表达式的一部分，如r+0，我们就可以得到一个具体值而非引用。<br>如果表达式是解引用（即 * ）操作，则decltype将得到引用类型，就如上代码块最后一句代码结果类型就是int&amp;，而非int。<br>对于变量v，decltype((v))的结果永远是引用，而decltype(v)结果只有当v本身是引用时才是引用。</p>
<h1 id="9-自定义数据结构"><a href="#9-自定义数据结构" class="headerlink" title="9. 自定义数据结构"></a>9. 自定义数据结构</h1><p>这里我们使用struct定义一个类。<br>以关键字struct开始，紧跟着类名和类体（类体部分可以为空），类体由花括号包围形成了一个新的作用域，类内部定义的名字必须唯一，但是可以与类外定义的名字重复。类体右侧表示结束的花括号后必须写一个分号，因为类体后可以紧跟变量名以示对该类型对象的定义，所以分号必不可少。<br>不建议直接在类体后定义类型对象，这样无异于把两种不同实体的定义混在了一条语句中。<br>类体定义类的成员，我们的类只有数据成员（data member），类的数据成员定义了类的对象的具体内容，每个对象有一份自己的数据成员拷贝，修改一个对象的数据成员，不会影响其他对象。<br>C++11规定，可以为数据成员提供一个类内初始值（in-class initializer）用于初始化数据成员，没有初始值的成员将被默认初始化。初始化规则和之前类似，但不能使用圆括号。<br>当然，之后会介绍的class，也会说明现在为何使用struct。</p>
<h1 id="10-预处理器"><a href="#10-预处理器" class="headerlink" title="10. 预处理器"></a>10. 预处理器</h1><p>为了让我们编写的类能被多个文件使用，需要编写自己的头文件，但我们写的头文件可能会导致使用该头文件的文件多次重复引入同样的头文件，因此我们要对自制头文件做适当处理，使其遇到多次包含的情况也能安全和正常地工作。<br>这就要提到预处理器（preprocessor）技术了，它由C语言继承而来，预处理器是在编译之前执行的一段程序，可以部分的改变我们所写的程序。就如之前用到的一项预处理器功能#include，当预处理器看到#include标记时就会用指定的头文件的内容代替#include。<br>C++程序还会用到的一项预处理功能是头文件保护符（header guard），头文件保护符依赖于预处理变量。预处理变量有两种状态：已定义和未定义。#define指令把一个名字设定为预处理变量，另外两个指令则分别检查某个指定的预处理变量是否已经定义：#ifdef当且仅当变量已定义时为真，#ifndef当且仅当变量未定义时为真。一旦检查结果为真，则执行后续操作直到遇到#endif指令为止。</p>
<blockquote>
<p>预处理变量无视C++语言中关于作用域的规则。</p>
</blockquote>
<p>整个程序中的预处理变量包括头文件保护符必须唯一，通常基于头文件中类的名字来构建保护符的名字，以确保其唯一性。为了避免与程序中其他实体发生名字冲突，一般把预处理变量的名字全部大写。</p>
<blockquote>
<p>头文件即使还没有被包含在任何其他头文件中，也应该设置保护符。这很简单，只要养成习惯就好了，不必在意你的程序是否需要。</p>
</blockquote>
<h1 id="11-总结"><a href="#11-总结" class="headerlink" title="11. 总结"></a>11. 总结</h1><p>按照惯例，下面仍然是本章术语表总结。</p>
<ul>
<li>地址（address）</li>
<li>别名声明（alias declaration）</li>
<li>算数类型（arithmetic type）</li>
<li>数组（array）</li>
<li>auto</li>
<li>基本类型（base type）</li>
<li>绑定（bind）</li>
<li>字节（byte）</li>
<li>类成员（class member）</li>
<li>复合类型（compound type）</li>
<li>const</li>
<li>常量指针（const pointer）</li>
<li>常量引用（const reference）</li>
<li>常量表达式（const expression）</li>
<li>constexpr</li>
<li>转换（convertsion）</li>
<li>数据成员（data member）</li>
<li>声明（declaration）</li>
<li>声明符（declarator）</li>
<li>decltype</li>
<li>默认初始化（default initialization）</li>
<li>定义（definition）</li>
<li>转义序列（escape sequence）</li>
<li>全局作用域（global scope）</li>
<li>头文件保护符（header guard）</li>
<li>标识符（identifier）</li>
<li>类内初始符（in-class initializer）</li>
<li>在作用域内（in scope）</li>
<li>被初始化（initialized）</li>
<li>内层作用域（inner scope）</li>
<li>整型（integral type）</li>
<li>列表初始化（list initialization）</li>
<li>字面值（literal）</li>
<li>局部作用域（local scope）</li>
<li>底层const（low-level const）</li>
<li>成员（member）</li>
<li>不可打印字符（nonprintable character）</li>
<li>空指针（null pointer）</li>
<li>nullptr</li>
<li>对象（object）</li>
<li>外层作用域（outer scope）</li>
<li>指针（pointer）</li>
<li>指向常量的指针（pointer to const）</li>
<li>预处理器（preprocessor）</li>
<li>预处理变量（preprocessor variable）</li>
<li>引用（reference）</li>
<li>对常量的引用（reference to const）</li>
<li>作用域（scope）</li>
<li>全局（global）</li>
<li>类（class）</li>
<li>命名空间（namespace）</li>
<li>块（block）</li>
<li>分离式编译（separate compilation）</li>
<li>带符号类型（signed）</li>
<li>字符串（string）</li>
<li>struct</li>
<li>临时值（temporary）</li>
<li>顶层const（top-level const）</li>
<li>类型别名（type alias）</li>
<li>类型检查（type checking）</li>
<li>类型说明符（type specifier）</li>
<li>typedef</li>
<li>未定义（undefined）</li>
<li>未初始化（uninitialized）</li>
<li>无符号类型（unsigned）</li>
<li>变量（variable）</li>
<li>void *</li>
<li>void类型</li>
<li>字（word）</li>
<li>&amp;运算符（&amp; operator）</li>
<li>* 运算符（  * operator）</li>
<li><h1 id="define"><a href="#define" class="headerlink" title="define"></a>define</h1></li>
<li><h1 id="endif"><a href="#endif" class="headerlink" title="endif"></a>endif</h1></li>
<li><h1 id="ifdef"><a href="#ifdef" class="headerlink" title="ifdef"></a>ifdef</h1></li>
<li><h1 id="ifndef"><a href="#ifndef" class="headerlink" title="ifndef"></a>ifndef</h1></li>
</ul>
<h1 id="12-读后感？"><a href="#12-读后感？" class="headerlink" title="12. 读后感？"></a>12. 读后感？</h1><p>第二章的内容相对于第一章读起来已经感到有些拗口了，一些定义的概念也并不是特别清晰，尤其有些定义在百度上解释的五花八门，这种反而感觉英文上对于其定义的解释更为贴切。第二章变量和基本类型可以说是C++编程的基础吧，更复杂的结构等等都是由基础演化而来，我的笔记也并不全面，书上会有更为详尽的示例，但由于时间和精力最优的选择就是只做这种纯文字且没什么排版的文章记录，我也更容易坚持下来，如果你想有更深的了解，还是建议去读一读这本书，当然也可以对照我的记录，我对其中部分难以理解的定义给出了自己的理解或是用自己的话语描述，如有错误，欢迎指正。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++ Primer</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类型转换运算符</title>
    <url>/2022/10/12/%E5%85%AB%E8%82%A1/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>C++有四个用于类型转换的运算符，它们被称为类型转换运算符。</p>
<ul>
<li>static_cast：静态类型转换</li>
<li>dynamic_cast：动态转换</li>
<li>const_cast：常量转换</li>
<li>reinterpret_cast：重新释义转换</li>
</ul>
<ol>
<li>static_cast<br> static_cast 运算符执行非动态转换，没有运行时类检查来保证转换的安全性。例如，它可以用来把一个基类指针转换为派生类指针。<br> 使用方式：static_cast<type> (expr)</li>
<li>dynamic_cast<br> dynamic_cast 在运行时执行转换，验证转换的有效性。如果转换未执行，则转换失败，表达式 expr 被判定为 null。dynamic_cast 执行动态转换时，type 必须是类的指针、类的引用或者 void*，如果 type 是类指针类型，那么 expr 也必须是一个指针，如果 type 是一个引用，那么 expr 也必须是一个引用。<br> 使用方式：dynamic_cast<type> (expr)</li>
<li>const_cast<br> const_cast 运算符用于修改类型的 const / volatile 属性。除了 const 或 volatile 属性之外，目标类型必须与源类型相同。这种类型的转换主要是用来操作所传对象的 const 属性，可以加上 const 属性，也可以去掉 const 属性。<br> 使用方式：const_cast<type> (expr)</li>
<li>reinterpret_cast<br> reinterpret_cast 运算符把某种指针改为其他类型的指针。它可以把一个指针转换为一个整数，也可以把一个整数转换为一个指针。<br> 使用方式：reinterpret_cast<type> (expr)</li>
</ol>
]]></content>
      <categories>
        <category>八股文</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(二)</title>
    <url>/2022/10/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>今天是第二章的内容，祝你好运，也祝我。</p>
</blockquote>
<h1 id="1-编程语言的特征"><a href="#1-编程语言的特征" class="headerlink" title="1. 编程语言的特征"></a>1. 编程语言的特征</h1><p>常用的编程语言通常具备一组公共的语法特征，仅在特征的细节上有所区别。<br>大多数编程语言通过两种方式进一步补充其基本特征：</p>
<ul>
<li>赋予程序员自定义数据类型的权利，从而实现对语言的扩展</li>
<li>将一些有用的功能封装成库函数提供给程序员</li>
</ul>
<p>与大多数编程语言一样，C++的对象类型决定了能对该对象进行的操作，一条表达式是否合法依赖于其中参与运算的对象的类型。C++是一种静态数据类型语言，它的类型检查发生在编译时。因此编译器必须知道程序中每一个变量对应的数据类型。</p>
<h1 id="2-基本内置类型"><a href="#2-基本内置类型" class="headerlink" title="2. 基本内置类型"></a>2. 基本内置类型</h1><p>C++定义了一套包括算数类型（arithmetic type）和空类型（void）在内的基本数据类型。</p>
<ul>
<li>算数类型<ul>
<li>整型（intergral type，包括字符和布尔类型在内）</li>
<li>浮点型</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>C++：算数类型</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>类型</td>
<td>含义</td>
<td>最小尺寸</td>
</tr>
<tr>
<td>bool</td>
<td>布尔类型</td>
<td>未定义</td>
</tr>
<tr>
<td>char</td>
<td>字符</td>
<td>8位</td>
</tr>
<tr>
<td>wchar_t</td>
<td>宽字符</td>
<td>16位</td>
</tr>
<tr>
<td>char16_t</td>
<td>Unicode字符</td>
<td>16位</td>
</tr>
<tr>
<td>char32_t</td>
<td>Unicode字符</td>
<td>32位</td>
</tr>
<tr>
<td>short</td>
<td>短整型</td>
<td>16位</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
<td>16位</td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
<td>32位</td>
</tr>
<tr>
<td>long long</td>
<td>长整型</td>
<td>64位</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点数</td>
<td>6位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点数</td>
<td>10位有效数字</td>
</tr>
<tr>
<td>long double</td>
<td>扩展精度浮点数</td>
<td>10位有效数字</td>
</tr>
</tbody>
</table>
</div>
<p>布尔类型（bool）的取值是真（true）或者假（false）。<br>Unicode是用于表示所有自然语言中字符的标准。<br>数据类型long long是在C++11中新定义的。</p>
<h1 id="3-内置类型的机器实现"><a href="#3-内置类型的机器实现" class="headerlink" title="3. 内置类型的机器实现"></a>3. 内置类型的机器实现</h1><p>计算机以比特序列存储数据，每个比特非0即1。<br>大多数计算机以2的整数次幂个比特作为块来处理内存，可寻址的最小内存块称为”字节（byte）”，存储的基本单元称为”字（word）”，它通常由几个字节组成。在C++语言中，一个字节要至少能容纳机器基本字符集中的字符。大多数机器的字节由8比特构成，字则由32或64比特构成，也就是4或8字节。大多数计算机将内存中的每个字节与一个数字（被称为”地址（address）”）关联起来。</p>
<h1 id="4-符号"><a href="#4-符号" class="headerlink" title="4. 符号"></a>4. 符号</h1><p>除去布尔类型以及扩展的字符型，其他整型可划分为</p>
<ul>
<li>带符号的（signed） 正数、负数、0</li>
<li>无符号的（unsigned） 仅能表示大于等于0的值</li>
</ul>
<p>上面表格中的int、short、long和long long都是带符号的，只要在它们前面加上unsigned就可以得到无符号类型，其中，unsigned int可以缩写为unsigned。</p>
<p>与其他整型不同，字符型被分为三种：</p>
<ul>
<li>char 实际会根据编译器1表现为如下两种中的一种</li>
<li>signed char 8比特理论上可表示[-127,127]，实际上可表示[-128,127]</li>
<li>unsigned char 8比特可表示[0,255]</li>
</ul>
<p>来尝试预测下面的代码运行结果<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test1</span></span><br><span class="line"><span class="type">unsigned</span> u = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">-42</span>;</span><br><span class="line">std::cout &lt;&lt; i + i &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; u + i &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// test2</span></span><br><span class="line"><span class="type">unsigned</span> u1 = <span class="number">42</span>, u2 = <span class="number">10</span>;</span><br><span class="line">std::cout &lt;&lt; u1 - u2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; u2 - u1 &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// test3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// test4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> u = <span class="number">10</span>; u &gt;= <span class="number">0</span>; --u)</span><br><span class="line">    std::cout &lt;&lt; u &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// test5</span></span><br><span class="line"><span class="type">unsigned</span> u = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">while</span> (u &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    --u;</span><br><span class="line">    std::cout &lt;&lt; u &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果你尝试运行了上面的代码，你应该会明白，不要混用带符号类型和无符号类型，你可以结合上面的示例代码和下面第六条的内容分析原因。</p>
<h1 id="5-类型选择"><a href="#5-类型选择" class="headerlink" title="5. 类型选择"></a>5. 类型选择</h1><ul>
<li>明确知晓数值不可能为负时，选用无符号类型</li>
<li>使用int执行整数运算，如果数值超过了int的表示范围，选用long long</li>
<li>算术表达式中尽量不要使用char或bool，机器间差异会导致不可知的问题。</li>
<li>执行浮点数运算选用double，因为float精度常常不够并且计算代价并不比double更低，而long double的精度一般情况下没有必要并且运行消耗不容忽视。</li>
</ul>
<h1 id="6-类型转换"><a href="#6-类型转换" class="headerlink" title="6. 类型转换"></a>6. 类型转换</h1><p>从一种给定的类型转换（convert）为另一种相关类型，你可以尝试如下示例：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> b = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> i = b;</span><br><span class="line">i = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> pi = i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">-1</span>;</span><br><span class="line"><span class="type">signed</span> <span class="type">char</span> c2 = <span class="number">256</span>;</span><br></pre></td></tr></table></figure><br>下面给出转换规则：</p>
<ul>
<li>当我们把一个非布尔类型的算数值赋给布尔类型时，初始值为0则结果为false，否则结果为true。</li>
<li>当我们把一个布尔值赋给非布尔类型时，初始值为false则结果为0，初始值为true则结果为1。</li>
<li>当我们把一个浮点数赋给整数类型时，进行近似处理，结果值仅保留浮点数中小数点之前的部分。</li>
<li>当我们把一个整数值赋给浮点类型时，小数部分记为0，。如果该整数所占的空间超过了浮点类型的容量，精度可能有损失。</li>
<li>当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。</li>
<li>当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。此时程序可能继续工作、崩溃或是生成垃圾数据。</li>
</ul>
<h1 id="7-避免无法预知和依赖于实现环境的行为"><a href="#7-避免无法预知和依赖于实现环境的行为" class="headerlink" title="7. 避免无法预知和依赖于实现环境的行为"></a>7. 避免无法预知和依赖于实现环境的行为</h1><p>无法预知的行为源于编译器无须（有时无法）检测的错误。即使代码编译通过了，如果程序执行了一条未定义的表达式，仍有可能产生错误。但，某些情况/编译器下，含有无法预知行为的程序也能正确执行，但无法保证它在其他编译器，其他测试用例或再次运行仍能正常运行。所以，程序应避免依赖于实现环境的行为，即不可移植的（nonportable）程序，并且这类代码定位错误是很困难的。</p>
<h1 id="8-字面值常量（literal）"><a href="#8-字面值常量（literal）" class="headerlink" title="8. 字面值常量（literal）"></a>8. 字面值常量（literal）</h1><ul>
<li>整型和浮点型字面值<ul>
<li>整型字面值<br>  如果一个字面值连与之关联的最大的数据类型都放不下，将产生错误。类型short没有对应的字面值。<ul>
<li>十进制数<br>  默认是有符号类型。正如我们所常见的，但严格来说它不会是负数，确切地说是对字面值取负值。</li>
<li>八进制数<br>  以0开头的整数</li>
<li>十六进制数<br>  以0x开头的整数</li>
</ul>
</li>
<li>浮点型字面值<br>  默认是double类型。<ul>
<li>小数形式</li>
<li>E/e的指数形式</li>
</ul>
</li>
</ul>
</li>
<li>字符和字符串字面值<ul>
<li>字符字面值<br>  char型字面值</li>
<li>字符串字面值<br>  由常量字符构成的数组（array），并且编译器会在每个字符串的结尾处添加一个空字符（’\0’）用作字符串结束的标识符。因此，字符串字面值的实际长度要比它的内容多1。</li>
</ul>
</li>
<li>转义序列<br>  主要为了两类程序员不能直接使用的字符服务<ul>
<li>不可打印的字符</li>
<li>C++语言中有特殊含义的字符</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>换行符</td>
<td>\n</td>
<td>横向制表符</td>
<td>\t</td>
<td>报警（响铃）符</td>
<td>\a</td>
</tr>
<tr>
<td>纵向制表符</td>
<td>\v</td>
<td>退格符</td>
<td>\b</td>
<td>双引号</td>
<td>\\”</td>
</tr>
<tr>
<td>反斜线</td>
<td>\\</td>
<td>问号</td>
<td>\?</td>
<td>单引号</td>
<td>\\’</td>
</tr>
<tr>
<td>回车符</td>
<td>\r</td>
<td>进纸符</td>
<td>\f</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>指定字面值的类型</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>指定字面值的类型</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>字符和字符串字面值</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>前缀</td>
<td>含义</td>
<td>类型</td>
<td></td>
</tr>
<tr>
<td></td>
<td>u</td>
<td>Unicode 16字符</td>
<td>char16_t</td>
<td></td>
</tr>
<tr>
<td></td>
<td>U</td>
<td>Unicode 32字符</td>
<td>char32_t</td>
<td></td>
</tr>
<tr>
<td></td>
<td>L</td>
<td>宽字符</td>
<td>wchar_t</td>
<td></td>
</tr>
<tr>
<td></td>
<td>u8</td>
<td>UTF-8（仅用于字符串字面常量）</td>
<td>char</td>
<td></td>
</tr>
<tr>
<td></td>
<td>整型字面值</td>
<td></td>
<td>浮点型字面值</td>
<td></td>
</tr>
<tr>
<td>后缀</td>
<td>最小匹配类型</td>
<td></td>
<td>后缀</td>
<td>类型</td>
</tr>
<tr>
<td>u or U</td>
<td>unsigned</td>
<td></td>
<td>f or F</td>
<td>float</td>
</tr>
<tr>
<td>l or L</td>
<td>long</td>
<td></td>
<td>l or L</td>
<td>long double</td>
</tr>
<tr>
<td>ll or LL</td>
<td>long long</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>布尔字面值和指针字面值<ul>
<li>布尔字面值<br>  true/false</li>
<li>指针字面值<br>  nullptr</li>
</ul>
</li>
</ul>
<h1 id="9-变量与对象"><a href="#9-变量与对象" class="headerlink" title="9. 变量与对象"></a>9. 变量与对象</h1><p>变量：提供一个具名的、可供程序操作的存储空间。<br>定义变量：首先是类型说明符（type specifier），随后紧跟着一个或多个变量名组成的列表。<br>对象（object）：通常指一块能存储数据并具有某种类型的内存空间。对此不同人有不同看法和理解。<br>当对象在创建时获得了一个特定的值，我们称这个对象被初始化了。<br>人们常常会忽略初始化与赋值之间的差异，实则这个问题很重要，初始化不是赋值，初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦除并以一个新值替代。</p>
<h1 id="10-列表初始化（list-initialization）"><a href="#10-列表初始化（list-initialization）" class="headerlink" title="10. 列表初始化（list initialization）"></a>10. 列表初始化（list initialization）</h1><p>如下，都可以做到将units_sold这个int变量初始化为0。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> units_sold = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> units_sold&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">units_sold</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><br>当用于内置类型的变量时，这种初始化有一个重要特点：如果我们使用列表初始化且初始值存在丢失信息的风险，则编译器将报错。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="type">int</span> a&#123;ld&#125;, b = &#123;ld&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(ld)</span>, d </span>= ld;</span><br></pre></td></tr></table></figure><br>你可以判断一下上面代码块运行的结果，是否会报错，仔细思考，可以结合本文第六条内容。<br>虽然这类问题看起来无关紧要，毕竟我们不会故意用long double的值去初始化int变量，但毕竟，它可能在不经意间发生，不是吗？</p>
<h1 id="11-默认初始化"><a href="#11-默认初始化" class="headerlink" title="11. 默认初始化"></a>11. 默认初始化</h1><p>如果定义变量时没有指定初值，则变量被默认初始化（default initialized），此时变量被赋予了”默认值”，默认值会由变量类型和定义变量的位置共同决定。<br>如果是内置类型的变量未被显式初始化，它的值由定义的位置决定。定义于任何函数体之外的变量被初始化为0.定义在函数体内部的内置类型变量将不被初始化（uninitialized）。一个未被初始化的内置类型变量的值是未定义的，如果试图拷贝或以其他方式访问此类值将引发错误。<br>每个类各自决定其初始化对象的方式。一些类要求每个对象都显式初始化，此时如果创造了一个该类的对象而未对其做明确的初始化操作，将引发错误。<br>未初始化的变量含有一个不确定的值，使用未初始化变量的值是一种错误的编程行为且很难调试。尽管大多数编译器能对一部分使用为初始化变量的行为提出警告，但严格而言，编译器并未被要求检查此类错误。<br>使用未初始化的变量将带来无法预计的后果，往往它会是对是错，添加无关代码导致我们误以为程序对了，但实际上代码仍是错误的。<br>建议初始化每一个内置类型的变量。虽然这不是必须的，但若是你无法确保不这么做时程序的安全，那这么做不失为一种最简单的方法。</p>
<h1 id="12-变量声明和定义的关系"><a href="#12-变量声明和定义的关系" class="headerlink" title="12. 变量声明和定义的关系"></a>12. 变量声明和定义的关系</h1><p>为了允许把程序拆分成多个逻辑部分来编写，C++语言支持分离性编译（separate compilation）机制，该机制允许将程序分割为若干个文件，它们可以被独立编译。<br>为了支持分离性编译，C++语言将声明和定义区分开来。声明（declaration）使得名字为程序所知，一个文件如果想使用别处定义的名字则必须包含对那个名字的声明。而定义（definition）负责创建与名字关联的实体。<br>变量声明规定了变量的类型和名字，在这一点上定义与之相同。但是除此之外，定义还申请存储空间，也可能会为变量赋一个初始值。<br>如果想声明一个变量而非定义它，就在变量名前添加关键词extern，并且不要显式的初始化变量。<br>任何包含了显示初始化的声明即成为定义。当我们给一个由extern关键词标记的变量赋一个初始值时，extern的作用将被抵消，它也就不再是声明，而是定义。<br>在函数体内部，如果试图初始化一个由extern关键词标记的变量，将引发错误。<br>变量能且只能被定义一次，但可以被多次声明。<br>声明和定义区别很重要，如果要在多个文件中使用同一个变量，就必须将声明和定义分离。此时变量的定义必须且只能出现在一个文件中，而其他用到该变量的文件必须对其声明，却不能重复定义。</p>
<h1 id="13-静态类型"><a href="#13-静态类型" class="headerlink" title="13. 静态类型"></a>13. 静态类型</h1><p>C++是一种静态类型（statically typed）语言，其含义是在编译阶段检查类型。其中，检查类型的过程称为类型检查（type checking）。<br>对象的类型决定了对象所能参与的运算，如果试图执行类型不支持的运算，编译器将报错并且不会生成可执行文件。<br>程序越复杂，静态类型检查越有助于发现问题。因此，我们在使用某个变量之前务必声明其类型。</p>
<h1 id="14-标识符"><a href="#14-标识符" class="headerlink" title="14. 标识符"></a>14. 标识符</h1><p>C++的标识符（identifier）由字母、数字和下划线组成，其中必须以字母或下划线开头。标识符的长度没有限制，但是对大小写字母敏感。<br>同时，C++也为语言本身以及标准库保留了一些名字，这些名字不能被用于标识符。<br>用户自定义的标识符中不能连续出现两个下划线（emmm，书里是画，很通俗易懂。。），也不能以下划线紧连大写字母开头，定义在函数体外的标识符不能以下划线开头。<br>下面是变量命名规范</p>
<ul>
<li>标识符要能体现实际含义</li>
<li>变量名一般用小写字母</li>
<li>用户自定义的类名一般以大写字母开头</li>
<li>如果标识符由多个单词组成，则单词间应有明显区分</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>C++关键字</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>alignas</td>
<td>continue</td>
<td>friend</td>
<td>register</td>
<td>true</td>
</tr>
<tr>
<td>alignof</td>
<td>decltype</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
</tr>
<tr>
<td>asm</td>
<td>default</td>
<td>if</td>
<td>return</td>
<td>typedef</td>
</tr>
<tr>
<td>auto</td>
<td>delete</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>do</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>double</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>dynamic_cast</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>else</td>
<td>namespace</td>
<td>static_assert</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>enum</td>
<td>new</td>
<td>static_cast</td>
<td>virtual</td>
</tr>
<tr>
<td>char16_t</td>
<td>explicit</td>
<td>noexcept</td>
<td>struct</td>
<td>void</td>
</tr>
<tr>
<td>char32_t</td>
<td>exprt</td>
<td>nullptr</td>
<td>switch</td>
<td>volatile</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>template</td>
<td>wchar_t</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>this</td>
<td>while</td>
</tr>
<tr>
<td>constexpr</td>
<td>float</td>
<td>protected</td>
<td>thread_local</td>
<td></td>
</tr>
<tr>
<td>const_cast</td>
<td>for</td>
<td>public</td>
<td>throw</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>C++</th>
<th>操作符</th>
<th>替代名</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>bitand</td>
<td>compl</td>
<td>not_eq</td>
<td>or_eq</td>
<td>xor_eq</td>
</tr>
<tr>
<td>and_eq</td>
<td>bitor</td>
<td>not</td>
<td>or</td>
<td>xor</td>
</tr>
</tbody>
</table>
</div>
<h1 id="15-作用域（scope）"><a href="#15-作用域（scope）" class="headerlink" title="15. 作用域（scope）"></a>15. 作用域（scope）</h1><p>作用域是程序的一部分，在其中名字有其特定的含义。C++语言中大多数作用域都以花括号分隔。<br>同一个名字在不同的作用域中可以指向不同的实体。名字的有效区域始于名字的声明语句，以声明语句所在的作用域末端为结尾。<br>main函数定义于所有花括号之外，它和其他大多数定义在函数体之外的名字一样拥有全局作用域（global scope）。全局作用域内的名字在整个程序的范围内都可使用。<br>而在函数块（或循环等等其他类似的）内部定义的名字，从声明它到这个函数结束我们都可以访问它，但是出了函数所在的块就无法访问了，因此说它有块作用域（block scope）。<br>建议当你第一次使用变量时再定义它，这样有助于更容易找到变量的定义，并且我们更容易给它赋予一个更合理的初值。<br>作用域能彼此包含，被包含（或者说被嵌套）的作用域称为内层作用域（inner scope），包含着别的作用域的作用域称为外层作用域（outer scope）。<br>如果函数有可能用到某全局变量，则不宜再定义一个同名的局部变量。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> reused = <span class="number">42</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> unique = <span class="number">0</span>;</span><br><span class="line">    std::cout &lt;&lt; reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> reused = <span class="number">0</span>;</span><br><span class="line">    std::cout &lt;&lt; reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; ::reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>你可以通过上面的代码加深对作用域的理解。</p>
<h1 id="16-复合类型"><a href="#16-复合类型" class="headerlink" title="16. 复合类型"></a>16. 复合类型</h1><p>复合类型（compound type）是指基于其他类型定义的类型。<br>下面将介绍引用与指针这两种。<br>这里更新下第9条中对于声明语句的定义：<br>一条声明语句由一个基本数据类型（base type）和紧随其后的一个声明符（declarator）列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型。<br>目前于我们而言，声明符就是变量名，但之后会有更加复杂的声明符，它基于基本数据类型得到更复杂的类型并把它指定给变量。</p>
<h1 id="17-引用"><a href="#17-引用" class="headerlink" title="17. 引用"></a>17. 引用</h1><div class="note success simple"><p>C++11中新增了一种引用：所谓的右值引用（rvalue reference），后续会有更详细的介绍。这种引用主要用于内置类。严格来说，当我们使用术语引用（reference）时，指的其实是左值引用（lvalue reference）。</p>
</div>
<p>引用（reference）为对象起了另外一个名字，引用类型引用（refers to）另外一种类型。通过将声明符写成&amp;d的形式来定义引用类型，其中d是声明的变量名。<br>一般在初始化变量时，初始化会被拷贝到新建的对象中。然而定义引用时，程序把引用和它的初值绑定（bind）在一起，而不是将初始值拷贝给引用。一旦初始化完成，引用将和它的初始值对象一直绑定在一起。因为无法令引用重新绑定到另外一个对象，因此引用必须初始化。<br>引用即别名，引用并非对象，相反的，它只是为一个已经存在的对象所起的另外一个名字。<br>定义了一个引用之后，对其进行的所有操作都是在与之绑定的对象上进行的。<br>因为引用本身不是一个对象，所以不能定义引用的引用。<br>注意，引用只能绑定在对象上，并且引用的类型必须要和它绑定的对象严格匹配。</p>
<h1 id="18-指针"><a href="#18-指针" class="headerlink" title="18. 指针"></a>18. 指针</h1><p>指针（pointer）是指向（point to）另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问。<br>指针和引用不同点：</p>
<ul>
<li>指针本身就是一个对象，允许对指针赋值和拷贝，而且指针在其生命周期内可以先后指向几个不同的对象。</li>
<li>指针无须在定义时赋初值。和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值。</li>
</ul>
<p>指针通常难以理解，即使是有经验的程序员也常常因为调试指针引发的错误而备受折磨。<br>定义指针类型的方法将声明符写成 * d的形式，其中d是变量名。如果在一条语句中定义了几个指针变量，那么每个变量前面都必须有符号 * 。<br>指针存放某个对象的地址，想要获取该地址，需要使用取地址符（操作符&amp;）。<br>除了之后给定的两种特殊情况，其他所有指针的类型都要和它所指向的对象严格匹配。</p>
<p>指针的值（地址）应是如下四种状态之一：</p>
<ul>
<li>指向一个对象</li>
<li>指向紧邻对象所占空间的下一个位置</li>
<li>空指针，即没有指向任何对象</li>
<li>无效指针，即上述之外其他值…</li>
</ul>
<p>试图拷贝或以其他方式访问无效指针的值都将引发错误。编译器并不负责检查此类错误，这和使用未经初始化的变量是一样的。访问无效指针的后果无法预计，因此程序员必须清楚任意给定的指针是否有效。同样，访问未指向任何具体对象的指针也会引发不可知的后果。<br>如果指针指向了一个对象，则允许使用解引用符（操作符 * ）来访问该对象。对指针解引用会得出所指的对象，如果给解引用的结果赋值，实际上也就是给指针所指的对象赋值。<br>解引用操作仅适用于那些确实指向了某个对象的有效指针。<br>请注意，某些符号有多重含义，没错，刚刚学习的 * 和&amp;就是这样，我们完全可以将出现在不同场景下的它们看做不同的符号。<br>空指针（null pointer），不指向任何对象，给一个指针赋nullptr/0/NULL都可以使其成为空指针。注意，nullptr是在C++11引入的。<br>nullptr是一种特殊类型的字面值，它可以被转换成任意其他指针类型。<br>NULL是预处理变量（preprocessor variable），这个变量在头文件cstdlib中定义，它的值就是0。新标准下，现在的C++程序最好使用nullptr，同时尽量避免使用NULL。<br>把int变量直接赋给指针是错误的操作，即使int变量的值恰好等于0也不行。<br>如同初始化变量一样，同样建议初始化全部的指针，因为指针本质上是访问内存空间，如果恰巧访问的内存空间地址原本有内容，我们又做出某些修改，那会引发很大的麻烦。如果定义时不知道指针改指向何处，那么可以把它初始化为nullptr，这样就能让程序知道它没有指向任何具体的对象了。<br>最好的区分一条赋值语句到底是改变了指针的值还是指针所指向对象的值的方法就是记住赋值永远改变的是等号左侧的对象。<br>同理，当指针指向一个合法值，就能将它用于条件表达式中。<br>void * 指针是一种特殊的指针类型，可用于存放任意对象的地址。对于一个void * 指针，我们只能：拿它和别的指针比较、作为函数的输入或输出、赋给另一个void * 指针，不能：直接操作void * 指针所指的对象。<br>简单地说，对于void * 而言，内存空间仅仅是内存空间，它无法访问内存空间中所存的对象。（当然后面还是有办法获取void * 所存地址的)</p>
<h1 id="19-复合类型的声明"><a href="#19-复合类型的声明" class="headerlink" title="19. 复合类型的声明"></a>19. 复合类型的声明</h1><p>其实类型修饰符只是声明符的一部分，它和基本数据类型毫无关系。<br>比如<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="type">int</span>* p1, p2; <span class="comment">// p1是指向int的指针，p2是int</span></span><br><span class="line"><span class="type">int</span> *p1, *p2; <span class="comment">// p1和p2都是指向int的指针</span></span><br><span class="line"><span class="type">int</span>* p1;</span><br><span class="line"><span class="type">int</span>* p2;</span><br></pre></td></tr></table></figure><br>这两种写法没有对错之分，但需要保证风格统一。<br>当然，之前说过，指针本身也是对象，所以，<em> </em> 指针的指针，<em> </em> <em> 指针的指针的指针，以此类推都是存在的。<br>而且根据引用的定义，</em>&amp; 指针的引用也是存在的。<br>要理解一个左值的类型，最简单的办法就是从右向左阅读得到它的定义。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *&amp;r = p; <span class="comment">// 从r开始向左，第一个符号是&amp;，第一个符号有最直接的影响，因此r是一个引用。其余部分则用来确定r引用的类型是什么，*说明r引用的是一个指针，最后通过int我们可知r引用的是一个int指针</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>今天的内容大概就到这里了，第二章还有一小部分内容，本章指针和引用深入可探讨的内容还是很多的，之后每天更得内容可能会少一点，会同步推一下项目以及mit 6.1810的。如有错误欢迎指正，如有疑问欢迎留言评论，我会尽快回复。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++ Primer</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docisfy搭建wiki</title>
    <url>/2022/08/28/%E5%BB%BA%E7%AB%99/%E4%BD%BF%E7%94%A8docisfy%E6%90%AD%E5%BB%BAwiki/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>感谢这位声音辣么好听的小哥哥的视频 :huaji11: <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce\_SELRES\_start">﻿</span></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>wiki</tag>
      </tags>
  </entry>
  <entry>
    <title>命令记录</title>
    <url>/2022/10/04/%E5%BB%BA%E7%AB%99/%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>Mathjax</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
\nabla\cdot\vec{E} &=& \frac{\rho}{\epsilon_0} \\
\nabla\cdot\vec{B} &=& 0 \\
\nabla\times\vec{E} &=& -\frac{\partial B}{\partial t} \\
\nabla\times\vec{B} &=& \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)
\end{eqnarray}</script>]]></content>
  </entry>
  <entry>
    <title>建站日志</title>
    <url>/2022/10/03/%E5%BB%BA%E7%AB%99/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2021-11-15 审核通过，基于wordpress的个人博客<br>2022-05-01 用于软件工程课程大作业疫情行程管理系统展示<br>2022-08-15 重建基于wordpress的个人博客<br>2022-10-03 基于hexo搭建新的个人博客</p>
]]></content>
  </entry>
  <entry>
    <title>Tag-Plugins-Plus</title>
    <url>/2022/10/07/%E5%BB%BA%E7%AB%99/Tag-Plugins-Plus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="tip home"><p>本文档为<a href="https://jq.qq.com/?_wv=1027&amp;k=EF1Elvqp">🧊Akilarの糖果屋🍭</a>出品，转载需注明出处。</p>
<p>如有使用了本站的外挂标签插件的读者，请确保自己的配置内容为最新。</p>
<p>同理，若您在使用本帖教程后，发现样式无法完全还原文档内效果，请重点排查您的其余第三方魔改css样式，例如css中是否存在<strong>circle</strong>、<strong>square</strong>等易重class名。</p>
</div>
<details class="folding-tag" red><summary> 点开查看开发记录 </summary>
              <div class='content'>
              <div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>本文所涉及的样式，主要参考的是各类已有主题，并对相应styl文件进行样式修改以及添加夜间模式适配。已尽可能追根溯源找到了各部分魔改内容最初的作者，如有错误和遗漏还请联系我修改。</p></div><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>开发记录</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-04-29:发布插件版v1.0.17</p></div></div><div class='timeline-item-content'><ol><li>在bubble气泡外挂标签基础上新增reference引用文献标签</li><li>修复了bubble气泡外挂标签层级过高遮挡提示框的bug</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-04-28:发布插件版v1.0.16</p></div></div><div class='timeline-item-content'><ol><li>移除timeline外挂标签，请使用butterfly新版自带的timeline标签，效果更好。</li><li>修复tip标签自定义图标无效的bug</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-04-07:发布插件版v1.0.15</p></div></div><div class='timeline-item-content'><ol><li>调整气泡显隐动画逻辑，避免透明度变换瞬间遮挡到正文。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-04-07:发布插件版v1.0.14</p></div></div><div class='timeline-item-content'><ol><li>新增气泡注释bubble标签样式。效果比nota标签更好。</li><li>支持自定义气泡背景色。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-03-03:发布插件版v1.0.13</p></div></div><div class='timeline-item-content'><ol><li>新增开关逻辑，iconfont，carousel设为false则不引入。</li><li>site标签新增灯箱屏蔽，不再支持点击放大图片。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-02-14:发布插件版v1.0.12</p></div></div><div class='timeline-item-content'><ol><li>剔除了link卡片的无效css</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-01-26:发布插件版v1.0.11</p></div></div><div class='timeline-item-content'><ol><li>butterfly_v4.0新增了<code>timeline</code>标签，与本插件标签名冲突。可以选择改用标签文档中的源码配置方案并剔除timeline标签或者删除主题原有的timeline标签文件<code>Blogroot\themes\butterfly\scripts\tag\timeline.js</code>和<code>Blogroot\themes\butterfly\source\css\_tags\timeline.styl</code>。（总之不能共存）</li><li>修复了carousel标签刷新后不加载的bug。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-12-23:发布插件版v1.0.10</p></div></div><div class='timeline-item-content'><ol><li>将所有CDN链接迁移至<code>unpkg.zhimg.com</code></li><li>外露所有CDN配置项，支持读者自行更改CDN源</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-12-09:发布插件版v1.0.9</p></div></div><div class='timeline-item-content'><ol><li>调整<code>link</code>标签的默认图片缺省值适配，新增<code>tag_plugins.link.placeholder</code>配置项。</li><li>因为新增了默认图片，新增配置项，所以需要更新版本。如果本身使用link标签就有自己加图片的习惯的，无需升级。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus@1.0.9 --save</span><br></pre></td></tr></table></figure></li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-12-07:发布插件版v1.0.5</p></div></div><div class='timeline-item-content'><ol><li>调整<code>folding</code>标签，解决与twikoo设置面板样式的冲突问题</li><li>因为调整了<code>folding</code>标签的编译函数，低版本会出现folding样式失效的情况，请各位更新至最新版本。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus@1.0.5 --save</span><br></pre></td></tr></table></figure></li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-12-01:发布插件版v1.0.4</p></div></div><div class='timeline-item-content'><ol><li>调整<code>tip</code>标签，字体垂直居中</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-08-06:发布插件版v1.0.3</p></div></div><div class='timeline-item-content'><ol><li>新增<code>carousel</code>旋转相册</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-07-07:发布插件版v1.0.0</p></div></div><div class='timeline-item-content'><ol><li>使用npm插件安装。</li><li>测试版本为butterfly_v3.1.0、3.3.0、3.7.8、3.8.0</li><li>插件写法调整为高内聚，理论上不受butterfly主题版本影响。</li><li>为了获得完整效果，建议打开主题的beautify配置项和theme_color配置项。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-03-19:正式版v1.61</p></div></div><div class='timeline-item-content'><ol><li>修复行内图片换行错误。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021-02-24:正式版v1.6</p></div></div><div class='timeline-item-content'><ol><li>新增一个样式标签，进度条progress</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-12-31:正式版v1.5</p></div></div><div class='timeline-item-content'><ol><li>新增两个样式标签，github徽标ghbdage和特效标签wow</li><li>移除静态资源中的<code>fontawesome-animation.min.css</code>以及<code>issues.js</code>，改为CDN引用。</li><li>本帖不专门提供特效标签wow的配置方案，若有需要，请查看站内教程<a href="/posts/abab51cf/">使用wowjs给博客添加动画效果</a></li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-12-17:正式版v1.4</p></div></div><div class='timeline-item-content'><ol><li>新增两个样式标签poem和icon</li><li>修复了folding标签嵌套字体逐级放大的bug。</li><li>不再更新v3.4.0以下版本的适配内容。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-12-13:正式版v1.3</p></div></div><div class='timeline-item-content'><ol><li>新增Butterfly_v3.4.0的配置文件。</li><li>请读者根据自己的主题版本选择替换。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-12-07:正式版v1.21</p></div></div><div class='timeline-item-content'><ol><li>资源文件无任何改动。</li><li>更新了动态标签的使用说明。补全参数配置，更换示例。使得教程更加通俗易懂。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-12-03:正式版v1.2</p></div></div><div class='timeline-item-content'><ol><li>新增当初弃用的issues.js标签，以配合友链魔改教程中的issues自动更新功能。</li><li>更新了静态资源文件，请之前的读者重新覆盖安装。</li><li>修改了<code>fontawesome-animation.min.css</code>的引入方式，改成使用<code>@import</code>注入<code>index.css</code>。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-11-16:正式版v1.1</p></div></div><div class='timeline-item-content'><ol><li>新增tip.js，将小康大佬的渐变色上标标签写法从HTML的方式改成用标签语法编写。</li><li>新增动态标签样式anima，使用了fontawesome-animation项目。</li><li>新增标签内容夜间模式适配。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-11-15:正式版v1.0</p></div></div><div class='timeline-item-content'><ol><li>基本完成Volantis外挂标签移植。</li><li>移除了btn标签，因为存在冲突。而且不如butterfly自带的button样式好看。</li><li>适配了folding标签的夜间模式。</li><li>打包了静态资源文件，上传蓝奏云。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-11-14:内测版v0.05</p></div></div><div class='timeline-item-content'><ol><li>主要使用了<a href="https://github.com/volantis-x/hexo-theme-volantis">Volantis</a>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。</li><li>主要参考内容<ul><li><a href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins）</a></li><li><a href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></li><li><a href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></li><li><a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></li></ul></li></ol></div></div></div>
              </div>
            </details>
<div class="tabs" id="配置方案"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#配置方案-1">npm插件安装方案（推荐）</button></li><li class="tab"><button type="button" data-href="#配置方案-2">源码修改配置方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="配置方案-1"><ol>
<li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure>
考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li>
<li>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure></li>
<li>参数释义</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">备选值/类型</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">enable</td>
<td style="text-align:left">true/false</td>
<td style="text-align:left">【必选】控制开关</td>
</tr>
<tr>
<td style="text-align:left">priority</td>
<td style="text-align:left">number</td>
<td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td>
</tr>
<tr>
<td style="text-align:left">issues</td>
<td style="text-align:left">true/false</td>
<td style="text-align:left">【可选】issues标签控制开关，默认为false</td>
</tr>
<tr>
<td style="text-align:left">link.placeholder</td>
<td style="text-align:left">【必选】link卡片外挂标签的默认图标</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">CDN.anima</td>
<td style="text-align:left">URL</td>
<td style="text-align:left">【可选】动画标签anima的依赖</td>
</tr>
<tr>
<td style="text-align:left">CDN.jquery</td>
<td style="text-align:left">URL</td>
<td style="text-align:left">【可选】issues标签依赖</td>
</tr>
<tr>
<td style="text-align:left">CDN.issues</td>
<td style="text-align:left">URL</td>
<td style="text-align:left">【可选】issues标签依赖</td>
</tr>
<tr>
<td style="text-align:left">CDN.iconfont</td>
<td style="text-align:left">URL</td>
<td style="text-align:left">【可选】iconfont标签symbol样式引入，如果不想引入，则设为false</td>
</tr>
<tr>
<td style="text-align:left">CDN.carousel</td>
<td style="text-align:left">URL</td>
<td style="text-align:left">【可选】carousel旋转相册标签鼠标拖动依赖，如果不想引入则设为false</td>
</tr>
<tr>
<td style="text-align:left">CDN.tag_plugins_css</td>
<td style="text-align:left">URL</td>
<td style="text-align:left">【可选】外挂标签样式的CSS依赖，为避免CDN缓存延迟，建议将@latest改为具体版本号</td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="配置方案-2"><p><div class="tip info"><p>源码修改配置方案适用于不想应用全部外挂标签的用户，供熟悉外挂标签原理的用户自行选择装配需要的标签文件。</p>
</div></p>
<ol>
<li>下载资源文件<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Akilarlxh/hexo-butterfly-tag-plugins-plus"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Akilarlxh&repo=hexo-butterfly-tag-plugins-plus&theme=vue&show_owner=true"/></a></li>
<li>将下载的<code>hexo-butterfly-tag-plugins-plus.zip</code>解压得到资源文件夹,下文以<code>[tag_plugins_file]</code>指代该文件夹。</li>
<li>将<code>[tag_plugins_file]\lib\scripts</code>目录下的文件放到<code>[Blogroot]\themes\butterfly\scripts\tag\</code>文件夹内。</li>
<li>将<code>[tag_plugins_file]\lib\style</code>目录下的文件放到<code>[Blogroot]\themes\butterfly\source\css\tags\</code>文件夹内。</li>
<li>修改<code>[Blogroot]\_config.butterfly.yml</code>的<code>inject</code>配置项，添加<code>CDN</code>依赖项。由于<code>issues</code>写入<code>timeline</code>和<code>site-card</code>标签要用到<code>jquery</code>，请务必根据注释指示的版本决定是否添加。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span>  <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/carousel-touch.min.js&quot;&gt;&lt;/script&gt;</span> <span class="comment">#carousel相册鼠标动作的依赖</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 自butterfly_v3.4.0+开始，主题基本实现去jquery化，需要自己添加引用，请读者根据版本自行决定是否添加这行引用。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://npm.elemecdn.com/hexo-theme-volantis@latest/source/js/issues.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">#数据集合标签issues的依赖</span></span><br></pre></td></tr></table></figure></li>
<li>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li>
<li>外挂标签使用方案请参阅下文。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs" id="text"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#text-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#text-2">样式预览</button></li><li class="tab"><button type="button" data-href="#text-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="text-2"><ol>
<li>带 <u>下划线</u> 的文本</li>
<li>带 <emp>着重号</emp> 的文本</li>
<li>带 <wavy>波浪线</wavy> 的文本</li>
<li>带 <del>删除线</del> 的文本</li>
<li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li>
<li>密码样式的文本：<psw>这里没有验证码</psw></li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tabs" id="span"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#span-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#span-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-2"><ol>
<li>字体: logo, code</li>
<li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li>
<li>大小: small, h4, h3, h2, h1, large, huge, ultra</li>
<li>对齐方向: left, center, right</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="span-3"><ul>
<li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li>
<li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><div class="tabs" id="p"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#p-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#p-3">样式预览</button></li><li class="tab"><button type="button" data-href="#p-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-2"><ol>
<li>字体: logo, code</li>
<li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li>
<li>大小: small, h4, h3, h2, h1, large, huge, ultra</li>
<li>对齐方向: left, center, right</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="p-3"><ul>
<li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li>
<li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p>
<p class='p center small'>A Wonderful Theme for Hexo</p>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h2><div class="note warning simple"><p>最新版<code>butterfly</code>标签支持引用<code>fontawesome V5</code>图标，效果上已经优于<code>volantis</code>的note标签。故不再额外引入<code>volantis的note样式</code>。<del>做样式适配好麻烦的啊，能偷懒就偷懒吧</del></p>
</div>
<div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>以下是<code>butterfly</code>主题的note写法。</p>
</div>
<div class="tabs" id="note"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#note-1">通用配置</button></li><li class="tab"><button type="button" data-href="#note-2">语法格式</button></li><li class="tab"><button type="button" data-href="#note-3">配置参数</button></li><li class="tab active"><button type="button" data-href="#note-4">样式预览</button></li><li class="tab"><button type="button" data-href="#note-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><br><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><details class="folding-tag" cyan><summary> 方法一 </summary>
              <div class='content'>
              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details>

<details class="folding-tag" blue><summary> 方法二 </summary>
              <div class='content'>
              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><details class="folding-tag" cyan><summary> 方法一 </summary>
              <div class='content'>
              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】不显示 icon</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> 方法二 </summary>
              <div class='content'>
              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table></div>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="note-4"><details class="folding-tag" cyan><summary> 方法一 </summary>
              <div class='content'>
              <ol><li><p><code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div></li><li><p><code>modern</code>样式</p><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div></li><li><p><code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div></li><li><p><code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div></li><li><p><code>no-icon</code>样式</p><div class="note no-icon simple"><p>默认 提示块标签</p></div><div class="note default no-icon simple"><p>default 提示块标签</p></div><div class="note primary no-icon simple"><p>primary 提示块标签</p></div><div class="note success no-icon simple"><p>success 提示块标签</p></div><div class="note info no-icon simple"><p>info 提示块标签</p></div><div class="note warning no-icon simple"><p>warning 提示块标签</p></div><div class="note danger no-icon simple"><p>danger 提示块标签</p></div></li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> 方法二 </summary>
              <div class='content'>
              <ol><li><p>simple样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>modern样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>flat样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li></ol><ol><li><p>disabled样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>no-icon样式</p><div class="note no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon simple"><p>2021年快到了….</p></div><div class="note pink no-icon simple"><p>小心开车 安全至上</p></div><div class="note red no-icon simple"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon simple"><p>剪刀石头布</p></div><div class="note green no-icon simple"><p>前端最讨厌的浏览器</p></div></li></ol>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><details class="folding-tag" cyan><summary> 方法一 </summary>
              <div class='content'>
              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> 方法二 </summary>
              <div class='content'>
              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly渐变背景标签</a>,自己写了个<code>tip.js</code>来渲染标签，精简了一下代码。</p>
</div>
<div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><ol>
<li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li>
<li>自定义图标: 支持fontawesome。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>default</p>
</div>
  <div class="tip info"><p>info</p>
</div>
  <div class="tip success"><p>success</p>
</div>
  <div class="tip error"><p>error</p>
</div>
  <div class="tip warning"><p>warning</p>
</div>
  <div class="tip bolt"><p>bolt</p>
</div>
  <div class="tip ban"><p>ban</p>
</div>
  <div class="tip home"><p>home</p>
</div>
  <div class="tip sync"><p>sync</p>
</div>
  <div class="tip cogs"><p>cogs</p>
</div>
  <div class="tip key"><p>key</p>
</div>
  <div class="tip bell"><p>bell</p>
</div>
  <div class="tip fa-atom"><p>自定义font awesome图标</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h2><div class="tip fa-gamepad faa-horizontal animated"><p>动态标签的实质是引用了<a href="https://github.com/l-lin/font-awesome-animation">font-awesome-animation</a>的css样式，不一定局限于tip标签，也可以是其他标签。<br>只不过这里<code>tip.js</code>是我自己写的，所以我清楚它会怎么被渲染成html，才用的这个写法。<br>可以熟读文档，使用html语言来编写其他标签类型。</p>
</div>
<div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看<a href="http://l-lin.github.io/font-awesome-animation/">font-awesome-animation文档</a></p>
<ol>
<li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li>
<li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li>
<li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li>
</ol>
</div>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">On DOM load<br>当页面加载时<br>显示动画</th>
<th style="text-align:left">On hover<br>当鼠标悬停时<br>显示动画</th>
<th style="text-align:left">On parent hover<br>当鼠标悬停<br>在父级元素时<br>显示动画</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated"></i>&nbsp;faa-wrench animated</span></td>
<td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated-hover"></i>&nbsp;faa-wrench animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i>&nbsp;faa-wrench</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-bell faa-ring animated"></i>&nbsp;faa-ring animated</span></td>
<td style="text-align:left"><span><i class="fas fa-bell faa-ring animated-hover"></i>&nbsp;faa-ring animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i>&nbsp;faa-ring</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated"></i>&nbsp;faa-horizontal animated</span></td>
<td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated-hover"></i>&nbsp;faa-horizontal animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i>&nbsp;faa-horizontal</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated"></i>&nbsp;faa-vertical animated</span></td>
<td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated-hover"></i>&nbsp;faa-vertical animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i>&nbsp;faa-vertical</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated"></i>&nbsp;faa-flash animated</span></td>
<td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i>&nbsp;faa-flash animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i>&nbsp;faa-flash</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated"></i>&nbsp;faa-bounce animated</span></td>
<td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated-hover"></i>&nbsp;faa-bounce animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i>&nbsp;faa-bounce</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated"></i>&nbsp;faa-spin animated</span></td>
<td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated-hover"></i>&nbsp;faa-spin animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i>&nbsp;faa-spin</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-plane faa-tada animated"></i>&nbsp;faa-tada animated</span></td>
<td style="text-align:left"><span><i class="fas fa-plane faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-plane faa-tada"></i>&nbsp;faa-tada</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated"></i>&nbsp;faa-pulse animated</span></td>
<td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated-hover"></i>&nbsp;faa-pulse animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i>&nbsp;faa-pulse</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated"></i>&nbsp;faa-shake animated</span></td>
<td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated-hover"></i>&nbsp;faa-shake animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i>&nbsp;faa-shake</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated"></i>&nbsp;faa-tada animated</span></td>
<td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i>&nbsp;faa-tada</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated"></i>&nbsp;faa-passing animated</span></td>
<td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated-hover"></i>&nbsp;faa-passing animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i>&nbsp;faa-passing</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated"></i>&nbsp;faa-passing-reverse animated</span></td>
<td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i>&nbsp;faa-passing-reverse animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i>&nbsp;faa-passing-reverse</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-circle faa-burst animated"></i>&nbsp;faa-burst animated</span></td>
<td style="text-align:left"><span><i class="fas fa-circle faa-burst animated-hover"></i>&nbsp;faa-burst animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i>&nbsp;faa-burst</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-star faa-falling animated"></i>&nbsp;faa-falling animated</span></td>
<td style="text-align:left"><span><i class="fas fa-star faa-falling animated-hover"></i>&nbsp;faa-falling animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i>&nbsp;faa-falling</span></td>
</tr>
<tr>
<td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated"></i>&nbsp;faa-rising animated</span></td>
<td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated-hover"></i>&nbsp;faa-rising animated-hover</span></td>
<td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i>&nbsp;faa-rising</span></td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><ol>
<li><p>On DOM load（当页面加载时显示动画）</p>
<div class="tip warning faa-horizontal animated"><p>warning</p>
</div>
<div class="tip ban faa-flash animated"><p>ban</p>
</div>
</li>
<li><p>调整动画速度。</p>
<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p>
</div>
<div class="tip ban faa-flash animated faa-slow"><p>ban</p>
</div>
</li>
<li><p>On hover（当鼠标悬停时显示动画）</p>
<div class="tip warning faa-horizontal animated-hover"><p>warning</p>
</div>
<div class="tip ban faa-flash animated-hover"><p>ban</p>
</div>
</li>
<li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p>
<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div>
<div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div>

</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><ol>
<li><p>On DOM load（当页面加载时显示动画）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调整动画速度</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>On hover（当鼠标悬停时显示动画）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><div class="tabs" id="checkbox"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#checkbox-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#checkbox-3">样式预览</button></li><li class="tab"><button type="button" data-href="#checkbox-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-2"><ol>
<li>样式: plus, minus, times</li>
<li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li>
<li>选中状态: checked</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="checkbox-3"><div class='checkbox'><input type="checkbox" />
            <p>纯文本测试</p>
            </div>
  <div class='checkbox checked'><input type="checkbox" checked="checked"/>
            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>
            </div>
  <div class='checkbox red'><input type="checkbox" />
            <p>支持自定义颜色</p>
            </div>
  <div class='checkbox green checked'><input type="checkbox" checked="checked"/>
            <p>绿色 + 默认选中</p>
            </div>
  <div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>
            <p>黄色 + 默认选中</p>
            </div>
  <div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>
            <p>青色 + 默认选中</p>
            </div>
  <div class='checkbox blue checked'><input type="checkbox" checked="checked"/>
            <p>蓝色 + 默认选中</p>
            </div>
  <div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>
            <p>增加</p>
            </div>
  <div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>
            <p>减少</p>
            </div>
  <div class='checkbox times red checked'><input type="checkbox" checked="checked"/>
            <p>叉</p>
            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><div class="tabs" id="radio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#radio-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#radio-3">样式预览</button></li><li class="tab"><button type="button" data-href="#radio-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-2"><ol>
<li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li>
<li>选中状态: checked</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="radio-3"><div class='checkbox'><input type="radio" />
            <p>纯文本测试</p>
            </div>
  <div class='checkbox checked'><input type="radio" checked="checked"/>
            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>
            </div>
  <div class='checkbox red'><input type="radio" />
            <p>支持自定义颜色</p>
            </div>
  <div class='checkbox green'><input type="radio" />
            <p>绿色</p>
            </div>
  <div class='checkbox yellow'><input type="radio" />
            <p>黄色</p>
            </div>
  <div class='checkbox cyan'><input type="radio" />
            <p>青色</p>
            </div>
  <div class='checkbox blue'><input type="radio" />
            <p>蓝色</p>
            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h2><div class="tip fa-wrench"><p>插件版v1.0.16以后，为避免与Butterfly_v4.0+版本中的timeline外挂标签冲突，已经移除了插件内的timeline外挂标签，请低于Butterfly_v4.0的用户升级主题或安装1.0.15版本的外挂标签插件，或者自行添加timeline.js和timeline.styl文件至对应文件夹。请使用了原有timeline外挂标签的用户受累替换语法格式。<br>Butterfly_v4.0+自带的timeline外挂标签样式更加好看。语法语意也更加清晰。</p>
</div>
<div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#timeline-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#timeline-2">参数配置</button></li><li class="tab"><button type="button" data-href="#timeline-3">样式预览</button></li><li class="tab"><button type="button" data-href="#timeline-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="timeline-2"><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">标题/时间线</td>
</tr>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left"><code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-3"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p>
</div></div><div class='timeline-item-content'><p>不需要额外处理。</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p>
</div></div><div class='timeline-item-content'><ol>
<li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li>
<li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li>
<li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li>
</ol>
</div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#link-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#link-2">样式预览</button></li><li class="tab"><button type="button" data-href="#link-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="link-2"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="按钮-btns"><a href="#按钮-btns" class="headerlink" title="按钮 btns"></a>按钮 btns</h2><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p><code>Volantis</code>的按钮使用的是<code>btn</code>和<code>btns</code>标签。<code>btns</code>和<code>butterfly</code>的<code>button</code>不冲突，但是<code>btn</code>会被强制渲染，导致部分参数失效,而且<code>btn</code>的效果还是<code>butterfly</code>的<code>button</code>更好看些。所以就只适配了<code>btns</code>。</p>
</div>
<div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#btn-1">标签语法</button></li><li class="tab"><button type="button" data-href="#btn-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#btn-3">样式预览</button></li><li class="tab"><button type="button" data-href="#btn-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-2"><ol>
<li>圆角样式：rounded, circle</li>
<li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt;</code>和<code>&lt;p&gt;描述文字&lt;/p&gt;</code></li>
<li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">wide</td>
<td style="text-align:left">宽一点的按钮</td>
</tr>
<tr>
<td style="text-align:left">fill</td>
<td style="text-align:left">填充布局，自动铺满至少一行，多了会换行</td>
</tr>
<tr>
<td style="text-align:left">center</td>
<td style="text-align:left">居中，按钮之间是固定间距</td>
</tr>
<tr>
<td style="text-align:left">around</td>
<td style="text-align:left">居中分散</td>
</tr>
<tr>
<td style="text-align:left">grid2</td>
<td style="text-align:left">等宽最多2列，屏幕变窄会适当减少列数</td>
</tr>
<tr>
<td style="text-align:left">grid3</td>
<td style="text-align:left">等宽最多3列，屏幕变窄会适当减少列数</td>
</tr>
<tr>
<td style="text-align:left">grid4</td>
<td style="text-align:left">等宽最多4列，屏幕变窄会适当减少列数</td>
</tr>
<tr>
<td style="text-align:left">grid5</td>
<td style="text-align:left">等宽最多5列，屏幕变窄会适当减少列数</td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="btn-3"><ol>
<li><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p>
<div class="btns circle grid5">
         <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
       </div>
</li>
<li><p>或者含有图标的按钮：</p>
<div class="btns rounded grid5">
         <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a>
<a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>
       </div>
</li>
<li><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p>
<div class="btns circle center grid5">
         <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>
<i class='fab fa-apple'></i>
<b>心率管家</b>
<p class='p red'>专业版</p>
<img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'>
</a>
<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>
<i class='fab fa-apple'></i>
<b>心率管家</b>
<p class='p green'>免费版</p>
<img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'>
</a>
       </div>

</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-4"><ol>
<li>如果需要显示类似「团队成员」之类的一组含有头像的链接：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li>
<li>或者含有图标的按钮：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li>
<li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="github卡片-ghcard"><a href="#github卡片-ghcard" class="headerlink" title="github卡片 ghcard"></a>github卡片 ghcard</h2><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>ghcard使用了<code>github-readme-stats</code>的API，支持直接使用markdown语法来写。</p>
</div>
<div class="tabs" id="ghcard"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghcard-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghcard-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghcard-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghcard-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-2"><p>更多参数可以参考：<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/anuraghazra/github-readme-stats"><img src="https://github-readme-stats.vercel.app/api/pin/?username=anuraghazra&repo=github-readme-stats&show_owner=true"/></a><br>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数名</th>
<th style="text-align:left">取值</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">hide</td>
<td style="text-align:left">stars,commits,prs,issues,contribs</td>
<td style="text-align:left">隐藏指定统计</td>
</tr>
<tr>
<td style="text-align:left">count_private</td>
<td style="text-align:left">true</td>
<td style="text-align:left">将私人项目贡献添加到总提交计数中</td>
</tr>
<tr>
<td style="text-align:left">show_icons</td>
<td style="text-align:left">true</td>
<td style="text-align:left">显示图标</td>
</tr>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left">请查阅<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td>
<td style="text-align:left">主题</td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghcard-3"><ol>
<li>用户信息卡片</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a></th>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>仓库信息卡片</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-4"><ol>
<li><p>用户信息卡片</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>
</li>
<li><p>仓库信息卡片</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="github徽标-ghbdage"><a href="#github徽标-ghbdage" class="headerlink" title="github徽标 ghbdage"></a>github徽标 ghbdage</h2><div class="tip cogs"><p>关于ghbdage参数的更多具体用法可以参看站内教程：<a href="/posts/e87ad7f8">添加github徽标</a></p>
</div>
<div class="tabs" id="ghbdage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghbdage-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghbdage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghbdage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghbdage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-2"><ol>
<li><code>left</code>：徽标左边的信息，必选参数。</li>
<li><code>right</code>: 徽标右边的信息，必选参数，</li>
<li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li>
<li><code>color</code>：徽标右边的颜色，可选参数。</li>
<li><code>link</code>：指向的链接，可选参数。</li>
<li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li>
<li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghbdage-3"><p>  <div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p>
</div></p>
<ol>
<li>基本参数<br><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></li>
<li>信息参数<br><br><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></li>
<li>拓展参数<br><br><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=40"></object>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=40&logoColor=violet"></object>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-4"><p>  <div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p>
</div></p>
<ol>
<li>基本参数,定义徽标左右文字和图标<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure></li>
<li>信息参数，定义徽标右侧内容背景色，指向链接<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure></li>
<li>拓展参数，支持shields的API的全部参数内容<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><div class="tabs" id="site"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#site-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#site-2">样式预览</button></li><li class="tab"><button type="button" data-href="#site-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a>
<a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h2><div class="tabs" id="inlineimage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#inlineimage-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#inlineimage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#inlineimage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-2"><ol>
<li>高度：height=20px</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p>
<p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><div class="tabs" id="image"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#image-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#image-3">样式预览</button></li><li class="tab"><button type="button" data-href="#image-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-2"><ol>
<li>图片宽度高度：width=300px, height=32px</li>
<li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li>
<li>占位背景色：bg=#f2f2f2</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="image-3"><ol>
<li><p>添加描述：</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>
</li>
<li><p>指定宽度：</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>
</li>
<li><p>指定宽度并添加描述：</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>
</li>
<li><p>设置占位背景色：</p>
<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div>

</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-4"><ol>
<li><p>添加描述：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li>
<li>指定宽度：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure></li>
<li>指定宽度并添加描述：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li>
<li>设置占位背景色：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#audio-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#audio-2">样式预览</button></li><li class="tab"><button type="button" data-href="#audio-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#video-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#video-3">样式预览</button></li><li class="tab"><button type="button" data-href="#video-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-2"><ol>
<li>对其方向：left, center, right</li>
<li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="video-3"><ol>
<li><p>100%宽度</p>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
</li>
<li><p>50%宽度</p>
<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>
</li>
<li><p>25%宽度</p>
<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>

</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-4"><ol>
<li><p>100%宽度</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>50%宽度</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>25%宽度</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="相册-gallery"><a href="#相册-gallery" class="headerlink" title="相册 gallery"></a>相册 gallery</h2><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>自带<code>gallery</code>相册，而且会根据图片大小自动调整排版，效果比<code>Volantis</code>的<code>gallery</code>更好，故不再收录<code>Volantis</code>的<code>gallery</code>标签。</p>
</div>
<div class="note simple"><p>以下为<code>Butterfly</code>自带的<code>gallery</code>标签写法。相册图库和相册配合使用。</p>
</div>
<div class="tabs" id="gallery"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#gallery-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#gallery-3">样式预览</button></li><li class="tab"><button type="button" data-href="#gallery-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol>
<li><p>gallerygroup 相册图库</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>gallery 相册</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-2"><ul>
<li>gallerygroup 相册图库</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数名</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">图库名字</td>
</tr>
<tr>
<td style="text-align:left">description</td>
<td style="text-align:left">图库描述</td>
</tr>
<tr>
<td style="text-align:left">link</td>
<td style="text-align:left">链接到对应相册的地址</td>
</tr>
<tr>
<td style="text-align:left">img-url</td>
<td style="text-align:left">图库封面</td>
</tr>
</tbody>
</table>
</div>
<div class="note info simple"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p>
</div>

<ul>
<li>gallery 相册<br>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="gallery-3"><ul>
<li>gallerygroup 相册图库</li>
</ul>
<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/1.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">MC</div>
  <p>在Rikkaの六花服务器里留下的足迹</p>
  <a href='/gallery/MC/'></a>
  </figcaption>
  </figure>


  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">Gundam</div>
  <p>哦咧哇gundam哒！</p>
  <a href='/gallery/Gundam/'></a>
  </figcaption>
  </figure>


  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/20200907113116651.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">I-am-Akilar</div>
  <p>某种意义上也算自拍吧</p>
  <a href='/gallery/I-am-Akilar/'></a>
  </figcaption>
  </figure>

</div>


<ul>
<li>gallery 相册</li>
</ul>
<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>
          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-4"><div class="note info simple"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个gallery的page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问MC相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p>
</div>

<ol>
<li><p>gallerygroup 相册图库</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://npm.elemecdn.com/akilar-candyassets/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://npm.elemecdn.com/akilar-candyassets/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>gallery 相册</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>虽然也有内置折叠框<code>hideToggle</code>标签，但是<code>Volantis</code>的<code>folding</code>折叠框更好看一些。</p>
</div>
<div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol>
<li>颜色：blue, cyan, green, yellow, red</li>
<li>状态：状态填写 open 代表默认打开。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>
              <div class='content'>
              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>
              </div>
            </details>

<details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>
              <div class='content'>
              <p>这是一个默认打开的折叠框。</p>
              </div>
            </details>

<details class="folding-tag" green><summary> 查看代码测试 </summary>
              <div class='content'>
              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br></pre></td></tr></table></figure>
              </div>
            </details>

<details class="folding-tag" yellow><summary> 查看列表测试 </summary>
              <div class='content'>
              <ul><li>haha</li><li>hehe</li></ul>
              </div>
            </details>

<details class="folding-tag" red><summary> 查看嵌套测试 </summary>
              <div class='content'>
              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>的<code>tab</code>标签和<code>Volantis</code>的<code>tab</code>标签都是移值自<code>NexT</code>主题，所以写法和效果一模一样。</p>
</div>
<div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol>
<li>Unique name :<ul>
<li>选项卡块标签的唯一名称，不带逗号。</li>
<li>将在#id中用作每个标签及其索引号的前缀。</li>
<li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li>
<li>仅当前帖子/页面的URL必须是唯一的！</li>
</ul>
</li>
<li>[index]:<ul>
<li>活动选项卡的索引号。</li>
<li>如果未指定，将选择第一个标签（1）。</li>
<li>如果index为-1，则不会选择任何选项卡。</li>
<li>可选参数。</li>
</ul>
</li>
<li>[Tab caption]:<ul>
<li>当前选项卡的标题。</li>
<li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li>
<li>如果未指定标题，但指定了图标，则标题将为空。</li>
<li>可选参数。</li>
</ul>
</li>
<li>[@icon]:<ul>
<li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li>
<li>可以指定带空格或不带空格；</li>
<li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li>
<li>可选参数。</li>
</ul>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p>
</div>

<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note primary simple"><p>Demo 2 - 预设选择tabs</p>
</div>
<div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note primary simple"><p>Demo 3 - 没有预设值</p>
</div>
<div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>
</div>
<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><p><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>Demo 2 - 预设选择tabs</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>Demo 3 - 没有预设值</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="数据集合-issues"><a href="#数据集合-issues" class="headerlink" title="数据集合 issues"></a>数据集合 issues</h2><script defer src="https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js"></script>
<script defer src="https://npm.elemecdn.com/hexo-theme-volantis@4.3.1/source/js/issues.min.js"></script>

<div class="tabs" id="issues"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#issues-1">标签语法</button></li><li class="tab"><button type="button" data-href="#issues-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#issues-3">样式预览</button></li><li class="tab"><button type="button" data-href="#issues-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="issues-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-2"><p><span class='p center logo large'>type(类型)：</span><br>根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有：</p>
<ol>
<li>时间轴<code>timeline</code>: 解析成<code>timeline</code>标签，<code>issue</code>的标题对应<code>timeline</code>的时间，<code>issue</code>的内容对应<code>timeline</code>的内容。</li>
<li><p>网站卡片<code>sites</code>: 解析成<code>sites</code>标签，需要有<code>JSON</code>代码块,各参数对应<code>sites</code>标签参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;「keywords」&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">网站名称</td>
</tr>
<tr>
<td style="text-align:left">screenshot</td>
<td style="text-align:left">网站预览图</td>
</tr>
<tr>
<td style="text-align:left">url</td>
<td style="text-align:left">网站链接，需要添加<br><code>https://</code>协议组成完整域名。<br>否则可能被识别成站点相对路径。</td>
</tr>
<tr>
<td style="text-align:left">avatar</td>
<td style="text-align:left">站长头像</td>
</tr>
<tr>
<td style="text-align:left">「keywords」</td>
<td style="text-align:left">分组依据，<br>未必要叫「keywords」，<br>详见下文group(分组)</td>
</tr>
</tbody>
</table>
</div>
<p><span class='p center logo large'>api(接口)：</span><br>url为可以调的通的API，例如：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active</span><br><span class="line">api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active</span><br></pre></td></tr></table></figure></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://gitee.com/api/v5/">https://gitee.com/api/v5/</a></td>
<td style="text-align:left">gitee仓库的api</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://api.github.com/">https://api.github.com/</a></td>
<td style="text-align:left">github仓库的api</td>
</tr>
<tr>
<td style="text-align:left">repos/xaoxuu/friends/issues</td>
<td style="text-align:left">repos/用户名/仓库名/issues</td>
</tr>
<tr>
<td style="text-align:left">sort=updated&amp;state=open</td>
<td style="text-align:left">界定哪些类型的<code>issues</code>会<br>被读取过来渲染成相应的标签</td>
</tr>
<tr>
<td style="text-align:left">page=1&amp;per_page=100</td>
<td style="text-align:left">读取前100条issues</td>
</tr>
<tr>
<td style="text-align:left">labels=active</td>
<td style="text-align:left">控制默认的issue不显示，<br>只有自己审核通过<br>添加了active标签之后才会显示</td>
</tr>
</tbody>
</table>
</div>
<p><span class='p center logo large'>group(分组)：</span><br><code>sites</code>类型的<code>issues</code>默认不分组，如果需要分组，可指定分组依据<code>「keywords」</code>，和分组白名单<code>「value1」</code>、<code>「value2」</code>等，例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">group=version:v4,v3,v2</span></span><br><span class="line"><span class="comment"># 此处的version就是上文中的「keywords」</span></span><br></pre></td></tr></table></figure>
<p>这个参数的作用就是，筛选出<code>JSON</code>中包含<code>&quot;version&quot;: &quot;v4&quot;</code>或者<code>&quot;version&quot;:&quot;v3&quot;</code>或者<code>&quot;version&quot;: &quot;v2&quot;</code>的数据，并分组显示。</p>
<p><span class='p center logo large'>仓库ISSUES模板配置</span></p>
<details class="folding-tag" green><summary> Github仓库配置方案 </summary>
              <div class='content'>
              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.github\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line"><span class="section">about: 请根据指示规范填写友链格式。</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active label</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/d63b5c0c.png" alt="新建label用于控制审核结果"></p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/6311f960.png" alt="配置名称描述颜色"></p></li><li><p>提交示例</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/f87ebfd3.png" alt="填写规范"><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/efdfc67d.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>
              </div>
            </details>

<details class="folding-tag" yellow><summary> Gitee仓库配置方案 </summary>
              <div class='content'>
              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.gitee\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line"><span class="section">about: 请根据指示规范填写友链格式。</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active标签</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/7522911b.png" alt="新建标签用于控制审核结果"></p></li></ol><ol><li><p>提交示例</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/dd334eea.png" alt="填写规范"><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/72d06ae1.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="issues-3"><ol>
<li><p>时间轴标签<code>timeline</code>渲染<br>对应的仓库<code>issues</code>链接:</p>
<div class="tag link"><a class="link-card" title="xaoxuu/timeline" href="https://gitee.com/xaoxuu/timeline/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/timeline</p><p class="url">https://gitee.com/xaoxuu/timeline/issues</p></div></a></div>

<div class="issues-api timeline"api="https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&creator=xaoxuu&sort=created&direction=desc&page=1&per_page=100"></div>
</li>
<li><p>网站卡片标签<code>sites</code>渲染</p>
<ul>
<li><p>gitee仓库示例</p>
<p>对应的仓库<code>issues</code>链接:</p>
<div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://gitee.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://gitee.com/xaoxuu/friends/issues</p></div></a></div>

<p>渲染后的标签：</p>
<div class="issues-api sites"api="https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div>
</li>
<li><p>github仓库示例</p>
<p>对应的仓库<code>issues</code>链接:</p>
<div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://github.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://github.com/xaoxuu/friends/issues</p></div></a></div>

<p>渲染后的标签：</p>
<div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div>
</li>
</ul>
</li>
<li><p>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：<br>对应的仓库<code>issues</code>链接:</p>
<div class="tag link"><a class="link-card" title="如何参与项目" href="https://github.com/volantis-x/examples/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">如何参与项目</p><p class="url">https://github.com/volantis-x/examples/issues</p></div></a></div>

<p>渲染后的标签：</p>
<div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div>

</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-4"><ol>
<li><p>时间轴标签<code>timeline</code>渲染</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;sort=created&amp;direction=desc&amp;page=1&amp;per<span class="emphasis">_page=100 %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>网站卡片标签<code>sites</code>渲染</p>
<ul>
<li><p>gitee仓库示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>github仓库示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="诗词标签-poem"><a href="#诗词标签-poem" class="headerlink" title="诗词标签 poem"></a>诗词标签 poem</h2><div class="tabs" id="poem"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#poem-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#poem-3">样式预览</button></li><li class="tab"><button type="button" data-href="#poem-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="poem-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-2"><ol>
<li>title：诗词标题</li>
<li>author：作者，可以不写</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="poem-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？<br>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="阿里图标-icon"><a href="#阿里图标-icon" class="headerlink" title="阿里图标 icon"></a>阿里图标 icon</h2><div class="tip cogs"><p>本标签的图标需要自己额外引入阿里矢量图标库的样式，具体引入方案请移步：<a href="/posts/d2ebecef/">Hexo引入阿里矢量图标库</a></p>
</div>
<div class="tabs" id="icon示例"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#icon示例-1">标签语法</button></li><li class="tab"><button type="button" data-href="#icon示例-2">参数释义</button></li><li class="tab active"><button type="button" data-href="#icon示例-3">样式预览</button></li><li class="tab"><button type="button" data-href="#icon示例-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="icon示例-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-2"><ol>
<li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li>
<li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="icon示例-3"><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg></th>
<th style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></th>
<th style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg></th>
<th style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></th>
<th style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg></th>
<th style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></td>
</tr>
<tr>
<td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></td>
</tr>
<tr>
<td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg></td>
<td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="特效标签wow"><a href="#特效标签wow" class="headerlink" title="特效标签wow"></a>特效标签wow</h2><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>特效标签的静态资源未添加在本帖的配置内容中（因为多为cdn配置），请移步站内教程完成相关配置：</p>
<div class="tag link"><a class="link-card" title="使用wowjs给博客添加动画效果" href="/posts/abab51cf/"><div class="left"><img src="https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">使用wowjs给博客添加动画效果</p><p class="url">/posts/abab51cf/</p></div></a></div></div>
<div class="tabs" id="animate"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#animate-1">标签语法</button></li><li class="tab"><button type="button" data-href="#animate-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#animate-3">样式预览</button></li><li class="tab"><button type="button" data-href="#animate-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="animate-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-2"><ol>
<li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li>
<li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li>
<li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li>
<li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li>
<li><code>iteration</code>: 选填项，动画重复的次数</li>
</ol>
<div class="note warning simple"><p>注意，后面四个虽然是选填项，但是当有跨位选填时，次序不能乱。详见示例。<br>支持嵌套其他外挂标签。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="animate-3"><ol>
<li><code>flip</code>动画效果。<div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' >  <div class="note green icon-padding modern"><i class="note-icon fas fa-fan"></i><p><code>flip</code>动画效果。</p>
</div>
</div></li>
<li><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。<div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' >  <div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p>
</div>
</div></li>
<li><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。<div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' >  <div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p>
</div>
</div></li>
<li><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。<div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' >  <div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p>
</div>
</div>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-4"><ol>
<li><code>flip</code>动画效果。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__flip %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note green &#x27;fas fa-fan&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`flip`动画效果。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。此处注意不用的参数位置要留空，用逗号间隔。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="进度条-progress"><a href="#进度条-progress" class="headerlink" title="进度条 progress"></a>进度条 progress</h2><div class="note info morden simple"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p>
</div>
<div class="tabs" id="progress"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#progress-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#progress-3">样式预览</button></li><li class="tab"><button type="button" data-href="#progress-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="progress-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-2"><p><code>width</code>: 0到100的阿拉伯数字<br><code>color</code>: 颜色，取值有<span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span><br><code>text</code>:进度条上的文字内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="progress-3"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="注释-notation"><a href="#注释-notation" class="headerlink" title="注释 notation"></a>注释 notation</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>label</code>: 注释词汇<br><code>text</code>: 悬停显示的注解内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="气泡注释-bubble"><a href="#气泡注释-bubble" class="headerlink" title="气泡注释 bubble"></a>气泡注释 bubble</h2><div class="tabs" id="bubble"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#bubble-1">标签语法</button></li><li class="tab"><button type="button" data-href="#bubble-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#bubble-3">样式预览</button></li><li class="tab"><button type="button" data-href="#bubble-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="bubble-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-2"><p><code>content</code>: 注释词汇<br><code>notation</code>: 悬停显示的注解内容<br><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="bubble-3"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex 布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;"> Flex 是 Flexible Box 的缩写，意为弹性布局 "，用来为盒状模型提供最大的灵活性"</span></span>，<span class="bubble-content">transform 变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;"> transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation 的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线 (Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content"> clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path 属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="引用文献-reference"><a href="#引用文献-reference" class="headerlink" title="引用文献 reference"></a>引用文献 reference</h2><div class="tabs" id="bubble"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#bubble-1">标签语法</button></li><li class="tab"><button type="button" data-href="#bubble-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#bubble-3">样式预览</button></li><li class="tab"><button type="button" data-href="#bubble-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="bubble-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-2"><div class="tip ban"><p>考虑到锚点跳转的特性，不建议您将引用出处标签referfrom写在常隐外挂标签(如folding、tab、hideToggle)中，这样能有效避免跳转失败。</p>
</div>

<ol>
<li><p>referto 引用上标<br><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转<br><code>literature</code>: 引用的参考文献名称</p>
</li>
<li><p>referfrom 引用出处<br><code>id</code>: 序号内容，需与referto标签的id对应才能实现跳转<br><code>literature</code>: 引用的参考文献名称<br><code>url</code>: 引用的参考文献链接，可省略</p>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="bubble-3"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]" data-pjax-state="">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]" data-pjax-state="">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]" data-pjax-state="">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p>
<p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]" data-pjax-state="">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]" data-pjax-state="">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]" data-pjax-state="">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]" data-pjax-state="">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]" data-pjax-state="">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]" data-pjax-state="">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p>


<div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="旋转相册-carousel"><a href="#旋转相册-carousel" class="headerlink" title="旋转相册 carousel"></a>旋转相册 carousel</h2><div class="tip warning"><p>旋转相册标签与fancybox灯箱存在兼容性bug，若发现旋转相册呈扁平状，请关闭fancybox或换用medium_zoom。</p>
</div>
<div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% carousel [Id] , [name] %&#125;</span><br><span class="line">![](<span class="link">/img/1.jpg</span>)</span><br><span class="line">![](<span class="link">/img/2.jpg</span>)</span><br><span class="line">![](<span class="link">/img/3,jpg</span>)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>Id</code>: 相册唯一ID，用于监测相册鼠标动作。禁止使用中文。同一页内不得出现相同ID的carousel相册。<br><code>name</code>: 相册中间显示的内容，建议用英文单引号包裹。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><p><div id="SF" class="carousel"></p>
<p><div id="SF-drag-container" class="drag-container"></p>
<p><div id="SF-spin-container" class="spin-container"><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110444226.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110525753.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110600751.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110621554.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110637459.png" ><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110654150.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110707916.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110719787.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110731118.png"></p>
<p><p>strike freedom</p></p>
<p><div id="SF-carousel-ground" class="carousel-ground" style="width: 720px; height: 720px;"></div></div><script type="text/javascript">carouselinit('SF');</script></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% carousel &#x27;SF&#x27;,&#x27;strike freedom&#x27; %&#125;</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110444226.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110525753.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110600751.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110621554.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110637459.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110654150.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110707916.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110719787.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110731118.png</span>)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>2023届秋招提前批互联网招聘信息汇总</title>
    <url>/2022/08/27/%E6%B1%82%E8%81%8C/2023%E5%B1%8A%E7%A7%8B%E6%8B%9B%E6%8F%90%E5%89%8D%E6%89%B9%E4%BA%92%E8%81%94%E7%BD%91%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>转自<a href="https://leetcode.cn/circle/discuss/Odx9Uj/">https://leetcode.cn/circle/discuss/Odx9Uj/</a> 2023届秋招日程内推表<a href="https://docs.qq.com/sheet/DY0VGV3dSVExtTkVQ?tab=BB08J2">https://docs.qq.com/sheet/DY0VGV3dSVExtTkVQ?tab=BB08J2</a> 2023届秋招内推表<a href="https://docs.qq.com/doc/DY2NwVFN2dlROYkpS">https://docs.qq.com/doc/DY2NwVFN2dlROYkpS</a> Java常考面试题<a href="https://mp.weixin.qq.com/s/Bs9CIdowt8iUbaaSwwxUWA">https://mp.weixin.qq.com/s/Bs9CIdowt8iUbaaSwwxUWA</a> 手把手教你写简历（附简历模板）<a href="https://mp.weixin.qq.com/s/5LK8YNIJXo5WdLC1jq82Kw">https://mp.weixin.qq.com/s/5LK8YNIJXo5WdLC1jq82Kw</a> 一个收录了几百本计算机经典PDF的仓库<a href="https://gitee.com/cosen1024/awesome-cs-books">https://gitee.com/cosen1024/awesome-cs-books</a> 内推总结<a href="https://zhuanlan.zhihu.com/p/554568985">https://zhuanlan.zhihu.com/p/554568985</a><br>秋招信息<a href="https://docs.qq.com/doc/DSWVnUkpaZHRXZ2Jy?groupUin=xIoZNvKLxLzthEf0%252Bf%252Bn2Q%253D%253D&amp;ADUIN=2932437988&amp;ADSESSION=1665142432&amp;ADTAG=CLIENT.QQ.5929_.0&amp;ADPUBNO=27255&amp;jumpuin=2932437988">https://docs.qq.com/doc/DSWVnUkpaZHRXZ2Jy?groupUin=xIoZNvKLxLzthEf0%252Bf%252Bn2Q%253D%253D&amp;ADUIN=2932437988&amp;ADSESSION=1665142432&amp;ADTAG=CLIENT.QQ.5929_.0&amp;ADPUBNO=27255&amp;jumpuin=2932437988</a></p>
]]></content>
      <categories>
        <category>秋招</category>
      </categories>
      <tags>
        <tag>秋招</tag>
      </tags>
  </entry>
  <entry>
    <title>360笔试</title>
    <url>/2022/08/27/%E6%B1%82%E8%81%8C/360%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2022年8月27日14:00~15:00</p>
<blockquote>
<p>选择题40道，一道1.5分，单多选混杂但有标明。 编程题两道。</p>
</blockquote>
<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><strong>时间限制： 1000MS</strong> <strong>内存限制： 65536KB</strong> <strong>题目描述：</strong> <strong>在一张透明的纸上，用笔写下一个字符串。然后将纸翻面，请你判断正面和背面看到的字符串是否一样。 请注意，字符串在正反面看上去一样，必须要求每个字符是左右对称的，比如’W’字符是左右对称的，而’N’不是。</strong> <strong>输入描述</strong> <strong>输入包含多组数据，每组数据一行，包含一个全由大写字母构成的字符串S。</strong> <strong>输出描述</strong> <strong>如果正面和背面看到的字符串一样。输出YES，否则输出NO</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include</span><br><span class="line">#include</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">map&lt;char, int&gt; m;</span><br><span class="line">m[&#x27;A&#x27;] = 1;</span><br><span class="line">m[&#x27;H&#x27;] = 1;</span><br><span class="line">m[&#x27;I&#x27;] = 1;</span><br><span class="line">m[&#x27;M&#x27;] = 1;</span><br><span class="line">m[&#x27;O&#x27;] = 1;</span><br><span class="line">m[&#x27;T&#x27;] = 1;</span><br><span class="line">m[&#x27;U&#x27;] = 1;</span><br><span class="line">m[&#x27;V&#x27;] = 1;</span><br><span class="line">m[&#x27;W&#x27;] = 1;</span><br><span class="line">m[&#x27;X&#x27;] = 1;</span><br><span class="line">m[&#x27;Y&#x27;] = 1;</span><br><span class="line">while (1) &#123;</span><br><span class="line">string s;</span><br><span class="line">if (cin &gt;&gt; s) &#123;</span><br><span class="line">int flag = 0;</span><br><span class="line">for (int i = 0;i &lt; s.length();i++) &#123;</span><br><span class="line">if (!m.count(s[i])) &#123;</span><br><span class="line">flag = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">if (s[i] != s[s.length() - 1 - i]) &#123;</span><br><span class="line">flag = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag == 1)</span><br><span class="line">cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;</span><br><span class="line">else</span><br><span class="line">cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p><strong>时间限制： 1000MS</strong> <strong>内存限制： 65536KB</strong> <strong>题目描述：</strong> <strong>最近一款吃鸡类型的游戏火爆全球。在组队模式下，你可以邀请自己的好友组建自己的小队，并选择是否填充（是否同意和非好友游玩），然后加入游戏。现在有A个单人队伍，B个双人队伍，C个三人队伍，D个四人队伍，并且全都同意填充，但已有的多人队伍的队员不能被拆开填充到其他队伍，请问最多能组成多少个四人队伍。</strong> <strong>输入描述</strong> <strong>第一行一个正整数T，表示数据组数。（1≤T≤100）</strong> <strong>接下来T行，每行四个非负整数，A，B，C，D。（0≤A, B, C, D≤150）</strong> <strong>输出描述</strong> <strong>共T行，每行输出一个队伍数。</strong></p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">for (int i = 0;i &lt; n;i++) &#123;</span><br><span class="line">int A, B, C, D;</span><br><span class="line">cin &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; D;</span><br><span class="line">int ans = 0;</span><br><span class="line">ans += D;</span><br><span class="line">if (A &gt;= C) &#123;</span><br><span class="line">ans += C;</span><br><span class="line">A -= C;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">ans += A;</span><br><span class="line">A = 0;</span><br><span class="line">C -= A;</span><br><span class="line">&#125;</span><br><span class="line">ans += B / 2;</span><br><span class="line">if (B % 2 == 1 &amp;&amp; A &gt;= 2) &#123;</span><br><span class="line">ans += 1;</span><br><span class="line">A -= 2;</span><br><span class="line">&#125;</span><br><span class="line">ans += A / 4;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>CVTE笔试</title>
    <url>/2022/09/01/%E6%B1%82%E8%81%8C/cvte%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/8/31 19:00~20:30 不可修改之前做过的题目，白板编程 单多选混杂20道 编程题两道 第一题：降序排列输入数据并返回前百分之三十中最小的数。 第二题：输入IPV4地址（大于两个），返回子网最大掩码长度（1的个数最多），使IP处于同一子网中。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>伴鱼笔试</title>
    <url>/2022/09/23/%E6%B1%82%E8%81%8C/%E4%BC%B4%E9%B1%BC%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/23 16:00 四道编程题 一、简单题。给定十以内的正整数n，m；求从一到n选任意个 数字 ，使这些数字和为m；按字典序输出所有组合 二、简单题。输入两个有序序列，输出一个有序序列 三、中等题。求矩阵从左上到右下最小路径和 四、困难题。给定长度小于100000的字符串A,B，求出将B插入A后所得字符串为回文的方案数</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>剑心互娱笔试</title>
    <url>/2022/09/27/%E6%B1%82%E8%81%8C/%E5%89%91%E5%BF%83%E4%BA%92%E5%A8%B1%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/27 00:00~2022/9/28 23:55 两小时随到随答 四道编程题 一、赛车游戏，给定uint_8数组，0代表空位，1代表障碍，初始可从第一行任意空白位置，可以任意向左右空白移动，若任意移动后下一行都不为0，则游戏失败，返回可到达最大行数。 二、水池蓄水，给定水池容量m，进出水口会在给定时间切换状态，进水口每分钟进水m1，每t1分钟切换状态，出水口每分钟出水m2，每t2分钟切换状态，若同时打开则为m1-m2，初始水池为空，水池最多容纳m，初始进出水口均为打开，求t分钟后水池中的水有多少。AC 三、给定三角形三个顶点坐标，求坐标系中和三角形有相交的格数（1*1） 四、有1-9种积木及四种收纳盒 1号收纳盒：4个1号格子，1个2号格子，1个3号格子 价值10元 2号收纳盒：1个6号格子，1个2号格子，1个1号格子 价值9元 3号收纳盒：1个4号格子，1个5号格子 价值8元 4号收纳盒：1个9号格子 价值7元 给定积木数量n，及积木种类，每个积木只能放入编号不小于它的格子中，每个格子只能放一块积木，求收集全部积木所需最小花费。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>网站美化</title>
    <url>/2022/10/04/%E5%BB%BA%E7%AB%99/%E7%BD%91%E7%AB%99%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><blockquote>
<p>Hexo 5.0.0 以上版本支持通过npm安装butterfly主题</p>
<p>通过npm安装会在node_modules中生成主题文件夹</p>
<p><code>node_modules\hexo-theme-butterfly\</code></p>
</blockquote>
<p>在Hexo根目录执行<br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i hexo<span class="literal">-theme-butterfly</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>升级方法，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm update hexo-theme-butterfly</span><br></pre></td></tr></table></figure>
</blockquote>
<p>修改根目录下的_config.yml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></p>
<h2 id="大神魔改看板娘（会说话，能换装）"><a href="#大神魔改看板娘（会说话，能换装）" class="headerlink" title="大神魔改看板娘（会说话，能换装）"></a>大神魔改看板娘（会说话，能换装）</h2><p>在<code>node_modules\hexo-theme-butterfly\source\</code>目录，执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevenjoezhang/live2d-widget.git live2d-widget</span><br></pre></td></tr></table></figure></p>
<p>在<code>node_modules\hexo-theme-butterfly\source\live2d-widget\autoload.js</code>，打开<code>autoload.js</code>，修改<br><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;;</span></span><br><span class="line"><span class="addition">+ const live2d_path = &quot;/live2d-widget/&quot;;</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>_config.butterfly.yml</code>中，添加<br><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">    # Inject</span><br><span class="line">    # Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line">    # 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">    inject:</span><br><span class="line">      head:</span><br><span class="line">        # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span><br><span class="line">      bottom:</span><br><span class="line">        # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br><span class="line"><span class="addition">+       - &lt;script defer src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>为防止主题更新需要重新配置等麻烦，在<code>hexo根目录\source</code> 新建 <code>js</code> <code>css</code> 文件夹，之后新加的js/css文件一律放在该位置。上述操作需做以下调整：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ const live2d_path = &quot;/js/live2d-widget/&quot;;</span><br><span class="line">+ - &lt;script defer src=&quot;/js/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="页脚计时器"><a href="#页脚计时器" class="headerlink" title="页脚计时器"></a>页脚计时器</h2><p>在Hexo根目录执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure><br>在<code>_config.butterfly.yml</code>中添加<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer_beautify</span></span><br><span class="line"><span class="comment"># 页脚计时器：[Native JS Timer](https://akilar.top/posts/b941af/)</span></span><br><span class="line"><span class="comment"># 页脚徽标：[Add Github Badge](https://akilar.top/posts/e87ad7f8/)</span></span><br><span class="line"><span class="attr">footer_beautify:</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="literal">true</span> <span class="comment"># 计时器开关</span></span><br><span class="line">    <span class="attr">bdage:</span> <span class="literal">true</span> <span class="comment"># 徽标开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="comment">#屏蔽页面</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">footer-wrap</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 计时器部分配置项</span></span><br><span class="line">  <span class="attr">runtime_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span></span><br><span class="line">  <span class="attr">runtime_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css</span></span><br><span class="line">  <span class="comment"># 徽标部分配置项</span></span><br><span class="line">  <span class="attr">swiperpara:</span> <span class="number">3</span> <span class="comment">#若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://hexo.io/</span> <span class="comment">#徽标指向网站链接</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo</span> <span class="comment">#徽标API</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">博客框架为Hexo_v5.4.0</span> <span class="comment">#徽标提示语</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://butterfly.js.org/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">主题版本Butterfly_v3.8.2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://www.jsdelivr.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站使用JsDelivr为静态资源提供CDN加速</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，默认线路托管于Vercel</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Coding-0cedbe?style=flat&amp;logo=Codio</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，联通线路托管于Coding</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://github.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站项目由Github托管</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span></span><br><span class="line">  <span class="attr">swiperbdage_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span></span><br></pre></td></tr></table></figure><br>访问<code>https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</code>，下载并在<code>node_modules\hexo-theme-butterfly\source\js</code>新建<code>runtime.js</code>，修改其中的时间，并修改<code>_config.butterfly.yml</code><br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">runtime_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span></span><br><span class="line"><span class="string">+</span> <span class="attr">runtime_js:</span> <span class="string">/js/runtime.js</span></span><br></pre></td></tr></table></figure></p>
<h2 id="博客标签魔改"><a href="#博客标签魔改" class="headerlink" title="博客标签魔改"></a>博客标签魔改</h2><p>打开<code>node_modules\hexo-theme-butterfly\scripts\helpers\page.js</code>文件<br>在第52行<code>$&#123;tag.name&#125;</code>后增加 <code>($&#123;tag.length&#125;)</code>即可<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result += <span class="string">`&lt;a href=&quot;<span class="subst">$&#123;env.url_for(tag.path)&#125;</span>&quot; style=&quot;<span class="subst">$&#123;style&#125;</span>&quot;&gt;<span class="subst">$&#123;tag.name&#125;</span> (<span class="subst">$&#123;tag.length&#125;</span>)&lt;/a&gt;`</span></span><br></pre></td></tr></table></figure><br>标签排序<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">helper</span>.<span class="title function_">register</span>(<span class="string">&#x27;cloudTags&#x27;</span>, <span class="keyword">function</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> env = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> source = options.<span class="property">source</span></span><br><span class="line">    <span class="keyword">const</span> limit = options.<span class="property">limit</span></span><br><span class="line">    <span class="comment">// 从小到大排序然后再翻转，即从大到小排序</span></span><br><span class="line">    source = source.<span class="title function_">sort</span>(<span class="string">&#x27;length&#x27;</span>).<span class="title function_">reverse</span>()</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (limit &gt; <span class="number">0</span>) source = source.<span class="title function_">limit</span>(limit)</span><br><span class="line"></span><br><span class="line">    source.<span class="title function_">forEach</span>(<span class="function"><span class="params">tag</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> color = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">201</span>) + <span class="string">&#x27;, &#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">201</span>) + <span class="string">&#x27;, &#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">201</span>) + <span class="string">&#x27;)&#x27;</span> <span class="comment">// 0,0,0 -&gt; 200,200,200</span></span><br><span class="line">        result += <span class="string">`&lt;a href=&quot;<span class="subst">$&#123;env.url_for(tag.path)&#125;</span>&quot; style=&quot;color: <span class="subst">$&#123;color&#125;</span>&quot;&gt;<span class="subst">$&#123;tag.name&#125;</span> (<span class="subst">$&#123;tag.length&#125;</span>)&lt;/a&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>修改样式<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 标签 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tag-cloud-list</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="最新文章标签"><a href="#最新文章标签" class="headerlink" title="最新文章标签"></a>最新文章标签</h2><blockquote>
<p>有不明bug，暂时不用</p>
</blockquote>
<p>打开<code>node_modules\hexo-theme-butterfly\scripts\helpers\page.js</code>文件，加入<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最新文章</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">helper</span>.<span class="title function_">register</span>(<span class="string">&#x27;newPost&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name, time;</span><br><span class="line">    hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) name = item.<span class="property">title</span>, time = item.<span class="property">date</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">date</span> &gt; time) &#123; name = item.<span class="property">title</span>, time = item.<span class="property">date</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>打开<code>node_modules\hexo-theme-butterfly\layout\includes\mixins\post-ui.pug</code>文件，修改<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixin postUI(posts)</span><br><span class="line">+  - let newTitle= newPost()</span><br><span class="line">  each article , index in page.posts.data</span><br><span class="line">    .recent-post-item</span><br><span class="line">      -</span><br><span class="line">        let link = article.link || article.path</span><br><span class="line">        let title = article.title || _p(&#x27;no_title&#x27;)</span><br><span class="line">        const position = theme.cover.position</span><br><span class="line">        let leftOrRight = position === &#x27;both&#x27;</span><br><span class="line">          ? index%2 == 0 ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">          : position === &#x27;left&#x27; ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">        let post_cover = article.cover</span><br><span class="line">        let no_cover = article.cover === false || !theme.cover.index_enable ? &#x27;no-cover&#x27; : &#x27;&#x27;</span><br><span class="line">      -</span><br><span class="line">      if post_cover &amp;&amp; theme.cover.index_enable</span><br><span class="line">        .post_cover(class=leftOrRight)</span><br><span class="line">          a(href=url_for(link) title=title)</span><br><span class="line">            img.post_bg(src=url_for(post_cover) onerror=`this.onerror=null;this.src=&#x27;`+ url_for(theme.error_img.post_page) + `&#x27;` alt=title)</span><br><span class="line">      .recent-post-info(class=no_cover)</span><br><span class="line">+        if newTitle == title</span><br><span class="line">+          span(class=`newPost-$&#123;leftOrRight==&#x27;left&#x27;?&#x27;right&#x27;:&#x27;left&#x27;&#125;`) 最新</span><br></pre></td></tr></table></figure></p>
<p>添加<code>CSS</code><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最新文章图标 */</span></span><br><span class="line"><span class="selector-class">.newPost-left</span>,</span><br><span class="line"><span class="selector-class">.newPost-right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.newPost-left</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.newPost-right</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="鼠标移动特效"><a href="#鼠标移动特效" class="headerlink" title="鼠标移动特效"></a>鼠标移动特效</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">fairyDustCursor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> possibleColors = [<span class="string">&quot;#D61C59&quot;</span>, <span class="string">&quot;#E7D84B&quot;</span>, <span class="string">&quot;#1B8798&quot;</span>]</span><br><span class="line">  <span class="keyword">var</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">  <span class="keyword">var</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  <span class="keyword">var</span> cursor = &#123;<span class="attr">x</span>: width/<span class="number">2</span>, <span class="attr">y</span>: width/<span class="number">2</span>&#125;;</span><br><span class="line">  <span class="keyword">var</span> particles = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">bindEvents</span>();</span><br><span class="line">    <span class="title function_">loop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bind events that are needed</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onMouseMove);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, onTouchMove);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, onTouchMove);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, onWindowResize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onWindowResize</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">    height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onTouchMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( e.<span class="property">touches</span>.<span class="property">length</span> &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">      <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">touches</span>.<span class="property">length</span>; i++ ) &#123;</span><br><span class="line">        <span class="title function_">addParticle</span>( e.<span class="property">touches</span>[i].<span class="property">clientX</span>, e.<span class="property">touches</span>[i].<span class="property">clientY</span>, possibleColors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*possibleColors.<span class="property">length</span>)]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onMouseMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    cursor.<span class="property">x</span> = e.<span class="property">clientX</span>;</span><br><span class="line">    cursor.<span class="property">y</span> = e.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addParticle</span>( cursor.<span class="property">x</span>, cursor.<span class="property">y</span>, possibleColors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*possibleColors.<span class="property">length</span>)]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addParticle</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> particle = <span class="keyword">new</span> <span class="title class_">Particle</span>();</span><br><span class="line">    particle.<span class="title function_">init</span>(x, y, color);</span><br><span class="line">    particles.<span class="title function_">push</span>(particle);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">updateParticles</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; particles.<span class="property">length</span>; i++ ) &#123;</span><br><span class="line">      particles[i].<span class="title function_">update</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = particles.<span class="property">length</span> -<span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- ) &#123;</span><br><span class="line">      <span class="keyword">if</span>( particles[i].<span class="property">lifeSpan</span> &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        particles[i].<span class="title function_">die</span>();</span><br><span class="line">        particles.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(loop);</span><br><span class="line">    <span class="title function_">updateParticles</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Particle</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">character</span> = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lifeSpan</span> = <span class="number">120</span>; <span class="comment">//ms</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">initialStyles</span> =&#123;</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;fixed&quot;</span>,</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="comment">//必须加</span></span><br><span class="line">      <span class="string">&quot;display&quot;</span>: <span class="string">&quot;block&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pointerEvents&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      <span class="string">&quot;z-index&quot;</span>: <span class="string">&quot;10000000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fontSize&quot;</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">      <span class="string">&quot;will-change&quot;</span>: <span class="string">&quot;transform&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">velocity</span> = &#123;</span><br><span class="line">        <span class="attr">x</span>:  (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span> ? -<span class="number">1</span> : <span class="number">1</span>) * (<span class="title class_">Math</span>.<span class="title function_">random</span>() / <span class="number">2</span>),</span><br><span class="line">        <span class="attr">y</span>: <span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">position</span> = &#123;<span class="attr">x</span>: x - <span class="number">10</span>, <span class="attr">y</span>: y - <span class="number">20</span>&#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">initialStyles</span>.<span class="property">color</span> = color;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">character</span>;</span><br><span class="line">      <span class="title function_">applyProperties</span>(<span class="variable language_">this</span>.<span class="property">element</span>, <span class="variable language_">this</span>.<span class="property">initialStyles</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">update</span>();</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">element</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">update</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">x</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lifeSpan</span>--;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;translate3d(&quot;</span> + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> + <span class="string">&quot;px,&quot;</span> + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> + <span class="string">&quot;px,0) scale(&quot;</span> + (<span class="variable language_">this</span>.<span class="property">lifeSpan</span> / <span class="number">120</span>) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">die</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">element</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">applyProperties</span>(<span class="params"> target, properties </span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> key <span class="keyword">in</span> properties ) &#123;</span><br><span class="line">      target.<span class="property">style</span>[ key ] = properties[ key ];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1>注意配置文件时填写的属性不要有应该填但没有填的，这种类型问题不会引起错误，但目前发现该问题能对右下角菜单，代码框，搜索栏等产生消失等不可预期影响</h1>

<h2>白天夜晚切换动画</h2>

<p><a href="https://www.jnylife.com/2022/01/21/butterfly%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E7%99%BD%E5%A4%A9%E5%A4%9C%E6%99%9A%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB/">butterfly主题实现白天夜晚切换动画</a></p>
<h2>个性名片</h2>

<p><a href="https://akilar.top/posts/5ff2da64/">个性名片</a></p>
<h2>投币魔改等</h2>

<p><a href="https://akilar.top/posts/23fdf850/#79550af2607824cd0e8babe90e16ef2d">投币等魔改</a></p>
<h2>关于js文件报错</h2>
hexo会编译source目录下文件，js文件可能会因此异常，找到hexo的`_config.yml`，在`skip_render'处
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="string">&quot;**/*.js&quot;</span>]</span><br></pre></td></tr></table></figure>
<h2>右下角分享</h2>

<p><a href="https://blog.leonus.cn/2022/rightside.html">右下角分享</a></p>
<h2>githubcalendar</h2>

<p>emmm，关于这个插件，根据<a href="https://akilar.top/posts/1f9c68c9/">Akilar大佬</a>和<a href="https://zfe.space/post/hexo-history-calendar.html">小冰大佬</a>教程自建<code>api</code> n次，但都访问不了，找到了<a href="https://icodeq.com/2022/dce2523f4dfd/">Zkeq</a>大佬建好的，可以用，之后会填这个坑的。</p>
<h2>[那年今日插件](https://zfe.space/post/hexo-history-calendar.html)</h2>

<h2>[电子时钟插件](https://akilar.top/posts/4e39cf4a/)</h2>

<h2>关于Math<h2>

本站使用了开发者对于[MathJax使用的教程](https://butterfly.js.org/posts/ceeb73f/#Math-%E6%95%B8%E5%AD%B8)

## 归档页面添加文章发布统计图
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-charts -S</span><br></pre></td></tr></table></figure>
`主题目录/layout/archive.pug`
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">block content</span><br><span class="line">  include ./includes/mixins/article-sort.pug</span><br><span class="line">  #archive</span><br><span class="line">+    #posts-chart</span><br></pre></td></tr></table></figure>
`主题目录/layout/page.pug`
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">block content</span><br><span class="line">  if page.type === &#x27;tags&#x27;</span><br><span class="line">    .tag-cloud</span><br><span class="line">+      #tags-chart</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  else if page.type === &#x27;categories&#x27;</span><br><span class="line">    .category-content</span><br><span class="line">+      #categories-chart</span><br></pre></td></tr></table></figure>


<h1>下面是从Akilar大佬处学来的小知识</h1>

<h2>图标库</h2>

<div class="tabs" id="图标库"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#图标库-1">语法示例</button></li><li class="tab"><button type="button" data-href="#图标库-2">参数释义</button></li><li class="tab"><button type="button" data-href="#图标库-3">样式预览</button></li><li class="tab"><button type="button" data-href="#图标库-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="图标库-1"><p><a href="https://akilar.top/posts/d2ebecef/">详细教学</a><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="图标库-2"><ol>
<li>icon-xxxx：表示图标font-class,可以在自己的阿里矢量图标库项目的font-class引用方案内查询并复制。</li>
<li>font-size：表示图标大小，直接填写数字即可，单位为em。图标大小默认值为1em。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="图标库-3"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-weixin"></use></svg>
<svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-QQkongjian"></use></svg>
<svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-QQ"></use></svg>
<svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-weixinzhifu"></use></svg><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="图标库-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon icon-weixin %&#125;</span><br><span class="line">&#123;% icon icon-QQkongjian,2 %&#125;</span><br><span class="line">&#123;% icon icon-QQ,1 %&#125;</span><br><span class="line">&#123;% icon icon-weixinzhifu,2 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2>行内文本样式</h2>

<div class="tabs" id="行内文本样式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本样式-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内文本样式-2">样式预览</button></li><li class="tab"><button type="button" data-href="#行内文本样式-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本样式-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本样式-2"><ol>
<li>带 <u>下划线</u> 的文本</li>
<li>带 <emp>着重号</emp> 的文本</li>
<li>带 <wavy>波浪线</wavy> 的文本</li>
<li>带 <del>删除线</del> 的文本</li>
<li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li>
<li>密码样式的文本：<psw>这里没有验证码</psw></li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本样式-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<p><h2>行内文本span</h2><br><div class="tabs" id="行内文本span"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内文本span-2">配置参数</button></li><li class="tab"><button type="button" data-href="#行内文本span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#行内文本span-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本span-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本span-2"><ol>
<li>字体: logo, code</li>
<li>颜色: red,yellow,green,cyan,blue,gray</li>
<li>大小: small, h4, h3, h2, h1, large, huge, ultra</li>
<li>对齐方向: left, center, right</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本span-3"><ul>
<li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li>
<li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本span-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>段落文本p</h2><br><div class="tabs" id="段落文本p"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#段落文本p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#段落文本p-2">配置参数</button></li><li class="tab"><button type="button" data-href="#段落文本p-3">样式预览</button></li><li class="tab"><button type="button" data-href="#段落文本p-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="段落文本p-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落文本p-2"><ol>
<li>字体: logo, code</li>
<li>颜色: red,yellow,green,cyan,blue,gray</li>
<li>大小: small, h4, h3, h2, h1, large, huge, ultra</li>
<li>对齐方向: left, center, right</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落文本p-3"><ul>
<li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li>
<li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p>
<p class='p center small'>A Wonderful Theme for Hexo</p>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落文本p-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>引用note</h2><br><div class="tabs" id="引用note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#引用note-1">通用配置</button></li><li class="tab"><button type="button" data-href="#引用note-2">语法格式</button></li><li class="tab"><button type="button" data-href="#引用note-3">配置参数</button></li><li class="tab"><button type="button" data-href="#引用note-4">样式预览</button></li><li class="tab"><button type="button" data-href="#引用note-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="引用note-1"><p>修改主题配置文件<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-2"><details class="folding-tag" ><summary> 方法一 </summary>
              <div class='content'>
              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details>

<details class="folding-tag" ><summary> 方法二 </summary>
              <div class='content'>
              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-3"><details class="folding-tag" ><summary> 方法一 </summary>
              <div class='content'>
              <div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色（ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td>【可选】不显示 icon</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table></div>
              </div>
            </details>

<details class="folding-tag" ><summary> 方法二 </summary>
              <div class='content'>
              <div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色（ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td>【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table></div>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-4"><details class="folding-tag" ><summary> 方法一 </summary>
              <div class='content'>
              <ol><li>simple样式<div class="note simple"><p>默认 提示块标签</p></div></li></ol><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2. modern样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div>3. flat样式<div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div>4. disabled样式<div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div>5. no-icon样式<div class="note no-icon simple"><p>默认 提示块标签</p></div><div class="note default no-icon simple"><p>default 提示块标签</p></div><div class="note primary no-icon simple"><p>primary 提示块标签</p></div><div class="note success no-icon simple"><p>success 提示块标签</p></div><div class="note info no-icon simple"><p>info 提示块标签</p></div><div class="note warning no-icon simple"><p>warning 提示块标签</p></div><div class="note danger no-icon simple"><p>danger 提示块标签</p></div>
              </div>
            </details>

<details class="folding-tag" ><summary> 方法二 </summary>
              <div class='content'>
              <ol><li>simple样式<div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div></li></ol><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>2. modern样式<div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>3. flat样式<div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>4. disabled样式<div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>5. no-icon样式<div class="note no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon simple"><p>2021年快到了….</p></div><div class="note pink no-icon simple"><p>小心开车 安全至上</p></div><div class="note red no-icon simple"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon simple"><p>剪刀石头布</p></div><div class="note green no-icon simple"><p>前端最讨厌的浏览器</p></div>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-5"><details class="folding-tag" ><summary> 方法一 </summary>
              <div class='content'>
              <ol><li>simple样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>modern样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>flat样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>disabled样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>no-icon样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>
              </div>
            </details>

<details class="folding-tag" ><summary> 方法二 </summary>
              <div class='content'>
              <ol><li>simple样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>modern样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>flat样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>disabled样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li>no-icon样式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>上标标签tip</h2><br><div class="tabs" id="上标标签tip"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#上标标签tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#上标标签tip-2">配置参数</button></li><li class="tab"><button type="button" data-href="#上标标签tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#上标标签tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="上标标签tip-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="上标标签tip-2"><ol>
<li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li>
<li>自定义图标: 支持fontawesome。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="上标标签tip-3"><div class="tip "><p>default</p>
</div>
<div class="tip info"><p>info</p>
</div>
<div class="tip success"><p>success</p>
</div>
<div class="tip error"><p>error</p>
</div>
<div class="tip warning"><p>warning</p>
</div>
<div class="tip bolt"><p>bolt</p>
</div>
<div class="tip ban"><p>ban</p>
</div>
<div class="tip home"><p>home</p>
</div>
<div class="tip sync"><p>sync</p>
</div>
<div class="tip cogs"><p>cogs</p>
</div>
<div class="tip key"><p>key</p>
</div>
<div class="tip bell"><p>bell</p>
</div>
<div class="tip fa-atom"><p>自定义font awesome图标</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="上标标签tip-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>动态标签anima</h2><br><div class="tabs" id="动态标签anima"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#动态标签anima-1">标签语法</button></li><li class="tab"><button type="button" data-href="#动态标签anima-2">配置参数</button></li><li class="tab"><button type="button" data-href="#动态标签anima-3">样式预览</button></li><li class="tab"><button type="button" data-href="#动态标签anima-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="动态标签anima-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态标签anima-2"><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看<a href="https://l-lin.github.io/font-awesome-animation/">font-awesome-animation</a>文档</p>
<ol>
<li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li>
<li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类faa-parent animated-hover。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li>
<li>可以通过给目标元素添加CSS类<span class='p red'>faa-fast</span>或<span class='p red'>faa-slow</span>来控制动画快慢。</li>
</ol>
</div>

<div class="table-container">
<table>
<thead>
<tr>
<th>On DOM load<br>当页面加载时<br>显示动画</th>
<th>On hover<br>当鼠标悬停时<br>显示动画</th>
<th>On parent hover<br>当鼠标悬停<br>在父级元素时<br>显示动画</th>
</tr>
</thead>
<tbody>
<tr>
<td><span><i class="fas fa-wrench faa-wrench animated"></i>&nbsp;faa-wrench animated</span></td>
<td><span><i class="fas fa-wrench faa-wrench animated-hover"></i>&nbsp;faa-wrench animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i>&nbsp;faa-wrench</span></td>
</tr>
<tr>
<td><span><i class="fas fa-bell faa-ring animated"></i>&nbsp;faa-ring animated</span></td>
<td><span><i class="fas fa-bell faa-ring animated-hover"></i>&nbsp;faa-ring animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i>&nbsp;faa-ring</span></td>
</tr>
<tr>
<td><span><i class="fas fa-envelope faa-horizontal animated"></i>faa-horizontal animated</span></td>
<td><span><i class="fas fa-envelope faa-horizontal animated-hover"></i>&nbsp;faa-horizontal animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i>&nbsp;faa-horizontal</span></td>
</tr>
<tr>
<td><span><i class="fas fa-thumbs-up faa-vertical animated"></i>&nbsp;faa-vertical animated</span></td>
<td><span><i class="fas fa-thumbs-up faa-vertical animated-hover"></i>&nbsp;faa-vertical animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i>&nbsp;faa-vertical</span></td>
</tr>
<tr>
<td><span><i class="fas fa-exclamation-triangle faa-flash animated"></i>&nbsp;faa-flash animated</span></td>
<td><span><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i>&nbsp;faa-flash animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i>&nbsp;faa-flash</span></td>
</tr>
<tr>
<td><span><i class="fas fa-thumbs-up faa-bounce animated"></i>&nbsp;faa-bounce animated</span></td>
<td><span><i class="fas fa-thumbs-up faa-bounce animated-hover"></i>&nbsp;faa-bounce animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i>&nbsp;faa-bounce</span></td>
</tr>
<tr>
<td><span><i class="fas fa-spinner faa-spin animated"></i>&nbsp;faa-spin animated</span></td>
<td><span><i class="fas fa-spinner faa-spin animated-hover"></i>&nbsp;faa-spin animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i>&nbsp;faa-spin</span></td>
</tr>
<tr>
<td><span><i class="fas fa-plane faa-tada animated"></i>&nbsp;faa-tada animated</span></td>
<td><span><i class="fas fa-plane faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-plane faa-tada"></i>&nbsp;faa-tada</span></td>
</tr>
<tr>
<td><span><i class="fas fa-heart faa-pulse animated"></i>&nbsp;faa-pulse animated</span></td>
<td><span><i class="fas fa-heart faa-pulse animated-hover"></i>&nbsp;faa-pulse animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i>&nbsp;faa-pulse</span></td>
</tr>
<tr>
<td><span><i class="fas fa-envelope faa-shake animated"></i>&nbsp;faa-shake animated</span></td>
<td><span><i class="fas fa-envelope faa-shake animated-hover"></i>&nbsp;faa-shake animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i>&nbsp;faa-shake</span></td>
</tr>
<tr>
<td><span><i class="fas fa-trophy faa-tada animated"></i>&nbsp;faa-tada animated</span></td>
<td><span><i class="fas fa-trophy faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i>&nbsp;faa-tada</span></td>
</tr>
<tr>
<td><span><i class="fas fa-space-shuttle faa-passing animated"></i>&nbsp;faa-passing animated</span></td>
<td><span><i class="fas fa-space-shuttle faa-passing animated-hover"></i>&nbsp;faa-passing animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i>&nbsp;faa-passing</span></td>
</tr>
<tr>
<td><span><i class="fas fa-space-shuttle faa-passing-reverse animated"></i>&nbsp;faa-passing-reverse animated</span></td>
<td><span><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i>&nbsp;faa-passing-reverse animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i>&nbsp;faa-passing-reverse</span></td>
</tr>
<tr>
<td><span><i class="fas fa-circle faa-burst animated"></i>&nbsp;faa-burst animated</span></td>
<td><span><i class="fas fa-circle faa-burst animated-hover"></i>&nbsp;faa-burst animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i>&nbsp;faa-burst</span></td>
</tr>
<tr>
<td><span><i class="fas fa-star faa-falling animated"></i>&nbsp;faa-falling animated</span></td>
<td><span><i class="fas fa-star faa-falling animated-hover"></i>&nbsp;faa-falling animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i>&nbsp;faa-falling</span></td>
</tr>
<tr>
<td><span><i class="fas fa-rocket faa-rising animated"></i>&nbsp;faa-rising animated</span></td>
<td><span><i class="fas fa-rocket faa-rising animated-hover"></i>&nbsp;faa-rising animated-hover</span></td>
<td><span class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i>&nbsp;faa-rising</span></td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态标签anima-3"><ol>
<li>On DOM load（当页面加载时显示动画）<div class="tip warning faa-horizontal animated"><p>warning</p>
</div>
<div class="tip ban faa-flash animated"><p>ban</p>
</div></li>
<li>调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p>
</div>
<div class="tip ban faa-flash animated faa-slow"><p>ban</p>
</div></li>
<li>On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p>
</div>
<div class="tip ban faa-flash animated-hover"><p>ban</p>
</div></li>
<li>On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div>
<div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态标签anima-4"><ol>
<li>On DOM load（当页面加载时显示动画）<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li>
<li>调整动画速度<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li>
<li>On hover（当鼠标悬停时显示动画）<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li>
<li>On parent hover（当鼠标悬停在父级元素时显示动画）<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>复选列表checkbox</h2><br><div class="tabs" id="复选列表checkbox"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#复选列表checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#复选列表checkbox-2">配置参数</button></li><li class="tab"><button type="button" data-href="#复选列表checkbox-3">样式预览</button></li><li class="tab"><button type="button" data-href="#复选列表checkbox-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="复选列表checkbox-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="复选列表checkbox-2"><ol>
<li>样式: plus, minus, times</li>
<li>颜色: <span class='p red'>red</span>,<span class='p yeallow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li>
<li>选中状态: checked</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="复选列表checkbox-3"><div class='checkbox'><input type="checkbox" />
            <p>纯文本测试</p>
            </div>
<div class='checkbox checked'><input type="checkbox" checked="checked"/>
            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>
            </div>
<div class='checkbox red'><input type="checkbox" />
            <p>支持自定义颜色</p>
            </div>
<div class='checkbox green checked'><input type="checkbox" checked="checked"/>
            <p>绿色 + 默认选中</p>
            </div>
<div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>
            <p>黄色 + 默认选中</p>
            </div>
<div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>
            <p>青色 + 默认选中</p>
            </div>
<div class='checkbox blue checked'><input type="checkbox" checked="checked"/>
            <p>蓝色 + 默认选中</p>
            </div>
<div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>
            <p>增加</p>
            </div>
<div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>
            <p>减少</p>
            </div>
<div class='checkbox times red checked'><input type="checkbox" checked="checked"/>
            <p>叉</p>
            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="复选列表checkbox-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [markdown&#125;(https://guides.github.com/features/mastering-markdown/) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>单选列表radio</h2><br><div class="tabs" id="单选列表radio"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单选列表radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#单选列表radio-2">配置参数</button></li><li class="tab"><button type="button" data-href="#单选列表radio-3">样式预览</button></li><li class="tab"><button type="button" data-href="#单选列表radio-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单选列表radio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单选列表radio-2"><ol>
<li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li>
<li>选中状态: checked</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单选列表radio-3"><div class='checkbox'><input type="radio" />
            <p>纯文本测试</p>
            </div>
<div class='checkbox checked'><input type="radio" checked="checked"/>
            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>
            </div>
<div class='checkbox red'><input type="radio" />
            <p>支持自定义颜色</p>
            </div>
<div class='checkbox green'><input type="radio" />
            <p>绿色</p>
            </div>
<div class='checkbox yellow'><input type="radio" />
            <p>黄色</p>
            </div>
<div class='checkbox cyan'><input type="radio" />
            <p>青色</p>
            </div>
<div class='checkbox blue'><input type="radio" />
            <p>蓝色</p>
            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单选列表radio-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>时间轴timeline</h2><br><div class="tabs" id="时间轴timeline"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#时间轴timeline-1">标签语法</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-2">配置参数</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-3">样式预览</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="时间轴timeline-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-2"><div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>标题/时间线</td>
</tr>
<tr>
<td>color</td>
<td>timeline颜色:default(留空) / blue / pink / red / purple / orange / green</td>
</tr>
</tbody>
</table>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-3"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p>
</div></div><div class='timeline-item-content'><ol>
<li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li>
<li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li>
<li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li>
<li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li>
<li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li>
</ol>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p>
</div></div><div class='timeline-item-content'><p>不需要额外处理。</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p>
</div></div><div class='timeline-item-content'><ol>
<li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li>
<li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li>
<li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li>
</ol>
</div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>链接卡片link</h2><br><div class="tabs" id="链接卡片link"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#链接卡片link-1">标签语法</button></li><li class="tab"><button type="button" data-href="#链接卡片link-2">样式预览</button></li><li class="tab"><button type="button" data-href="#链接卡片link-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="链接卡片link-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="链接卡片link-2"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="链接卡片link-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, /img/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>按钮btns</h2><br><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p><span class='p red'>Volantis</span>的按钮使用的是<span class='p red'>btn</span>和<span class='p red'>btns</span>标签。<span class='p red'>btns</span>和<span class='p red'>butterfly</span>的<span class='p red'>button</span>不冲突，但是<span class='p red'>btn</span>会被强制渲染，导致部分参数失效,而且<span class='p red'>btn</span>的效果还是<span class='p red'>butterfly</span>的<span class='p red'>button</span>更好看些。所以就只适配了<span class='p red'>btns</span>。</p>
</div><br><div class="tabs" id="按钮btns"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#按钮btns-1">标签语法</button></li><li class="tab"><button type="button" data-href="#按钮btns-2">配置参数</button></li><li class="tab"><button type="button" data-href="#按钮btns-3">样式预览</button></li><li class="tab"><button type="button" data-href="#按钮btns-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="按钮btns-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="按钮btns-2"><ol>
<li>圆角样式：rounded, circle</li>
<li>增加文字样式：可以在容器内增加 <span class='p red'><b>标题</b></span>和<span class='p red'><p>描述文字</p></span></li>
<li>布局方式：<br> 默认为自动宽度，适合视野内只有一两个的情况。<br>|参数|含义|<br>|-|-|<br>|wide|宽一点的按钮|<br>|fill|填充布局，自动铺满至少一行，多了会换行|<br>|center|居中，按钮之间是固定间距|<br>|around|居中分散|<br>|grid2|等宽最多2列，屏幕变窄会适当减少列数|<br>|grid3|等宽最多3列，屏幕变窄会适当减少列数|<br>|grid4|等宽最多4列，屏幕变窄会适当减少列数|<br>|grid5|等宽最多5列，屏幕变窄会适当减少列数|</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="按钮btns-3"><ol>
<li>如果需要显示类似「团队成员」之类的一组含有头像的链接：<div class="btns circle grid5">
         <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
       </div></li>
<li>或者含有图标的按钮：<div class="btns rounded grid5">
         <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a>
<a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>
       </div></li>
<li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">
         <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>
<i class='fab fa-apple'></i>
<b>心率管家</b>
<p class='p red'>专业版</p>
<img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'>
</a>
<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>
<i class='fab fa-apple'></i>
<b>心率管家</b>
<p class='p green'>免费版</p>
<img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'>
</a>
       </div>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="按钮btns-4"><ol>
<li>如果需要显示类似「团队成员」之类的一组含有头像的链接：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li>
<li>或者含有图标的按钮：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li>
<li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>github卡片ghcard</h2><br><div class="tabs" id="github卡片ghcard"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github卡片ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#github卡片ghcard-2">配置参数</button></li><li class="tab"><button type="button" data-href="#github卡片ghcard-3">样式预览</button></li><li class="tab"><button type="button" data-href="#github卡片ghcard-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github卡片ghcard-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github卡片ghcard-2"><p>使用,分割各个参数。写法为：<span class='p red'>参数名=参数值</span><br>以下只写几个常用参数值。<br>|参数名|取值|释义|<br>|-|-|-|<br>|hide|stars,commits,prs,issues,contribs|隐藏指定统计|<br>|count_private|true|将私人项目贡献添加到总提交计数中|<br>|show_icons|true|显示图标|<br>|theme|请查阅<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a>|主题|</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github卡片ghcard-3"><ol>
<li>用户信息卡片<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a> |<br>| — | — |<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a> |<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a> |<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a> |</li>
<li>仓库信息卡片<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a> |<br>| — | — |<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a> |<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a> |<br>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a> |</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github卡片ghcard-4"><ol>
<li>用户信息卡片<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></li>
<li>仓库信息卡片<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>github徽标ghbdage</h2><br><div class="tabs" id="github徽标ghbdage"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github徽标ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#github徽标ghbdage-2">配置参数</button></li><li class="tab"><button type="button" data-href="#github徽标ghbdage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#github徽标ghbdage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github徽标ghbdage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github徽标ghbdage-2"><ol>
<li><span class='p red'>left</span>：徽标左边的信息，必选参数。</li>
<li><span class='p red'>right</span>: 徽标右边的信息，必选参数。</li>
<li><span class='p red'>logo</span>：徽标图标，图标名称详见<span class='p red'>simpleicons</span>，可选参数。</li>
<li><span class='p red'>color</span>：徽标右边的颜色，可选参数。</li>
<li><span class='p red'>link</span>：指向的链接，可选参数。</li>
<li><span class='p red'>title</span>：徽标的额外信息，可选参数。主要用于优化SEO，但<span class='p red'>object</span>标签不会像<span class='p red'>a</span>标签一样在鼠标悬停显示<span class='p red'>title</span>信息。</li>
<li><span class='p red'>option</span>：自定义参数，支持<span class='p red'>shields.io</span>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<span class='p red'>name1=value2&amp;name2=value2</span>。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github徽标ghbdage-3"><p><div class="note info simple"><p>本外挂标签的参数分为三组，用<span class='p red'>||</span>分割。</p>
</div></p>
<ol>
<li>基本参数,定义徽标左右文字和图标<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object>
<br>2. 信息参数，定义徽标右侧内容背景色，指向链接<br>
<object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object>
<br>3. 拓展参数，支持shields的API的全部参数内容<br>
<object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github徽标ghbdage-4"><p><div class="note info simple"><p>本外挂标签的参数分为三组，用<span class='p red'>||</span>分割。</p>
</div></p>
<ol>
<li>基本参数,定义徽标左右文字和图标<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure></li>
<li>信息参数，定义徽标右侧内容背景色，指向链接<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure></li>
<li>拓展参数，支持shields的API的全部参数内容<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>网站卡片sites</h2><br><div class="tabs" id="网站卡片sites"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#网站卡片sites-1">标签语法</button></li><li class="tab"><button type="button" data-href="#网站卡片sites-2">样式预览</button></li><li class="tab"><button type="button" data-href="#网站卡片sites-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="网站卡片sites-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="网站卡片sites-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a>
<a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="网站卡片sites-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>行内图片inlineimage</h2><br><div class="tabs" id="行内图片inlineimage"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内图片inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内图片inlineimage-2">配置参数</button></li><li class="tab"><button type="button" data-href="#行内图片inlineimage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#行内图片inlineimage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内图片inlineimage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片inlineimage-2"><ol>
<li>高度：height=20px</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p>
<p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片inlineimage-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>单张图片image</h2><br><div class="tabs" id="单张图片image"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单张图片image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#单张图片image-2">配置参数</button></li><li class="tab"><button type="button" data-href="#单张图片image-3">样式预览</button></li><li class="tab"><button type="button" data-href="#单张图片image-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单张图片image-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片image-2"><ol>
<li>图片宽度高度：width=300px, height=32px</li>
<li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li>
<li>占位背景色：bg=#f2f2f2</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片image-3"><ol>
<li>添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li>
<li>指定宽度：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div></li>
<li>指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li>
<li>设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片image-4"><ol>
<li>添加描述：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li>
<li>指定宽度：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure></li>
<li>指定宽度并添加描述：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li>
<li>设置占位背景色：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>音频audio</h2><br><div class="tabs" id="音频audio"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#音频audio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#音频audio-2">样式预览</button></li><li class="tab"><button type="button" data-href="#音频audio-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="音频audio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="音频audio-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="音频audio-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>视频video</h2><br><div class="tabs" id="视频video"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#视频video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#视频video-2">配置参数</button></li><li class="tab"><button type="button" data-href="#视频video-3">样式预览</button></li><li class="tab"><button type="button" data-href="#视频video-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="视频video-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频video-2"><ol>
<li>对其方向：left, center, right</li>
<li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频video-3"><ol>
<li>100%宽度<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></li>
<li>50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li>
<li>25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频video-4"><ol>
<li>100%宽度<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>50%宽度<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li>
<li>25%宽度<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>相册gallery</h2><br><div class="tabs" id="相册gallery"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#相册gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#相册gallery-2">配置参数</button></li><li class="tab"><button type="button" data-href="#相册gallery-3">样式预览</button></li><li class="tab"><button type="button" data-href="#相册gallery-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="相册gallery-1"><ol>
<li>gallerygroup相册图库<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>gallery相册<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册gallery-2"><ul>
<li>gallerygroup相册图库</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数名</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>图库名字</td>
</tr>
<tr>
<td>description</td>
<td>图库描述</td>
</tr>
<tr>
<td>link</td>
<td>链接到对应相册的地址</td>
</tr>
<tr>
<td>img-url</td>
<td>图库封面</td>
</tr>
</tbody>
</table>
</div>
<div class="note info simple"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p>
</div>

<ul>
<li>gallery相册</li>
</ul>
<p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。建议在粘贴时故意使用长短、大小、横竖不一的图片，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册gallery-3"><ol>
<li><p>gallerygroup相册图库</p>
<div class="gallery-group-main">

<figure class="gallery-group">
<img class="gallery-group-img no-lightbox" src='https://assets.akilar.top/image/1.jpg' alt="Group Image Gallery">
<figcaption>
<div class="gallery-group-name">MC</div>
<p>在Rikkaの六花服务器里留下的足迹</p>
<a href='/gallery/MC/'></a>
</figcaption>
</figure>


</li>
</ol>
  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://assets.akilar.top/image/20200907110508327.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">Gundam</div>
  <p>哦咧哇gundam哒！</p>
  <a href='/gallery/Gundam/'></a>
  </figcaption>
  </figure>


  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://assets.akilar.top/image/20200907113116651.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">I-am-Akilar</div>
  <p>某种意义上也算自拍吧</p>
  <a href='/gallery/I-am-Akilar/'></a>
  </figcaption>
  </figure>

<p>&lt;/div&gt;</p>
<ol>
<li>gallery相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>
       </div>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册gallery-4"><p><div class="note info simple"><p>对于很多同学提问的<span class='p red'>gallerygroup</span>和<span class='p red'>gallery</span>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个gallery的page(使用指令<span class='p red'>hexo new page gallery</span>添加)，里面放相册图库作为封面。然后在<span class='p red'>[Blogroot]/source/gallery/</span>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<span class='p red'>/gallery/MC/</span>路径访问MC相册，则需要新建<span class='p red'>[Blogroot]/source/gallery/MC/index.md</span>，并在里面填入<span class='p red'>gallery</span>相册内容。</p>
</div></p>
<ol>
<li>gallerygroup相册图库<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://assets.akilar.top/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://assets.akilar.top/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://assets.akilar.top/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>gallery相册<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>折叠框folding</h2><br><div class="tabs" id="折叠框folding"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#折叠框folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#折叠框folding-2">配置参数</button></li><li class="tab"><button type="button" data-href="#折叠框folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#折叠框folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="折叠框folding-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框folding-2"><ol>
<li>颜色：blue, cyan, green, yellow, red</li>
<li>状态：状态填写 open 代表默认打开。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框folding-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>
              <div class='content'>
              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>
              </div>
            </details>

<details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>
              <div class='content'>
              <p>这是一个默认打开的折叠框。</p>
              </div>
            </details>

<details class="folding-tag" green><summary> 查看代码测试 </summary>
              <div class='content'>
              <p>假装这里有代码块（代码块没法嵌套代码块）</p>
              </div>
            </details>

<details class="folding-tag" yellow><summary> 查看列表测试 </summary>
              <div class='content'>
              <ul><li>haha</li><li>hehe</li></ul>
              </div>
            </details>

<details class="folding-tag" red><summary> 查看嵌套测试 </summary>
              <div class='content'>
              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>
              </div>
            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框folding-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>分栏tab</h2><br><div class="tabs" id="分栏tab"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏tab-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏tab-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏tab-3">样式预览</button></li><li class="tab"><button type="button" data-href="#分栏tab-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏tab-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏tab-2"><ol>
<li>Unique name :</li>
</ol>
<ul>
<li>选项卡块标签的唯一名称，不带逗号。</li>
<li>将在#id中用作每个标签及其索引号的前缀。</li>
<li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li>
<li>仅当前帖子/页面的URL必须是唯一的！</li>
</ul>
<ol>
<li>[index]:</li>
</ol>
<ul>
<li>活动选项卡的索引号。</li>
<li>如果未指定，将选择第一个标签（1）。</li>
<li>如果index为-1，则不会选择任何选项卡。</li>
<li>可选参数。</li>
</ul>
<ol>
<li>[Tab caption]:</li>
</ol>
<ul>
<li>当前选项卡的标题。</li>
<li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li>
<li>如果未指定标题，但指定了图标，则标题将为空。</li>
<li>可选参数。</li>
</ul>
<ol>
<li>[@icon]:</li>
</ol>
<ul>
<li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li>
<li>可以指定带空格或不带空格；</li>
<li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li>
<li>可选参数。</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏tab-3"><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p>
</div>

<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<div class="note primary simple"><p>Demo 2 - 预设选择tabs</p>
</div>
<div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note primary simple"><p>Demo 3 - 没有预设值</p>
</div>
<div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>
</div>
<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏tab-4"><p><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>Demo 2 - 预设选择tabs</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>Demo 3 - 没有预设值</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>
</div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<p><h2>数据集合 issues</h2><br><div class="tabs" id="数据集合-issues"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#数据集合-issues-1">标签语法</button></li><li class="tab"><button type="button" data-href="#数据集合-issues-2">配置参数</button></li><li class="tab"><button type="button" data-href="#数据集合-issues-3">样式预览</button></li><li class="tab"><button type="button" data-href="#数据集合-issues-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="数据集合-issues-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数据集合-issues-2"><p>type(类型)：</p>
<p>根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有：</p>
<ol>
<li>时间轴timeline: 解析成timeline标签，issue的标题对应timeline的时间，issue的内容对应timeline的内容。</li>
<li>网站卡片sites: 解析成sites标签，需要有JSON代码块,各参数对应sites标签参数:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;「keywords」&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>网站名称</td>
</tr>
<tr>
<td>screenshot</td>
<td>网站预览图</td>
</tr>
<tr>
<td>url</td>
<td>网站链接，需要添加<br><a href="https://协议组成完整域名。">https://协议组成完整域名。</a><br>否则可能被识别成站点相对路径。</td>
</tr>
<tr>
<td>avatar</td>
<td>站长头像</td>
</tr>
<tr>
<td>「keywords」</td>
<td>分组依据，<br>未必要叫「keywords」，<br>详见下文group(分组)</td>
</tr>
</tbody>
</table>
</div>
<p>api(接口)：</p>
<p>url为可以调的通的API，例如：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active</span><br><span class="line">api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active</span><br></pre></td></tr></table></figure></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://gitee.com/api/v5/">https://gitee.com/api/v5/</a></td>
<td>gitee仓库的api</td>
</tr>
<tr>
<td><a href="https://api.github.com/">https://api.github.com/</a></td>
<td>github仓库的api</td>
</tr>
<tr>
<td>repos/xaoxuu/friends/issues</td>
<td>repos/用户名/仓库名/issues</td>
</tr>
<tr>
<td>sort=updated&amp;state=open</td>
<td>界定哪些类型的issues会被读取过来渲染成相应的标签</td>
</tr>
<tr>
<td>page=1&amp;per_page=100</td>
<td>读取前100条issues</td>
</tr>
<tr>
<td>labels=active</td>
<td>控制默认的issue不显示，<br>只有自己审核通过<br>添加了active标签之后才会显示</td>
</tr>
</tbody>
</table>
</div>
<p>group(分组)：</p>
<p>sites类型的issues默认不分组，如果需要分组，可指定分组依据「keywords」，和分组白名单「value1」、「value2」等，例如：<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">group=version:v4,v3,v2</span></span><br><span class="line"><span class="comment"># 此处的version就是上文中的「keywords」</span></span><br></pre></td></tr></table></figure><br>这个参数的作用就是，筛选出JSON中包含”version”: “v4”或者”version”:”v3”或者”version”: “v2”的数据，并分组显示。<br>仓库ISSUES模板配置<br><a href="https://akilar.top/posts/615e2dec/">详细内容见</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数据集合-issues-3"><ol>
<li>时间轴标签timeline渲染<div class="issues-api timeline"api="https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&creator=xaoxuu&sort=created&direction=desc&page=1&per_page=100"></div></li>
<li>网站卡片标签sites渲染</li>
</ol>
<ul>
<li>gitee仓库示例<div class="issues-api sites"api="https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li>
<li>github仓库示例<div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li>
</ul>
<ol>
<li>网站卡片标签sites分组渲染<br>这是Volantis主题官网的「示例博客」页面的数据：<div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数据集合-issues-4"><ol>
<li>时间轴标签timeline渲染<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;sort=created&amp;direction=desc&amp;page=1&amp;per<span class="emphasis">_page=100 %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>网站卡片标签sites渲染</li>
</ol>
<ul>
<li>gitee仓库示例<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>github仓库示例<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>网站卡片标签sites分组渲染<br>这是Volantis主题官网的「示例博客」页面的数据：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>诗词标签 poem</h2><br><div class="tabs" id="诗词标签-poem"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#诗词标签-poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#诗词标签-poem-2">配置参数</button></li><li class="tab"><button type="button" data-href="#诗词标签-poem-3">样式预览</button></li><li class="tab"><button type="button" data-href="#诗词标签-poem-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="诗词标签-poem-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签-poem-2"><ol>
<li>title：诗词标题</li>
<li>author：作者，可以不写</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签-poem-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p>
<p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签-poem-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>特效标签wow</h2><br><div class="tabs" id="特效标签wow"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#特效标签wow-1">标签语法</button></li><li class="tab"><button type="button" data-href="#特效标签wow-2">配置参数</button></li><li class="tab"><button type="button" data-href="#特效标签wow-3">样式预览</button></li><li class="tab"><button type="button" data-href="#特效标签wow-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="特效标签wow-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="特效标签wow-2"><ol>
<li>animate: 动画样式，效果详见animate.css参考文档</li>
<li>duration: 选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</li>
<li>delay: 选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</li>
<li>offset: 选填项，开始动画的距离（相对浏览器底部）</li>
<li>iteration: 选填项，动画重复的次数</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="特效标签wow-3"><ol>
<li>flip动画效果.</li>
</ol>
<div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' ><div class="note green icon-padding modern"><i class="note-icon fas fa-fan"></i><p><code>flip</code>动画效果。</p>
</div></div>

<ol>
<li>zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次。</li>
</ol>
<div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p>
</div></div>

<ol>
<li>slideInRight动画效果，持续5s，延时5s。</li>
</ol>
<div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p>
</div></div>

<ol>
<li>heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</li>
</ol>
<div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p>
</div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="特效标签wow-4"><ol>
<li>flip动画效果.<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__flip %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note green &#x27;fas fa-fan&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`flip`动画效果。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>slideInRight动画效果，持续5s，延时5s。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>进度条 progress</h2><br><div class="tabs" id="进度条-progress"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#进度条-progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#进度条-progress-2">配置参数</button></li><li class="tab"><button type="button" data-href="#进度条-progress-3">样式预览</button></li><li class="tab"><button type="button" data-href="#进度条-progress-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="进度条-progress-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进度条-progress-2"><p>width: 0到100的阿拉伯数字<br>color: 颜色，取值有red,yellow,green,cyan,blue,gray<br>text:进度条上的文字内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进度条-progress-3"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进度条-progress-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>注释 notation</h2><br><div class="tabs" id="注释-notation"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#注释-notation-2">配置参数</button></li><li class="tab"><button type="button" data-href="#注释-notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#注释-notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-notation-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-notation-2"><p>label: 注释词汇<br>text: 悬停显示的注解内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-notation-3"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-notation-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>气泡注释 bubble</h2><br><div class="tabs" id="气泡注释-bubble"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#气泡注释-bubble-1">标签语法</button></li><li class="tab"><button type="button" data-href="#气泡注释-bubble-2">配置参数</button></li><li class="tab"><button type="button" data-href="#气泡注释-bubble-3">样式预览</button></li><li class="tab"><button type="button" data-href="#气泡注释-bubble-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="气泡注释-bubble-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-bubble-2"><p>content: 注释词汇<br>notation: 悬停显示的注解内容<br>background-color: 可选，气泡背景色。默认为“#71a4e3”</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-bubble-3"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span>&lt;/span&gt;，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局”，用来为盒状模型提供最大的灵活性”</span>&lt;/span&gt;，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span>&lt;/span&gt;，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span>&lt;/span&gt;写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span>&lt;/span&gt;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-bubble-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>引用文献 reference</h2><br><div class="tabs" id="引用文献-reference"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#引用文献-reference-1">标签语法</button></li><li class="tab"><button type="button" data-href="#引用文献-reference-2">配置参数</button></li><li class="tab"><button type="button" data-href="#引用文献-reference-3">样式预览</button></li><li class="tab"><button type="button" data-href="#引用文献-reference-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="引用文献-reference-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用文献-reference-2"><p>考虑到锚点跳转的特性，不建议您将引用出处标签referfrom写在常隐外挂标签(如folding、tab、hideToggle)中，这样能有效避免跳转失败。</p>
<ol>
<li><p>referto 引用上标<br>id: 上标序号内容，需与referfrom标签的id对应才能实现跳转<br>literature: 引用的参考文献名称</p>
</li>
<li><p>referfrom 引用出处<br>id: 序号内容，需与referto标签的id对应才能实现跳转<br>literature: 引用的参考文献名称<br>url: 引用的参考文献链接，可省略</p>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用文献-reference-3"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，Butterfly主题<span class="hidden-anchor" id="referto_[3]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p>
<p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[7]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[8]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[9]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用文献-reference-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
<p><h2>旋转相册 carousel</h2><br><div class="tabs" id="旋转相册-carousel"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#旋转相册-carousel-1">标签语法</button></li><li class="tab"><button type="button" data-href="#旋转相册-carousel-2">配置参数</button></li><li class="tab"><button type="button" data-href="#旋转相册-carousel-3">样式预览</button></li><li class="tab"><button type="button" data-href="#旋转相册-carousel-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="旋转相册-carousel-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% carousel [Id] , [name] %&#125;</span><br><span class="line">![](<span class="link">/img/1.jpg</span>)</span><br><span class="line">![](<span class="link">/img/2.jpg</span>)</span><br><span class="line">![](<span class="link">/img/3,jpg</span>)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="旋转相册-carousel-2"><p>Id: 相册唯一ID，用于监测相册鼠标动作。禁止使用中文。同一页内不得出现相同ID的carousel相册。<br>name: 相册中间显示的内容，建议用英文单引号包裹。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="旋转相册-carousel-3"><p><div id='SF' class='carousel'><div id="SF-drag-container" class="drag-container"><div id="SF-spin-container" class="spin-container"><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><br><img src="https://www.dmoe.cc/random.php" alt=""><p>strike freedom</p></div><div id="SF-carousel-ground" class="carousel-ground"></div></div>&lt;/div&gt;<script type="text/javascript">carouselinit('SF');</script></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="旋转相册-carousel-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% carousel &#x27;SF&#x27;,&#x27;strike freedom&#x27; %&#125;</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110444226.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110508327.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110525753.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110600751.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110621554.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110637459.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110654150.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110707916.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110719787.png</span>)</span><br><span class="line">![](<span class="link">https://assets.akilar.top/image/20200907110731118.png</span>)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p>
]]></content>
  </entry>
  <entry>
    <title>华勤集团</title>
    <url>/2022/09/30/%E6%B1%82%E8%81%8C/%E5%8D%8E%E5%8B%A4%E9%9B%86%E5%9B%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/30 测评设置可复用之前答过的记录，好评！！！ 笔试三十道，三十分钟，选择加判断</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>同花顺笔试</title>
    <url>/2022/09/26/%E6%B1%82%E8%81%8C/%E5%90%8C%E8%8A%B1%E9%A1%BA%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/26 10:00~19:00 三十道题目 简答 代码阅读 编程 选择 共三十道 好多好累。。。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>奇安信笔试</title>
    <url>/2022/08/25/%E6%B1%82%E8%81%8C/%E5%A5%87%E5%AE%89%E4%BF%A1%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2022年08月25日19:00~21:00 单选题20道，不定项选择题10道，编程题2道 编程题： 一、找出有向无环图从顶点到终点的道路数。 二、根据给定的面积公式求出n个点中最大面积，要求时间复杂度和空间复杂度。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>小天才笔试</title>
    <url>/2022/09/29/%E6%B1%82%E8%81%8C/%E5%B0%8F%E5%A4%A9%E6%89%8D%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/29 8:00~20:00 一小时随到随答 20道单选 5道多选</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>小米</title>
    <url>/2022/09/14/%E6%B1%82%E8%81%8C/%E5%B0%8F%E7%B1%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/14 18:30~20:00 题目：11道单选 9道多选 2道编程 一、翻转链表left位到right位 二、二叉搜索树转中序遍历双向链表</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>小红书笔试</title>
    <url>/2022/09/04/%E6%B1%82%E8%81%8C/%E5%B0%8F%E7%BA%A2%E4%B9%A6%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/1 16:00~18:00 20道选择题 三道编程题 第一题：输入一个数字序列，及镜像复制次数，求第k位的数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostreaam&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    long long k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    vector a(2 * n, 0);</span><br><span class="line">    for (int i = 0;i &lt; n;i++) &#123; int t; cin &gt;&gt; t;</span><br><span class="line">        a[i] = t;</span><br><span class="line">        a[2 * n - 1 - i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    k %= (2 * n);</span><br><span class="line">    cout &lt;&lt; a[k - 1] &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二题：输入一个数字序列，每次可对一个值加一或减一，求使序列乘积为7的最小操作次数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector a;</span><br><span class="line">    long long ans = 0;</span><br><span class="line">    int num = 0;</span><br><span class="line">    for (int i = 0;i &lt; n;i++) &#123; int t; cin &gt;&gt; t;</span><br><span class="line">        if (t &lt; 0) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        a.push_back(abs(t));</span><br><span class="line">    &#125;</span><br><span class="line">    int flag = 1;</span><br><span class="line">    sort(a.begin(), a.end());</span><br><span class="line">    if (a[0] == 0) &#123;</span><br><span class="line">        ans += 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (num % 2 == 1)</span><br><span class="line">            ans += 2 + abs(a[0] - 1);</span><br><span class="line">        else</span><br><span class="line">            ans += abs(a[0] - 1);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1;i &lt; a.size() - 1;i++) &#123;</span><br><span class="line">        ans += abs(a[i] - 1);</span><br><span class="line">    &#125;</span><br><span class="line">    ans += abs(a[a.size() - 1] - 7);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第三题：n个城市，m条路，每天可走k单位长度，每条路都是单位长度 m个数表示路的一个端点 m个数表示路的另一个端点 m个数表示过路费用 开通X的通行证可以免费通过过路费用不超过X的路，求一天内从1到n所需的最小X。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>恒生笔试</title>
    <url>/2022/09/24/%E6%B1%82%E8%81%8C/%E6%81%92%E7%94%9F%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>首先，这个在线程序编辑器奇奇怪怪的，吐槽一波。 时间：2022/9/24 18:00~22:00 两小时随来随考 题目： 基础知识不定项选择10道 语言知识不定项选择5道 数据库sql5道 编程题两道 一、给出三种转账渠道 三档金额对应的手续费 及 到账所需时间，根据给定的金额及最晚到账时间选择最优的渠道方案 二、给定一个正整数，求其是否是质数，若不为质数，请返回构成这个数的指数因子   ps：没有输入输出样例，题目对于输入描述不清晰，对输出格式说明也不明了。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>润科通用面试</title>
    <url>/2022/09/08/%E6%B1%82%E8%81%8C/%E6%B6%A6%E7%A7%91%E9%80%9A%E7%94%A8%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间2022/9/8 17:00 面试官没来，18:00电话面，12分钟，智能指针是什么（不会），进程间通信（说了mpi）。 Qt，UE4</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>深信服一面二面</title>
    <url>/2022/09/16/%E6%B1%82%E8%81%8C/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/16 19:55~20:55 自我介绍 编程题：二维矩阵最长下降路径 dfs+剪枝，折磨，但面试官疯狂引导 反问   2022/9/19 20:10~20:40 自我介绍 int a[5] sizeof(a) sizeof(a[0]) sizeof(&amp;a) sizeof(&amp;a[0]) 链表倒数第k个节点 深拷贝 浅拷贝 析构函数能不能重载 项目 反问</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>深信服笔试</title>
    <url>/2022/09/01/%E6%B1%82%E8%81%8C/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/1 19:00~21:00 选择题10道，不定项 填空题10道 编程题三道 一、输入一个长度为n的数组及k，循环比较数组的前两个元素，将较大的一个放在数组首位，将较小的一个放在数组末位，求连续胜利k次的数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;list&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    list arr;</span><br><span class="line">    int k;</span><br><span class="line">    int n = 0;</span><br><span class="line">    int m = 0;</span><br><span class="line">    int flag;</span><br><span class="line">    while (cin &gt;&gt; k) &#123;</span><br><span class="line">        arr.push_back(k);</span><br><span class="line">        n++;</span><br><span class="line">        flag = m;</span><br><span class="line">        m = max(m, k);</span><br><span class="line">    &#125;</span><br><span class="line">    arr.pop_back();</span><br><span class="line">    if (k &lt; n - 1) &#123;</span><br><span class="line">        int flag = 0;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        ans = arr.front();</span><br><span class="line">        arr.pop_front();</span><br><span class="line">        while (flag &lt; k) &#123; </span><br><span class="line">            if (ans &gt; arr.front()) &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                arr.push_back(arr.front());</span><br><span class="line">                arr.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                flag = 1;</span><br><span class="line">                arr.push_back(ans);</span><br><span class="line">                ans = arr.front();</span><br><span class="line">                arr.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二、输入长度为n的数组，求最大排序连续上升子段长度（输出1过60%）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    cout &lt;&lt; 1 &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三、输入n和k，输入长度为n的数组，求按顺序侵入需要变换的最少次数（侵入要求为所取的值与当前元素值绝对值小于等于k，初始值可为任意值且不计入次数）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n, x;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">    long long t;</span><br><span class="line">    vector arr;</span><br><span class="line">    for (int i = 0;i &lt; n;i++) &#123; </span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        arr.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    long long m1 = 10000000000, m2 = 0;</span><br><span class="line">    int ans = 0;</span><br><span class="line">    for (int i = 0;i &lt; arr.size();i++) &#123; </span><br><span class="line">        long long m3 = min(m1, arr[i]); </span><br><span class="line">        long long m4 = max(m2, arr[i]); </span><br><span class="line">        if (m4 - m3 &gt; 2 * x) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            if (m3 != m1) &#123;</span><br><span class="line">                m1 = m3;</span><br><span class="line">                m2 = m3;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (m4 != m2) &#123;</span><br><span class="line">                m2 = m4;</span><br><span class="line">                m1 = m4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            m1 = m3;</span><br><span class="line">            m2 = m4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>滴滴笔试</title>
    <url>/2022/09/04/%E6%B1%82%E8%81%8C/%E6%BB%B4%E6%BB%B4%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/4 19:00~20:40 20道选择题 两道编程题 第一题：n个桃子，常数k，第i个重量为\(a_i\)，使一箱中最重的桃子重量不超过平均重量的k倍，求一箱中最多几个桃子。 通过55%</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    vector a;</span><br><span class="line">    vector b;</span><br><span class="line">    for (int i = 0;i &lt; n;i++) &#123; </span><br><span class="line">        int t; cin &gt;&gt; t;</span><br><span class="line">        a.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a.begin(), a.end());</span><br><span class="line">    b.push_back(a[0]);</span><br><span class="line">    for (int i = 1;i &lt; n;i++) &#123;</span><br><span class="line">        b.push_back(b[i - 1]+a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    int ans = 0;</span><br><span class="line">    </span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        int num=0;</span><br><span class="line">        for(int j=i+ans;j&lt;n;j++)&#123; </span><br><span class="line">            if ((b[j] - b[i] + a[i]) * k &gt;= a[j] * (j - i + 1)) &#123;</span><br><span class="line">                num=j-i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,num);</span><br><span class="line">        if(i+ans&gt;n)&#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans+1 &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二题：T次询问，T个L，T个R，T个t，求从\(L_i-R_i\)有几个数的十进制各位异或值为\(t_i\) AC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector a;</span><br><span class="line">vector b;</span><br><span class="line">vector c;</span><br><span class="line">bool YN(int x,int flag)&#123;</span><br><span class="line">    while(x)&#123;</span><br><span class="line">        flag=(flag^(x%10));</span><br><span class="line">        x/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag)</span><br><span class="line">        return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123; </span><br><span class="line">        int t; cin&gt;&gt;t;</span><br><span class="line">        a.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123; </span><br><span class="line">        int t; cin&gt;&gt;t;</span><br><span class="line">        b.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123; </span><br><span class="line">        int t; cin&gt;&gt;t;</span><br><span class="line">        c.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123; </span><br><span class="line">        int ans=0; </span><br><span class="line">        if(c[i]&gt;15)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;0 &quot;;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=a[i];j&lt;=b[i];j++)&#123;</span><br><span class="line">            if(YN(j,c[i]))</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>蚂蚁</title>
    <url>/2022/09/15/%E6%B1%82%E8%81%8C/%E8%9A%82%E8%9A%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/15 19:00~20:30 题目：六道单选题 六道不定项选择题 三道编程题 一、忘了，ac了。 二、树的节点初始权值为1，每次可使一颗子树全部节点权值加一，根节点编号为1，求使所有节点权值等于编号的最少操作次数 三、求字符串中有多少子串符合有且仅有一个字符为奇数个，其余均为偶数个。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>百度笔试</title>
    <url>/2022/09/27/%E6%B1%82%E8%81%8C/%E7%99%BE%E5%BA%A6%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/27 19:00~21:00 单选15道 不定项选择5道 3道编程题 一、给定一个长度为n的数组，请把这个数组分成k组，每个元素在某一组中出现且在一组中仅出现一次，求分好的k组数平均值之和的最小值 0.1 二、给定n个桃，每个桃由酸度ai和甜度bi，仅可交换其中一个桃的酸甜度，求所有桃的甜度乘积最大值 AC 三、给定一个数组，第i为表示树的第i个节点的颜色，颜色仅有红蓝两种，给定树的边，边权值定义为删除该边后的两个子树中同色联通块数量之差的绝对值，求该树的边权值之和</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>网易游戏开发笔试</title>
    <url>/2022/09/18/%E6%B1%82%E8%81%8C/%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>时间：2022/9/18 19:00~22:00 四道编程题 一、识别车牌准确度，两个字符串，颜色正确2分，区域正确3分，五位车牌号最长连续相同字段长度为得分，满分十分。 二、给定每个资源加载依赖项，请求某资源须加载其依赖项，已加载的不会重复加载，使用完毕关闭无依赖项资源，求最多已加载资源数量 三、给出多个矩阵对角坐标，求出拼合图形全部顶点坐标 四、6*6地图探索，探索过的地图标位close不可再次访问，只可向上下左右向量位置移动，初始位置自定义，最多十张地图，一张地图全部close可进入下一张，地图中存在怪与金币，人物与怪均存在血量与攻击力，相遇同时攻击，怪物死亡可获得金币并置为close，人物死亡可花费指定金币复活，血量为初始血量一半，金币点可以获得金币，通关地图可以获得金币，死亡或者全部通关视为人物结束，求任务结束可持有的最多金币数。</p>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
</search>

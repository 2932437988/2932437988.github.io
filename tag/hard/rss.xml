<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>潇十七 • Posts by &#34;hard&#34; tag</title>
        <link>https://x-17.top</link>
        <description>可生活不是电影，我也少了点运气</description>
        <language>zh-CN</language>
        <pubDate>Wed, 14 Dec 2022 18:35:25 +0800</pubDate>
        <lastBuildDate>Wed, 14 Dec 2022 18:35:25 +0800</lastBuildDate>
        <category>每日一题</category>
        <category>Medium</category>
        <category>MIT 6.1810</category>
        <category>操作系统</category>
        <category>docker</category>
        <category>工具</category>
        <category>设计模式</category>
        <category>C++</category>
        <category>Hard</category>
        <category>Easy</category>
        <category>leetcode每日一题</category>
        <category>Madium</category>
        <category>easy</category>
        <category>leetcode周赛</category>
        <category>C++ Primer</category>
        <category>wiki</category>
        <category>教程</category>
        <category>Hexo</category>
        <category>Butterfly</category>
        <category>秋招</category>
        <category>笔试</category>
        <category>面试</category>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/12/14/LeetCode/1697-%E6%A3%80%E6%9F%A5%E8%BE%B9%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</guid>
            <title>1697. 检查边长度限制的路径是否存在</title>
            <link>https://x-17.top/2022/12/14/LeetCode/1697-%E6%A3%80%E6%9F%A5%E8%BE%B9%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Wed, 14 Dec 2022 18:35:25 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;1697-检查边长度限制的路径是否存在&#34;&gt;&lt;a href=&#34;#1697-检查边长度限制的路径是否存在&#34; class=&#34;headerlink&#34; title=&#34;1697. 检查边长度限制的路径是否存在&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/checking-existence-of-edge-length-limited-paths/description/&#34;&gt;1697. 检查边长度限制的路径是否存在&lt;/a&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 并查集模板，包含路径压缩（参考 findset 函数）以及按秩合并（参考 sz 变量）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UF&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; fa;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; comp_cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;UF&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; _n): &lt;span class=&#34;built_in&#34;&gt;n&lt;/span&gt;(_n), &lt;span class=&#34;built_in&#34;&gt;comp_cnt&lt;/span&gt;(_n), &lt;span class=&#34;built_in&#34;&gt;fa&lt;/span&gt;(_n), &lt;span class=&#34;built_in&#34;&gt;sz&lt;/span&gt;(_n, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;iota&lt;/span&gt;(fa.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), fa.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;findset&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fa[x] == x ? x : fa[x] = &lt;span class=&#34;built_in&#34;&gt;findset&lt;/span&gt;(fa[x]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;unite&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = &lt;span class=&#34;built_in&#34;&gt;findset&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y = &lt;span class=&#34;built_in&#34;&gt;findset&lt;/span&gt;(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x == y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sz[x] &amp;lt; sz[y]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fa[y] = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sz[x] += sz[y];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --comp_cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = &lt;span class=&#34;built_in&#34;&gt;findset&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y = &lt;span class=&#34;built_in&#34;&gt;findset&lt;/span&gt;(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x == y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;distanceLimitedPathsExist&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n, vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; edgeList, vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; queries)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将 queries 按照边权限制从小到大排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;qid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(queries.size())&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;iota&lt;/span&gt;(qid.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), qid.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(qid.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), qid.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), [&amp;amp;](&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; queries[i][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] &amp;lt; queries[j][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将 edgeList 按照边权从小到大排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(edgeList.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), edgeList.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), [](&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt;&amp;amp; e1, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt;&amp;amp; e2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; e1[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] &amp;lt; e2[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 并查集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;UF &lt;span class=&#34;title&#34;&gt;uf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(queries.size())&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; query: qid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 往并查集中添加边直到边权关系 dis_i &amp;lt; limit_j 不满足&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (i &amp;lt; edgeList.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() &amp;amp;&amp;amp; edgeList[i][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] &amp;lt; queries[query][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                uf.&lt;span class=&#34;built_in&#34;&gt;unite&lt;/span&gt;(edgeList[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], edgeList[i][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 使用并查集判断连通性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans[query] = uf.&lt;span class=&#34;built_in&#34;&gt;connected&lt;/span&gt;(queries[query][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], queries[query][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(mlogm+qlogq)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n+logm+q)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/12/10/LeetCode/1691-%E5%A0%86%E5%8F%A0%E9%95%BF%E6%96%B9%E4%BD%93%E7%9A%84%E6%9C%80%E5%A4%A7%E9%AB%98%E5%BA%A6/</guid>
            <title>1691. 堆叠长方体的最大高度</title>
            <link>https://x-17.top/2022/12/10/LeetCode/1691-%E5%A0%86%E5%8F%A0%E9%95%BF%E6%96%B9%E4%BD%93%E7%9A%84%E6%9C%80%E5%A4%A7%E9%AB%98%E5%BA%A6/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Sat, 10 Dec 2022 15:18:37 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;1691-堆叠长方体的最大高度&#34;&gt;&lt;a href=&#34;#1691-堆叠长方体的最大高度&#34; class=&#34;headerlink&#34; title=&#34;1691. 堆叠长方体的最大高度&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-height-by-stacking-cuboids/description/&#34;&gt;1691. 堆叠长方体的最大高度&lt;/a&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;maxHeight&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; cuboids)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = cuboids.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp; v : cuboids) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), v.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(cuboids.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), cuboids.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), [](&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp; a,&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + a[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + a[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] &amp;lt; b[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + b[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + b[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[i] = cuboids[i][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cuboids[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;gt;= cuboids[j][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cuboids[i][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &amp;gt;= cuboids[j][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &amp;amp;&amp;amp; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cuboids[i][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] &amp;gt;= cuboids[j][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[i] = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(dp[i], dp[j] + cuboids[i][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(ans, dp[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n^2)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/12/05/LeetCode/1687-%E4%BB%8E%E4%BB%93%E5%BA%93%E5%88%B0%E7%A0%81%E5%A4%B4%E8%BF%90%E8%BE%93%E7%AE%B1%E5%AD%90/</guid>
            <title>1687. 从仓库到码头运输箱子</title>
            <link>https://x-17.top/2022/12/05/LeetCode/1687-%E4%BB%8E%E4%BB%93%E5%BA%93%E5%88%B0%E7%A0%81%E5%A4%B4%E8%BF%90%E8%BE%93%E7%AE%B1%E5%AD%90/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Mon, 05 Dec 2022 18:38:36 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;1687-从仓库到码头运输箱子&#34;&gt;&lt;a href=&#34;#1687-从仓库到码头运输箱子&#34; class=&#34;headerlink&#34; title=&#34;1687. 从仓库到码头运输箱子&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/delivering-boxes-from-storage-to-ports/description/&#34;&gt;1687. 从仓库到码头运输箱子&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你有一辆货运卡车，你需要用这一辆车把一些箱子从仓库运送到码头。这辆卡车每次运输有 箱子数目的限制 和 总重量的限制 。&lt;/p&gt;
&lt;p&gt;给你一个箱子数组 boxes 和三个整数 portsCount, maxBoxes 和 maxWeight ，其中 boxes[i] = [ports​​i​, weighti] 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ports​​i 表示第 i 个箱子需要送达的码头， weightsi 是第 i 个箱子的重量。&lt;/li&gt;
&lt;li&gt;portsCount 是码头的数目。&lt;/li&gt;
&lt;li&gt;maxBoxes 和 maxWeight 分别是卡车每趟运输箱子数目和重量的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;箱子需要按照 数组顺序 运输，同时每次运输需要遵循以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卡车从 boxes 队列中按顺序取出若干个箱子，但不能违反 maxBoxes 和 maxWeight 限制。&lt;/li&gt;
&lt;li&gt;对于在卡车上的箱子，我们需要 按顺序 处理它们，卡车会通过 一趟行程 将最前面的箱子送到目的地码头并卸货。如果卡车已经在对应的码头，那么不需要 额外行程 ，箱子也会立马被卸货。&lt;/li&gt;
&lt;li&gt;卡车上所有箱子都被卸货后，卡车需要 一趟行程 回到仓库，从箱子队列里再取出一些箱子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;卡车在将所有箱子运输并卸货后，最后必须回到仓库。&lt;/p&gt;
&lt;p&gt;请你返回将所有箱子送到相应码头的 最少行程 次数。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最优策略如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车将所有箱子装上车，到达码头 1 ，然后去码头 2 ，然后再回到码头 1 ，最后回到仓库，总共需要 4 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;所以总行程数为 4 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;注意到第一个和第三个箱子不能同时被卸货，因为箱子需要按顺序处理（也就是第二个箱子需要先被送到码头 2 ，然后才能处理第三个箱子）。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最优策略如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车首先运输第一个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第二、第三、第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第五个箱子，到达码头 3 ，回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;总行程数为 2 + 2 + 2 = 6 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最优策略如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第一和第二个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第三和第四个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第五和第六个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;总行程数为 2 + 2 + 2 = 6 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最优策略如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第一个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第二个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第三和第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第五个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第六和第七个箱子，到达码头 3 ，然后去码头 4 ，然后回到仓库，总共 3 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; 卡车运输第八和第九个箱子，到达码头 1 ，然后去码头 5 ，然后回到仓库，总共 3 趟行程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;总行程数为 2 + 2 + 2 + 2 + 3 + 3 = 14 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= boxes.length &amp;lt;= $10^5$&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= portsCount, maxBoxes, maxWeight &amp;lt;= $10^5$&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= ports​​i &amp;lt;= portsCount&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= weightsi &amp;lt;= maxWeight&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;boxDelivering&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; boxes, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; portsCount, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxBoxes, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxWeight)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = boxes.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;neg&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            p[i] = boxes[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            w[i] = boxes[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                neg[i] = neg[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + (p[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] != p[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            W[i] = W[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + w[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; opt = &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (i - opt.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;() &amp;gt; maxBoxes || W[i] - W[opt.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;()] &amp;gt; maxWeight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                opt.&lt;span class=&#34;built_in&#34;&gt;pop_front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f[i] = g[opt.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;()] + neg[i] + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i != n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                g[i] = f[i] - neg[i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!opt.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; g[i] &amp;lt;= g[opt.&lt;span class=&#34;built_in&#34;&gt;back&lt;/span&gt;()]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    opt.&lt;span class=&#34;built_in&#34;&gt;pop_back&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                opt.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; f[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/11/30/LeetCode/895-%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88/</guid>
            <title>895. 最大频率栈</title>
            <link>https://x-17.top/2022/11/30/LeetCode/895-%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Wed, 30 Nov 2022 15:56:32 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;895-最大频率栈&#34;&gt;&lt;a href=&#34;#895-最大频率栈&#34; class=&#34;headerlink&#34; title=&#34;895. 最大频率栈&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-frequency-stack/description/&#34;&gt;895. 最大频率栈&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;设计一个类似堆栈的数据结构，将元素推入堆栈，并从堆栈中弹出出现频率最高的元素。&lt;/p&gt;
&lt;p&gt;实现 FreqStack 类:&lt;/p&gt;
&lt;p&gt;FreqStack() 构造一个空的堆栈。&lt;br&gt;void push(int val) 将一个整数 val 压入栈顶。&lt;br&gt;int pop() 删除并返回堆栈中出现频率最高的元素。&lt;br&gt;如果出现频率最高的元素不只一个，则移除并返回最接近栈顶的元素。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&amp;quot;FreqStack&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[null,null,null,null,null,null,null,5,7,5,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FreqStack = new FreqStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.push (5);//堆栈为 [5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.push (7);//堆栈是 [5,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.push (5);//堆栈是 [5,7,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.push (7);//堆栈是 [5,7,5,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.push (4);//堆栈是 [5,7,5,7,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.push (5);//堆栈是 [5,7,5,7,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.pop ();//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,5,7,4]。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.pop ();//返回 7 ，因为 5 和 7 出现频率最高，但7最接近顶部。堆栈变成 [5,7,5,4]。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.pop ();//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,4]。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freqStack.pop ();//返回 4 ，因为 4, 5 和 7 出现频率最高，但 4 是最接近顶部的。堆栈变成 [5,7]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;= val &amp;lt;= $10^9$&lt;/li&gt;
&lt;li&gt;push 和 pop 的操作数不大于 $2 * 10^4$。&lt;/li&gt;
&lt;li&gt;输入保证在调用 pop 之前堆栈中至少有一个元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FreqStack&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;FreqStack&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        maxFreq = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        freq[val]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        group[freq[val]].&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        maxFreq = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(maxFreq, freq[val]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; val = group[maxFreq].&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        freq[val]--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        group[maxFreq].&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (group[maxFreq].&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            maxFreq--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; freq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, stack&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; group;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxFreq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(1)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/11/26/LeetCode/882-%E7%BB%86%E5%88%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/</guid>
            <title>882. 细分图中的可到达节点</title>
            <link>https://x-17.top/2022/11/26/LeetCode/882-%E7%BB%86%E5%88%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Sat, 26 Nov 2022 13:14:44 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;882-细分图中的可到达节点&#34;&gt;&lt;a href=&#34;#882-细分图中的可到达节点&#34; class=&#34;headerlink&#34; title=&#34;882. 细分图中的可到达节点&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/description/&#34;&gt;882. 细分图中的可到达节点&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;给你一个无向图（原始图），图中有 n 个节点，编号从 0 到 n - 1 。你决定将图中的每条边 细分 为一条节点链，每条边之间的新节点数各不相同。&lt;/p&gt;
&lt;p&gt;图用由边组成的二维数组 edges 表示，其中 edges[i] = [ui, vi, cnti] 表示原始图中节点 ui 和 vi 之间存在一条边，cnti 是将边 细分 后的新节点总数。注意，cnti == 0 表示边不可细分。&lt;/p&gt;
&lt;p&gt;要 细分 边 [ui, vi] ，需要将其替换为 (cnti + 1) 条新边，和 cnti 个新节点。新节点为 x1, x2, …, xcnti ，新边为 [ui, x1], [x1, x2], [x2, x3], …, [xcnti+1, xcnti], [xcnti, vi] 。&lt;/p&gt;
&lt;p&gt;现在得到一个 新的细分图 ，请你计算从节点 0 出发，可以到达多少个节点？如果节点间距离是 maxMoves 或更少，则视为 可以到达 。&lt;/p&gt;
&lt;p&gt;给你原始图和 maxMoves ，返回 新的细分图中从节点 0 出发 可到达的节点数 。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;img src=&#34;http://img.x-17.top/leetcode/origfinal.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：边的细分情况如上图所示。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;可以到达的节点已经用黄色标注出来。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：节点 0 与图的其余部分没有连通，所以只有节点 0 可以到达。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;= edges.length &amp;lt;= min(n * (n - 1) / 2, $10^4$)&lt;/li&gt;
&lt;li&gt;edges[i].length == 3&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= $u_i$ &amp;lt; $v_i$ &amp;lt; n&lt;/li&gt;
&lt;li&gt;图中 不存在平行边&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= cnti &amp;lt;= $10^4$&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= maxMoves &amp;lt;= $10^9$&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 3000&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; u * n + v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;reachableNodes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; edges, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxMoves, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;pair&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&#34;built_in&#34;&gt;adList&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;edge : edges) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u = edge[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], v = edge[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], nodes = edge[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            adList[u].&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;(v, nodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            adList[v].&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;(u, nodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; used;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; visited;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; reachableNodes = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        priority_queue&amp;lt;pair&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;, vector&amp;lt;pair&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; pq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pq.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!pq.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; pq.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;().first &amp;lt;= maxMoves) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; [step, u] = pq.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pq.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (visited.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(u)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            visited.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(u);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            reachableNodes++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; [v, nodes] : adList[u]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nodes + step + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;= maxMoves &amp;amp;&amp;amp; !visited.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(v)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    pq.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(nodes + step + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                used[&lt;span class=&#34;built_in&#34;&gt;encode&lt;/span&gt;(u, v, n)] = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(nodes, maxMoves - step);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;edge : edges) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u = edge[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], v = edge[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], nodes = edge[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            reachableNodes += &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(nodes, used[&lt;span class=&#34;built_in&#34;&gt;encode&lt;/span&gt;(u, v, n)] + used[&lt;span class=&#34;built_in&#34;&gt;encode&lt;/span&gt;(v, u, n)]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; reachableNodes;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(E*logV)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(V+E)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/11/22/LeetCode/878-%E7%AC%AC-N-%E4%B8%AA%E7%A5%9E%E5%A5%87%E6%95%B0%E5%AD%97/</guid>
            <title>878. 第 N 个神奇数字</title>
            <link>https://x-17.top/2022/11/22/LeetCode/878-%E7%AC%AC-N-%E4%B8%AA%E7%A5%9E%E5%A5%87%E6%95%B0%E5%AD%97/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Tue, 22 Nov 2022 20:20:25 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;878-第-N-个神奇数字&#34;&gt;&lt;a href=&#34;#878-第-N-个神奇数字&#34; class=&#34;headerlink&#34; title=&#34;878. 第 N 个神奇数字&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/nth-magical-number/description/&#34;&gt;878. 第 N 个神奇数字&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一个正整数如果能被 a 或 b 整除，那么它是神奇的。&lt;/p&gt;
&lt;p&gt;给定三个整数 n , a , b ，返回第 n 个神奇的数字。因为答案可能很大，所以返回答案 对 $10^9 + 7$ 取模 后的值。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：n = 1, a = 2, b = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：n = 4, a = 2, b = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= $10^9$&lt;/li&gt;
&lt;li&gt;2 &amp;lt;= a, b &amp;lt;= 4 * $10^4$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; MOD = &lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;nthMagicalNumber&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; l = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; r = (&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;) n * &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c = &lt;span class=&#34;built_in&#34;&gt;lcm&lt;/span&gt;(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (l &amp;lt;= r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; mid = (l + r) / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; cnt = mid / a + mid / b - mid / c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cnt &amp;gt;= n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                r = mid - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                l = mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (r + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) % MOD;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(log(n*max(a,b)))$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/11/18/LeetCode/891-%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C/</guid>
            <title>891. 子序列宽度之和</title>
            <link>https://x-17.top/2022/11/18/LeetCode/891-%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Fri, 18 Nov 2022 11:58:33 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;891-子序列宽度之和&#34;&gt;&lt;a href=&#34;#891-子序列宽度之和&#34; class=&#34;headerlink&#34; title=&#34;891. 子序列宽度之和&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/sum-of-subsequence-widths/description/&#34;&gt;891. 子序列宽度之和&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一个序列的 宽度 定义为该序列中最大元素和最小元素的差值。&lt;/p&gt;
&lt;p&gt;给你一个整数数组 nums ，返回 nums 的所有非空 子序列 的 宽度之和 。由于答案可能非常大，请返回对 109 + 7 取余 后的结果。&lt;/p&gt;
&lt;p&gt;子序列 定义为从一个数组里删除一些（或者不删除）元素，但不改变剩下元素的顺序得到的数组。例如，[3,6,2,7] 就是数组 [0,3,1,6,2,2,7] 的一个子序列。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [2,1,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：子序列为 [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3] 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;相应的宽度是 0, 0, 0, 1, 1, 2, 2 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;宽度之和是 6 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= $10^5$&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= nums[i] &amp;lt;= $10^5$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sumSubseqWidths&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(nums.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), nums.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; res = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, mod = &lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; x = nums[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], y = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j &amp;lt; nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = (res + nums[j] * (y - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) - x) % mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = (x * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; + nums[j]) % mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y = y * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; % mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (res + mod) % mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(nlogn)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(logn)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/11/14/LeetCode/805-%E6%95%B0%E7%BB%84%E7%9A%84%E5%9D%87%E5%80%BC%E5%88%86%E5%89%B2/</guid>
            <title>805. 数组的均值分割</title>
            <link>https://x-17.top/2022/11/14/LeetCode/805-%E6%95%B0%E7%BB%84%E7%9A%84%E5%9D%87%E5%80%BC%E5%88%86%E5%89%B2/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Mon, 14 Nov 2022 16:29:37 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;805-数组的均值分割&#34;&gt;&lt;a href=&#34;#805-数组的均值分割&#34; class=&#34;headerlink&#34; title=&#34;805. 数组的均值分割&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/split-array-with-same-average/&#34;&gt;805. 数组的均值分割&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;给定你一个整数数组 nums&lt;/p&gt;
&lt;p&gt;我们要将 nums 数组中的每个元素移动到 A 数组 或者 B 数组中，使得 A 数组和 B 数组不为空，并且 average(A) == average(B) 。&lt;/p&gt;
&lt;p&gt;如果可以完成则返回true ， 否则返回 false  。&lt;/p&gt;
&lt;p&gt;注意：对于数组 arr ,  average(arr) 是 arr 的所有元素的和除以 arr 长度。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: nums = [1,2,3,4,5,6,7,8]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 我们可以将数组分割为 [1,4,5,8] 和 [2,3,6,7], 他们的平均值都是4.5。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2:&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: nums = [3,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= 30&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= nums[i] &amp;lt;= $10^4$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;splitArraySameAverage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(), m = n / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sum = &lt;span class=&#34;built_in&#34;&gt;accumulate&lt;/span&gt;(nums.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), nums.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; isPossible = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sum * i % n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                isPossible = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!isPossible) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&#34;built_in&#34;&gt;dp&lt;/span&gt;(m + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num: nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = m; i &amp;gt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x: dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; curr = x + num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (curr * n == sum * i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[i].&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(curr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n^2*sum(nums))$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n*sum(nums))$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/11/10/LeetCode/864-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</guid>
            <title>864. 获取所有钥匙的最短路径</title>
            <link>https://x-17.top/2022/11/10/LeetCode/864-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Thu, 10 Nov 2022 11:44:16 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;864-获取所有钥匙的最短路径&#34;&gt;&lt;a href=&#34;#864-获取所有钥匙的最短路径&#34; class=&#34;headerlink&#34; title=&#34;864. 获取所有钥匙的最短路径&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/shortest-path-to-get-all-keys/description/&#34;&gt;864. 获取所有钥匙的最短路径&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;给定一个二维网格 grid ，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘.’ 代表一个空房间&lt;/li&gt;
&lt;li&gt;‘#’ 代表一堵&lt;/li&gt;
&lt;li&gt;‘@’ 是起点&lt;/li&gt;
&lt;li&gt;小写字母代表钥匙&lt;/li&gt;
&lt;li&gt;大写字母代表锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。&lt;/p&gt;
&lt;p&gt;假设 k 为 钥匙/锁 的个数，且满足 1 &amp;lt;= k &amp;lt;= 6，字母表中的前 k 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。&lt;/p&gt;
&lt;p&gt;返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回 -1 。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.x-17.top/leetcode/lc-keys2.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：grid = [&amp;quot;@.a.#&amp;quot;,&amp;quot;###.#&amp;quot;,&amp;quot;b.A.B&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：目标是获得所有钥匙，而不是打开所有锁。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.x-17.top/leetcode/lc-key2.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：grid = [&amp;quot;@..aA&amp;quot;,&amp;quot;..B#.&amp;quot;,&amp;quot;....b&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3:&lt;br&gt;&lt;img src=&#34;http://img.x-17.top/leetcode/lc-keys3.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: grid = [&amp;quot;@Aa&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m == grid.length&lt;/li&gt;
&lt;li&gt;n == grid[i].length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= m, n &amp;lt;= 30&lt;/li&gt;
&lt;li&gt;grid[i][j] 只含有 ‘.’, ‘#’, ‘@’, ‘a’-‘f’ 以及 ‘A’-‘F’&lt;/li&gt;
&lt;li&gt;钥匙的数目范围是 [1, 6] &lt;/li&gt;
&lt;li&gt;每个钥匙都对应一个 不同 的字母&lt;/li&gt;
&lt;li&gt;每个钥匙正好打开一个对应的锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h1&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;shortestPathAllKeys&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;string&amp;gt;&amp;amp; grid)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m = grid.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(), n = grid[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sx = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, sy = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; key_to_idx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (grid[i][j] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;@&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    sx = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    sy = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;islower&lt;/span&gt;(grid[i][j])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!key_to_idx.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(grid[i][j])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; idx = key_to_idx.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        key_to_idx[grid[i][j]] = idx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue&amp;lt;tuple&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&#34;built_in&#34;&gt;dist&lt;/span&gt;(m, vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;(n, &lt;span class=&#34;built_in&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; key_to_idx.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(sx, sy, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dist[sx][sy][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!q.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; [x, y, mask] = q.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nx = x + dirs[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ny = y + dirs[i][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nx &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nx &amp;lt; m &amp;amp;&amp;amp; ny &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ny &amp;lt; n &amp;amp;&amp;amp; grid[nx][ny] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;#&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (grid[nx][ny] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt; || grid[nx][ny] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;@&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (dist[nx][ny][mask] == &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            dist[nx][ny][mask] = dist[x][y][mask] + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            q.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(nx, ny, mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;islower&lt;/span&gt;(grid[nx][ny])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; idx = key_to_idx[grid[nx][ny]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (dist[nx][ny][mask | (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; idx)] == &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            dist[nx][ny][mask | (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; idx)] = dist[x][y][mask] + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((mask | (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; idx)) == (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; key_to_idx.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dist[nx][ny][mask | (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; idx)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            q.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(nx, ny, mask | (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; idx));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; idx = key_to_idx[&lt;span class=&#34;built_in&#34;&gt;tolower&lt;/span&gt;(grid[nx][ny])];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((mask &amp;amp; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; idx)) &amp;amp;&amp;amp; dist[nx][ny][mask] == &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            dist[nx][ny][mask] = dist[x][y][mask] + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            q.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;(nx, ny, mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; dirs[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &amp;#123;&amp;#123;&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(mn*2^k)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(mn*2^k)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/11/05/LeetCode/1106-%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
            <title>1106. 解析布尔表达式</title>
            <link>https://x-17.top/2022/11/05/LeetCode/1106-%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Sat, 05 Nov 2022 11:05:18 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;1106-解析布尔表达式&#34;&gt;&lt;a href=&#34;#1106-解析布尔表达式&#34; class=&#34;headerlink&#34; title=&#34;1106. 解析布尔表达式&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/parsing-a-boolean-expression/description/&#34;&gt;1106. 解析布尔表达式&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;给你一个以字符串形式表述的 布尔表达式（boolean） expression，返回该式的运算结果。&lt;/p&gt;
&lt;p&gt;有效的表达式需遵循以下约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“t”，运算结果为 True&lt;/li&gt;
&lt;li&gt;“f”，运算结果为 False&lt;/li&gt;
&lt;li&gt;“!(expr)”，运算过程为对内部表达式 expr 进行逻辑 非的运算（NOT）&lt;/li&gt;
&lt;li&gt;“&amp;amp;(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 与的运算（AND）&lt;/li&gt;
&lt;li&gt;“|(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 或的运算（OR）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：expression = &amp;quot;!(f)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：expression = &amp;quot;|(f,t)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：expression = &amp;quot;&amp;amp;(t,f)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：expression = &amp;quot;|(&amp;amp;(t,f,t),!(t))&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= expression.length &amp;lt;= 20000&lt;/li&gt;
&lt;li&gt;expression[i] 由 {‘(‘, ‘)’, ‘&amp;amp;’, ‘|’, ‘!’, ‘t’, ‘f’, ‘,’} 中的字符组成。&lt;/li&gt;
&lt;li&gt;expression 是以上述形式给出的有效表达式，表示一个布尔值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;parseBoolExpr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(string expression)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stack&amp;lt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;&amp;gt; stk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = expression.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; c = expression[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c == &lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c != &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                stk.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, f = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (stk.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;() != &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; val = stk.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stk.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (val == &lt;span class=&#34;string&#34;&gt;&amp;#x27;t&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        t++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        f++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                stk.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; op = stk.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                stk.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (op) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;!&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stk.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(f == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;t&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;#x27;f&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;amp;&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stk.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(f == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;t&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;#x27;f&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;|&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stk.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(t &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;t&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;#x27;f&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stk.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;() == &lt;span class=&#34;string&#34;&gt;&amp;#x27;t&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/10/26/LeetCode/862-%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-K-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
            <title>862. 和至少为 K 的最短子数组</title>
            <link>https://x-17.top/2022/10/26/LeetCode/862-%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-K-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Wed, 26 Oct 2022 12:04:54 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;862-和至少为-K-的最短子数组&#34;&gt;&lt;a href=&#34;#862-和至少为-K-的最短子数组&#34; class=&#34;headerlink&#34; title=&#34;862. 和至少为 K 的最短子数组&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/&#34;&gt;862. 和至少为 K 的最短子数组&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;给你一个整数数组 nums 和一个整数 k ，找出 nums 中和至少为 k 的 最短非空子数组 ，并返回该子数组的长度。如果不存在这样的 子数组 ，返回 -1 。&lt;/p&gt;
&lt;p&gt;子数组 是数组中 连续 的一部分。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1], k = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1,2], k = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [2,-1,2], k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= $10^5$&lt;/li&gt;
&lt;li&gt;$-10^5$ &amp;lt;= nums[i] &amp;lt;= $10^5$&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= k &amp;lt;= $10^9$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;shortestSubarray&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;preSumArr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            preSumArr[i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = preSumArr[i] + nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; qu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; curSum = preSumArr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!qu.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; curSum - preSumArr[qu.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;()] &amp;gt;= k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(res, i - qu.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                qu.&lt;span class=&#34;built_in&#34;&gt;pop_front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!qu.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; preSumArr[qu.&lt;span class=&#34;built_in&#34;&gt;back&lt;/span&gt;()] &amp;gt;= curSum) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                qu.&lt;span class=&#34;built_in&#34;&gt;pop_back&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            qu.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res &amp;lt; n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ? res : &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/10/22/LeetCode/1235-%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/</guid>
            <title>1235. 规划兼职工作</title>
            <link>https://x-17.top/2022/10/22/LeetCode/1235-%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Sat, 22 Oct 2022 08:35:21 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;1235-规划兼职工作&#34;&gt;&lt;a href=&#34;#1235-规划兼职工作&#34; class=&#34;headerlink&#34; title=&#34;1235. 规划兼职工作&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-profit-in-job-scheduling/&#34;&gt;1235. 规划兼职工作&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你打算利用空闲时间来做兼职工作赚些零花钱。&lt;/p&gt;
&lt;p&gt;这里有 n 份兼职工作，每份工作预计从 startTime[i] 开始到 endTime[i] 结束，报酬为 profit[i]。&lt;/p&gt;
&lt;p&gt;给你一份兼职工作表，包含开始时间 startTime，结束时间 endTime 和预计报酬 profit 三个数组，请你计算并返回可以获得的最大报酬。&lt;/p&gt;
&lt;p&gt;注意，时间上出现重叠的 2 份工作不能同时进行。&lt;/p&gt;
&lt;p&gt;如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.x-17.top/leetcode/sample1_1584.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;我们选出第 1 份和第 4 份工作， &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.x-17.top/leetcode/sample22_1584.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;我们选择第 1，4，5 份工作。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;共获得报酬 150 = 20 + 70 + 60。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.x-17.top/leetcode/sample3_1584.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= startTime.length == endTime.length == profit.length &amp;lt;= $5 * 10^4$&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= startTime[i] &amp;lt; endTime[i] &amp;lt;= $10^9$&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= profit[i] &amp;lt;= $10^4$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;jobScheduling&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;startTime, vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;endTime, vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;profit)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = startTime.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&#34;built_in&#34;&gt;jobs&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            jobs[i] = &amp;#123;startTime[i], endTime[i], profit[i]&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(jobs.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), jobs.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), [](&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;job1, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;job2) -&amp;gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; job1[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &amp;lt; job2[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k = &lt;span class=&#34;built_in&#34;&gt;upper_bound&lt;/span&gt;(jobs.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), jobs.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;() + i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, jobs[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], [&amp;amp;](&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; st, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;job) -&amp;gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; st &amp;lt; job[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;) - jobs.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[i] = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], dp[k] + jobs[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(nlogn)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/10/18/LeetCode/902-%E6%9C%80%E5%A4%A7%E4%B8%BA-N-%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/</guid>
            <title>902. 最大为 N 的数字组合</title>
            <link>https://x-17.top/2022/10/18/LeetCode/902-%E6%9C%80%E5%A4%A7%E4%B8%BA-N-%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Tue, 18 Oct 2022 07:58:48 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;902-最大为-N-的数字组合&#34;&gt;&lt;a href=&#34;#902-最大为-N-的数字组合&#34; class=&#34;headerlink&#34; title=&#34;902. 最大为 N 的数字组合&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/&#34;&gt;902. 最大为 N 的数字组合&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;给定一个按 非递减顺序 排列的数字数组 digits 。你可以用任意次数 digits[i] 来写的数字。例如，如果 digits = [‘1’,’3’,’5’]，我们可以写数字，如 ‘13’, ‘551’, 和 ‘1351315’。&lt;/p&gt;
&lt;p&gt;返回 可以生成的小于或等于给定整数 n 的正整数的个数 。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：digits = [&amp;quot;1&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;5&amp;quot;,&amp;quot;7&amp;quot;], n = 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;可写出的 20 个数字是：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：digits = [&amp;quot;1&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;9&amp;quot;], n = 1000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：29523&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81 个四位数字，243 个五位数字，729 个六位数字，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2187 个七位数字，6561 个八位数字和 19683 个九位数字。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;总共，可以使用D中的数字写出 29523 个整数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3:&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：digits = [&amp;quot;7&amp;quot;], n = 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= digits.length &amp;lt;= 9&lt;/li&gt;
&lt;li&gt;digits[i].length == 1&lt;/li&gt;
&lt;li&gt;digits[i] 是从 ‘1’ 到 ‘9’ 的数&lt;/li&gt;
&lt;li&gt;digits 中的所有值都 不同&lt;/li&gt;
&lt;li&gt;digits 按 非递减顺序 排列&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= $10^9$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;数位DP&lt;br&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;atMostNGivenDigitSet&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;string&amp;gt;&amp;amp; digits, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        string s = &lt;span class=&#34;built_in&#34;&gt;to_string&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m = digits.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(), k = s.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&#34;built_in&#34;&gt;dp&lt;/span&gt;(k + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= k; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; m; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (digits[j][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == s[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[i][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (digits[j][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;lt; s[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] += dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dp[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] += m + dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] * m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp[k][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + dp[k][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(klogn)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(logn)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/10/14/LeetCode/940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97-II/</guid>
            <title>940. 不同的子序列 II</title>
            <link>https://x-17.top/2022/10/14/LeetCode/940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97-II/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Fri, 14 Oct 2022 08:30:40 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;940-不同的子序列-II&#34;&gt;&lt;a href=&#34;#940-不同的子序列-II&#34; class=&#34;headerlink&#34; title=&#34;940. 不同的子序列 II&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/distinct-subsequences-ii/&#34;&gt;940. 不同的子序列 II&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;给定一个字符串 s，计算 s 的 不同非空子序列 的个数。因为结果可能很大，所以返回答案需要对 $10^9 + 7$ 取余 。&lt;/p&gt;
&lt;p&gt;字符串的 子序列 是经由原字符串删除一些（也可能不删除）字符但不改变剩余字符相对位置的一个新字符串。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，”ace” 是 “abcde” 的一个子序列，但 “aec” 不是。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;abc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：7 个不同的子序列分别是 &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ac&amp;quot;, &amp;quot;bc&amp;quot;, 以及 &amp;quot;abc&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;aba&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：6 个不同的子序列分别是 &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ba&amp;quot;, &amp;quot;aa&amp;quot; 以及 &amp;quot;aba&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：3 个不同的子序列分别是 &amp;quot;a&amp;quot;, &amp;quot;aa&amp;quot; 以及 &amp;quot;aaa&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s.length &amp;lt;= 2000&lt;/li&gt;
&lt;li&gt;s 仅由小写英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;这题用到了动态规划，我们可以用一个长度为26的数组存储每一个字母位于末位时含有的不重复子序列个数，最初我们将其初始化为0，对于第i位的字母，以它为最后一位的子序列数就是其前缀的不重复子序列数量+1个，而这其中重复的子序列个数，就是我们存储的这个字母前一次为子序列最后一位时不重复子序列的个数。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;distinctSubseqII&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(string s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;s.&lt;span class=&#34;built_in&#34;&gt;length&lt;/span&gt;();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m=s[i]-&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n=g[m];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            g[m]=ans+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans=((ans+g[m]-n)%(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)(&lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)+(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)(&lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;))%(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)(&lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n+|\sum|)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(|\sum|)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/10/10/LeetCode/801-%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/</guid>
            <title>801. 使序列递增的最小交换次数</title>
            <link>https://x-17.top/2022/10/10/LeetCode/801-%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/</link>
            <category>每日一题</category>
            <category>Hard</category>
            <pubDate>Mon, 10 Oct 2022 07:34:41 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;801-使序列递增的最小交换次数&#34;&gt;&lt;a href=&#34;#801-使序列递增的最小交换次数&#34; class=&#34;headerlink&#34; title=&#34;801. 使序列递增的最小交换次数&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/&#34;&gt;801. 使序列递增的最小交换次数&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;我们有两个长度相等且不为空的整型数组 nums1 和 nums2 。在一次操作中，我们可以交换 nums1[i] 和 nums2[i]的元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，如果 nums1 = [1,2,3,8] ， nums2 =[5,6,7,4] ，你可以交换 i = 3 处的元素，得到 nums1 =[1,2,3,4] 和 nums2 =[5,6,7,8] 。&lt;br&gt;返回 使 nums1 和 nums2 严格递增 所需操作的最小次数 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组 arr 严格递增 且  arr[0] &amp;lt; arr[1] &amp;lt; arr[2] &amp;lt; … &amp;lt; arr[arr.length - 1] 。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用例保证可以实现操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 1:&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: nums1 = [1,3,5,4], nums2 = [1,2,3,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;交换 A[3] 和 B[3] 后，两个数组如下:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;两个数组均为严格递增的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2:&lt;br&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$2 &amp;lt;= nums1.length &amp;lt;= 10^5$&lt;/li&gt;
&lt;li&gt;$nums2.length == nums1.length$&lt;/li&gt;
&lt;li&gt;$0 &amp;lt;= nums1[i], nums2[i] &amp;lt;= 2 * 10^5$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;首先，在位置i会出现不需要交换，需要交换和不能交换三种情况，即如下两式其中一个成立或者同时成立&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$nums_1[i] &amp;gt; nums_1[i-1] 且 nums_2[i] &amp;gt; nums_2[i-1] $&lt;/li&gt;
&lt;li&gt;$nums_1[i] &amp;gt; nums_2[i-1] 且 nums_2[i] &amp;gt; nums_1[i-1] $&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，&lt;br&gt;用&lt;code&gt;dp[i][0]&lt;/code&gt;表示到第i位满足要求且第i位不进行交换；&lt;br&gt;用&lt;code&gt;dp[i][1]&lt;/code&gt;表示到第i位满足要求且第i位进行交换；&lt;br&gt;当满足式1而不满足式2时，有&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;
\begin{cases}
dp[i][0] = dp[i-1][0]\\
dp[i][1] = dp[i-1][1] + 1
\end{cases}&lt;/script&gt;&lt;p&gt;当满足式2而不满足式1时，有&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;
\begin{cases}
dp[i][0] = dp[i-1][1]\\
dp[i][1] = dp[i-1][0] + 1
\end{cases}&lt;/script&gt;&lt;p&gt;当两式同时满足时，有&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;
\begin{cases}
dp[i][0] = min\{dp[i-1][0],dp[i-1][1]\}\\
dp[i][1] = min\{dp[i-1][1],dp[i-1][0]\} + 1
\end{cases}&lt;/script&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;minSwap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums1, vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = nums1.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, b = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; at = a, bt = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a = b = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nums1[i] &amp;gt; nums1[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &amp;amp;&amp;amp; nums2[i] &amp;gt; nums2[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(a, at);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(b, bt + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nums1[i] &amp;gt; nums2[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &amp;amp;&amp;amp; nums2[i] &amp;gt; nums1[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(a, bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(b, at + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/10/06/LeetCode/927-%E4%B8%89%E7%AD%89%E5%88%86/</guid>
            <title>927. 三等分</title>
            <link>https://x-17.top/2022/10/06/LeetCode/927-%E4%B8%89%E7%AD%89%E5%88%86/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Thu, 06 Oct 2022 13:23:56 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;927-三等分&#34;&gt;&lt;a href=&#34;#927-三等分&#34; class=&#34;headerlink&#34; title=&#34;927. 三等分&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/three-equal-parts/&#34;&gt;927. 三等分&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个由 0 和 1 组成的数组 arr ，将数组分成  3 个非空的部分 ，使得所有这些部分表示相同的二进制值。&lt;/p&gt;
&lt;p&gt;如果可以做到，请返回任何 [i, j]，其中 i+1 &amp;lt; j，这样一来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;arr[0], arr[1], …, arr[i] 为第一部分；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;arr[i + 1], arr[i + 2], …, arr[j - 1] 为第二部分；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;arr[j], arr[j + 1], …, arr[arr.length - 1] 为第三部分。&lt;/li&gt;
&lt;li&gt;这三个部分所表示的二进制值相等。&lt;/li&gt;
&lt;li&gt;如果无法做到，就返回 [-1, -1]。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，[1,1,0] 表示十进制中的 6，而不会是 3。此外，前导零也是被允许的，所以 [0,1,1] 和 [1,1] 表示相同的值。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,0,1,0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[0,3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,1,0,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[-1,-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,1,0,0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[0,2]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;3 &amp;lt;= arr.length &amp;lt;= 3 * 104&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;arr[i] 是 0 或 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;threeEqualParts&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; arr)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sum = &lt;span class=&#34;built_in&#34;&gt;accumulate&lt;/span&gt;(arr.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), arr.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sum % &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sum == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; partial = sum / &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; first = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, second = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, third = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, cur = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (arr[i] == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    first = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur == partial) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    second = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * partial) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    third = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cur++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len = (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)arr.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - third;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (first + len &amp;lt;= second &amp;amp;&amp;amp; second + len &amp;lt;= third) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (third + i &amp;lt; arr.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (arr[first + i] != arr[second + i] || arr[first + i] != arr[third + i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;first + len - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, second + len&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/09/26/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-19-%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</guid>
            <title>面试题 17.19. 消失的两个数字</title>
            <link>https://x-17.top/2022/09/26/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-19-%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Mon, 26 Sep 2022 07:31:31 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/missing-two-lcci/&#34;&gt;https://leetcode.cn/problems/missing-two-lcci/&lt;/a&gt; 给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？ 以任意顺序返回这两个数字均可。 示例 1:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: [1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: [2,3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: [2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: [1,4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nums.length &amp;lt;= 30000&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector missingTwo(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long n = nums.size() + 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int a = -accumulate(nums.cbegin(), nums.cend(), -(1 + n) * n / 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int b = -inner_product(nums.cbegin(), nums.cend(), nums.cbegin(), -(1 + n) * n / 2 * (2 * n + 1) / 3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int tmp = sqrt(2 * b - a * a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;#123; (a + tmp) / 2, (a - tmp) / 2 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度\(O(n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度\(O(1)\)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/09/21/LeetCode/854-%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BA-k-%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
            <title>854. 相似度为 K 的字符串</title>
            <link>https://x-17.top/2022/09/21/LeetCode/854-%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BA-k-%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Wed, 21 Sep 2022 09:05:22 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/k-similar-strings/&#34;&gt;https://leetcode.cn/problems/k-similar-strings/&lt;/a&gt; 对于某些非负整数 k ，如果交换 s1 中两个字母的位置恰好 k 次，能够使结果字符串等于 s2 ，则认为字符串 s1 和 s2 的 相似度为 k 。 给你两个字母异位词 s1 和 s2 ，返回 s1 和 s2 的相似度 k 的最小值。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s1 = &amp;quot;ab&amp;quot;, s2 = &amp;quot;ba&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s1 = &amp;quot;abc&amp;quot;, s2 = &amp;quot;bca&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s1.length &amp;lt;= 20&lt;/li&gt;
&lt;li&gt;s2.length == s1.length&lt;/li&gt;
&lt;li&gt;s1 和 s2  只包含集合 {‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’} 中的小写字母&lt;/li&gt;
&lt;li&gt;s2 是 s1 的一个字母异位词&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int kSimilarity(string s1, string s2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = s1.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue&amp;lt;pair&amp;lt;string, int&amp;gt;&amp;gt; qu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_set&amp;lt;string&amp;gt; visit;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        qu.emplace(s1, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        visit.emplace(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int step = 0;; step++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int sz = qu.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int i = 0; i &amp;lt; sz; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                auto [cur, pos] = qu.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                qu.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (cur == s2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return step;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                while (pos &amp;lt; n &amp;amp;&amp;amp; cur[pos] == s2[pos]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    pos++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for (int j = pos + 1; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if (cur[j] != s2[j] &amp;amp;&amp;amp; cur[j] == s2[pos]) &amp;#123; // 剪枝，只在 cur[j] != s2[j] 时去交换&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        swap(cur[pos], cur[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        if (!visit.count(cur)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            visit.emplace(cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            qu.emplace(cur, pos + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        swap(cur[pos], cur[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/09/18/LeetCode/827-%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/</guid>
            <title>827. 最大人工岛</title>
            <link>https://x-17.top/2022/09/18/LeetCode/827-%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Sun, 18 Sep 2022 08:29:56 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/making-a-large-island/&#34;&gt;https://leetcode.cn/problems/making-a-large-island/&lt;/a&gt; 给你一个大小为 n x n 二进制矩阵 grid 。最多 只能将一格 0 变成 1 。 返回执行此操作后，grid 中最大的岛屿面积是多少？ 岛屿 由一组上、下、左、右四个方向相连的 1 形成。 示例 1:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: grid = [[1, 0], [0, 1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: grid = [[1, 1], [1, 0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 将一格0变成1，岛屿的面积扩大为 4。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: grid = [[1, 1], [1, 1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 没有0可以让我们变成1，面积依然为 4。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n == grid.length&lt;/li&gt;
&lt;li&gt;n == grid[i].length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 500&lt;/li&gt;
&lt;li&gt;grid[i][j] 为 0 或 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const vector&amp;lt;int&amp;gt; d = &amp;#123;0, -1, 0, 1, 0&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool valid(int n, int x, int y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;lt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int dfs(const vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;grid, int x, int y, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;tag, int t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = grid.size(), res = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tag[x][y] = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 4; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int x1 = x + d[i], y1 = y + d[i + 1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (valid(n, x1, y1) &amp;amp;&amp;amp; grid[x1][y1] == 1 &amp;amp;&amp;amp; tag[x1][y1] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res += dfs(grid, x1, y1, tag, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int largestIsland(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = grid.size(), res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; tag(n, vector&amp;lt;int&amp;gt;(n));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;int, int&amp;gt; area;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (grid[i][j] == 1 &amp;amp;&amp;amp; tag[i][j] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    int t = i * n + j + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    area[t] = dfs(grid, i, j, tag, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    res = max(res, area[t]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (grid[i][j] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    int z = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    unordered_set&amp;lt;int&amp;gt; connected;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    for (int k = 0; k &amp;lt; 4; k++) &amp;#123; int x = i + d[k], y = j + d[k + 1]; if (!valid(n, x, y)  tag[x][y] == 0  connected.count(tag[x][y]) &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        z += area[tag[x][y]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        connected.insert(tag[x][y]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    res = max(res, z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度\(O(n^2)\)&lt;/li&gt;
&lt;li&gt;空间复杂度\(O(n^2)\)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/09/16/LeetCode/850-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF-ii/</guid>
            <title>850. 矩形面积 II</title>
            <link>https://x-17.top/2022/09/16/LeetCode/850-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF-ii/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Fri, 16 Sep 2022 10:04:12 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rectangle-area-ii/&#34;&gt;https://leetcode.cn/problems/rectangle-area-ii/&lt;/a&gt; 我们给出了一个（轴对齐的）二维矩形列表 rectangles 。 对于 rectangle[i] = [x1, y1, x2, y2]，其中（x1，y1）是矩形 i 左下角的坐标， (xi1, yi1) 是该矩形 左下角 的坐标， (xi2, yi2) 是该矩形 右上角 的坐标。 计算平面中所有 rectangles 所覆盖的 总面积 。任何被两个或多个矩形覆盖的区域应只计算 一次 。 返回 总面积 。因为答案可能太大，返回 \(10^9 + 7\) 的 模 。 示例 1： &lt;img src=&#34;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：如图所示，三个矩形覆盖了总面积为6的区域。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从(1,1)到(2,2)，绿色矩形和红色矩形重叠。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从(1,0)到(2,3)，三个矩形都重叠。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：rectangles = [[0,0,1000000000,1000000000]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释：答案是 \(10^{18} 对 (10^9 + 7) \)取模的结果， 即 49 。 提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= rectangles.length &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;rectanges[i].length = 4&lt;/li&gt;
&lt;li&gt;\(0 &amp;lt;= x_{i1}, y_{i1}, x_{i2}, y_{i2} &amp;lt;= 10^9\)&lt;/li&gt;
&lt;li&gt;矩形叠加覆盖后的总面积不会超越 \(2^{63}  - 1 \)，这意味着可以用一个 64 位有符号整数来保存面积结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int rectangleArea(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; rectangles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = rectangles.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; hbound;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (const auto&amp;amp; rect: rectangles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 下边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hbound.push_back(rect[1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 上边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hbound.push_back(rect[3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(hbound.begin(), hbound.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hbound.erase(unique(hbound.begin(), hbound.end()), hbound.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int m = hbound.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 「思路与算法部分」的 length 数组并不需要显式地存储下来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // length[i] 可以通过 hbound[i+1] - hbound[i] 得到&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; seg(m - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;tuple&amp;lt;int, int, int&amp;gt;&amp;gt; sweep;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 左边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sweep.emplace_back(rectangles[i][0], i, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 右边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sweep.emplace_back(rectangles[i][2], i, -1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(sweep.begin(), sweep.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long long ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; sweep.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int j = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            while (j + 1 &amp;lt; sweep.size() &amp;amp;&amp;amp; get&amp;lt;0&amp;gt;(sweep[i]) == get&amp;lt;0&amp;gt;(sweep[j + 1])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ++j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (j + 1 == sweep.size()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 一次性地处理掉一批横坐标相同的左右边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int k = i; k &amp;lt;= j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                auto&amp;amp;&amp;amp; [_, idx, diff] = sweep[k];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                int left = rectangles[idx][1], right = rectangles[idx][3];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for (int x = 0; x &amp;lt; m - 1; ++x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if (left &amp;lt;= hbound[x] &amp;amp;&amp;amp; hbound[x + 1] &amp;lt;= right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        seg[x] += diff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int cover = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int k = 0; k &amp;lt; m - 1; ++k) &amp;#123; if (seg[k] &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cover += (hbound[k + 1] - hbound[k]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans += static_cast&amp;lt;long long&amp;gt;(cover) * (get&amp;lt;0&amp;gt;(sweep[j + 1]) - get&amp;lt;0&amp;gt;(sweep[j]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans % static_cast&amp;lt;int&amp;gt;(1e9 + 7);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度\(O(n^2)\)&lt;/li&gt;
&lt;li&gt;空间复杂度\(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/09/11/LeetCode/857-%E9%9B%87%E4%BD%A3-k-%E5%90%8D%E5%B7%A5%E4%BA%BA%E7%9A%84%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC/</guid>
            <title>857. 雇佣 K 名工人的最低成本</title>
            <link>https://x-17.top/2022/09/11/LeetCode/857-%E9%9B%87%E4%BD%A3-k-%E5%90%8D%E5%B7%A5%E4%BA%BA%E7%9A%84%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Sun, 11 Sep 2022 18:19:46 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/&#34;&gt;https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/&lt;/a&gt; 有 n 名工人。 给定两个数组 quality 和 wage ，其中，quality[i] 表示第 i 名工人的工作质量，其最低期望工资为 wage[i] 。 现在我们想雇佣 k 名工人组成一个工资组。在雇佣 一组 k 名工人时，我们必须按照下述规则向他们支付工资： 对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。 工资组中的每名工人至少应当得到他们的最低期望工资。 给定整数 k ，返回 组成满足上述条件的付费群体所需的最小金额 。在实际答案的 10-5 以内的答案将被接受。。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入： quality = [10,20,5], wage = [70,50,30], k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出： 105.00000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释： 我们向 0 号工人支付 70，向 2 号工人支付 35。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入： quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出： 30.66667&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释： 我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n == quality.length == wage.length&lt;/li&gt;
&lt;li&gt;\(1 &amp;lt;= k &amp;lt;= n &amp;lt;= 10^4\)&lt;/li&gt;
&lt;li&gt;\(1 &amp;lt;= quality[i], wage[i] &amp;lt;= 10^4\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    double mincostToHireWorkers(vector&amp;lt;int&amp;gt;&amp;amp; quality, vector&amp;lt;int&amp;gt;&amp;amp; wage, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = quality.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; h(n, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        iota(h.begin(), h.end(), 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(h.begin(), h.end(), [&amp;amp;](int&amp;amp; a, int&amp;amp; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return quality[a] * wage[b] &amp;gt; quality[b] * wage[a];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        double res = 1e9;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        double totalq = 0.0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, less&amp;lt;int&amp;gt;&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; k - 1; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            totalq += quality[h[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.push(quality[h[i]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = k - 1; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int idx = h[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            totalq += quality[idx];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.push(quality[idx]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            double totalc = ((double) wage[idx] / quality[idx]) * totalq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = min(res, totalc);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            totalq -= q.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度\(O(nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度\(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/09/06/LeetCode/828-%E7%BB%9F%E8%AE%A1%E5%AD%90%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</guid>
            <title>828. 统计子串中的唯一字符</title>
            <link>https://x-17.top/2022/09/06/LeetCode/828-%E7%BB%9F%E8%AE%A1%E5%AD%90%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Tue, 06 Sep 2022 15:47:08 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/&#34;&gt;https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/&lt;/a&gt; 我们定义了一个函数 countUniqueChars(s) 来统计字符串 s 中的唯一字符，并返回唯一字符的个数。 例如：s = “LEETCODE” ，则其中 “L”, “T”,”C”,”O”,”D” 都是唯一字符，因为它们只出现一次，所以 countUniqueChars(s) = 5 。 本题将会给你一个字符串 s ，我们需要返回 countUniqueChars(t) 的总和，其中 t 是 s 的子字符串。输入用例保证返回值为 32 位整数。 注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计 s 的所有子字符串中的唯一字符）。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: s = &amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 所有可能的子串为：&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;AB&amp;quot;,&amp;quot;BC&amp;quot; 和 &amp;quot;ABC&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;其中，每一个子串都由独特字符构成。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: s = &amp;quot;ABA&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 除了 countUniqueChars(&amp;quot;ABA&amp;quot;) = 1 之外，其余与示例 1 相同。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;LEETCODE&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：92&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s.length &amp;lt;= 10^5&lt;/li&gt;
&lt;li&gt;s 只包含大写英文字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;题意是求出给定字符串的全部子串中唯一字符的个数，因此只需要计算每个字符能在多少个子串中成为唯一字符，即一个字符分别在第i,j,k位出现的话，就应该有\((j-i)*(k-j)\)个字符串中位于j位的该字符是唯一字符。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int uniqueLetterString(string s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map&amp;lt;char,vector&amp;lt;int&amp;gt;&amp;gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;s.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a[s[i]].push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(auto it=a.begin();it!=a.end();it++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vector&amp;lt;int&amp;gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            b.push_back(-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;it-&amp;gt;second.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b.push_back(it-&amp;gt;second[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            b.push_back(s.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=1;i&amp;lt;b.size()-1;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans+=(b[i]-b[i-1])*(b[i+1]-b[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度\(O(n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度\(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/08/28/LeetCode/793-%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E5%90%8E-k-%E4%B8%AA%E9%9B%B6/</guid>
            <title>793. 阶乘函数后 K 个零</title>
            <link>https://x-17.top/2022/08/28/LeetCode/793-%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E5%90%8E-k-%E4%B8%AA%E9%9B%B6/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Sun, 28 Aug 2022 21:46:52 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/&#34;&gt;https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/&lt;/a&gt; f(x) 是 x! 末尾是 0 的数量。回想一下 x! = 1 * 2 * 3 * … * x，且 0! = 1 。 例如， f(3) = 0 ，因为 3! = 6 的末尾没有 0 ；而 f(11) = 2 ，因为 11!= 39916800 末端有 2 个 0 。 给定 k，找出返回能满足 f(x) = k 的非负整数 x 的数量。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：k = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：0!, 1!, 2!, 3!, 和 4! 均符合 k = 0 的条件。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：k = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：没有匹配到这样的 x!，符合 k = 5 的条件。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(0 &amp;lt;= k &amp;lt;= 10^9\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a href=&#34;#题解&#34; class=&#34;headerlink&#34; title=&#34;题解&#34;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;根据题意，只有因子2和5相乘能得到以0为结尾的数。 又因为2出现次数远大于5，因此只需求5为因子出现的次数（25及类似的要记多次），也可分析出所求其实只有0和5两种结果。（官方代码）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int zeta(long x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res += x / 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x /= 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    long long help(int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long long r = 5LL * k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long long l = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (l &amp;lt;= r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            long long mid = (l + r) / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (zeta(mid) &amp;lt; k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                l = mid + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                r = mid - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return r + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int preimageSizeFZF(int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return help(k + 1) - help(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O(log^2k)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O(1)\)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://x-17.top/2022/08/23/LeetCode/782-%E5%8F%98%E4%B8%BA%E6%A3%8B%E7%9B%98/</guid>
            <title>782.变为棋盘</title>
            <link>https://x-17.top/2022/08/23/LeetCode/782-%E5%8F%98%E4%B8%BA%E6%A3%8B%E7%9B%98/</link>
            <category>Hard</category>
            <category>leetcode每日一题</category>
            <pubDate>Tue, 23 Aug 2022 19:14:21 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/transform-to-chessboard/&#34;&gt;https://leetcode.cn/problems/transform-to-chessboard/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个 n x n 的二维网络 board 仅由 0 和 1 组成 。每次移动，你能任意交换两列或是两行的位置。&lt;br&gt;返回 将这个矩阵变为  “棋盘”  所需的最小移动次数 。如果不存在可行的变换，输出 -1。&lt;br&gt;“棋盘” 是指任意一格的上下左右四个方向的值均与本身不同的矩阵。&lt;br&gt;示例 1:&lt;br&gt;&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/chessboard1-grid.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;输入: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]&lt;br&gt;输出: 2&lt;br&gt;解释:一种可行的变换方式如下，从左到右：&lt;br&gt;第一次移动交换了第一列和第二列。&lt;br&gt;第二次移动交换了第二行和第三行。&lt;br&gt;示例 2:&lt;br&gt;&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/chessboard2-grid.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;输入: board = [[0, 1], [1, 0]]&lt;br&gt;输出: 0&lt;br&gt;解释: 注意左上角的格值为0时也是合法的棋盘，也是合法的棋盘.&lt;br&gt;示例 3:&lt;br&gt;&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/chessboard3-grid.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;输入: board = [[1, 0], [1, 0]]&lt;br&gt;输出: -1&lt;br&gt;解释: 任意的变换都不能使这个输入变为合法的棋盘。  &lt;/p&gt;
&lt;p&gt;提示：&lt;br&gt;n == board.length&lt;br&gt;n == board[i].length&lt;br&gt;2 &amp;lt;= n &amp;lt;= 30&lt;br&gt;board[i][j] 将只包含 0或 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;官方解法：&#34;&gt;&lt;a href=&#34;#官方解法：&#34; class=&#34;headerlink&#34; title=&#34;官方解法：&#34;&gt;&lt;/a&gt;官方解法：&lt;/h2&gt;&lt;p&gt;方法一：分维度计算&lt;/p&gt;
&lt;p&gt;首先需要思考的是对矩阵做一次交换之后，矩阵的变换状态。比如我们以交换列为代表，在对任意两列进行交换之后，可以看到列交换是不会改变任意相邻两行之间的元素异同对应关系，比如相邻两行的两个元素&lt;em&gt;board&lt;/em&gt;[i][j],&lt;em&gt;board&lt;/em&gt;[i+1][j]原本就相同，任意列交换之后这个两个元素对应的关系保持不变，如果这两个元素本来就不同，经过列交换之后也仍然不同，因此可以推出矩阵一定只能包含有两种不同的行，要么与第一行的元素相同，要么每一行的元素刚好与第一行的元素“相反”。如果矩阵可以转换为合法的“棋盘”，假设第 1 行的元素为 [0,1,1,1,0]，则其他行的元素要么为 [0,1,1,1,0]，要么为 [1,0,0,0,1]。最终的棋盘一定只有两种不同的行，要么以 0 开始的 [0,1,0,1,⋯]，要么以 11 开始的 [1,0,1,0,⋯]，因此我们可以推出棋盘也一定可以通过列变换将所有的行变为只有以上两种状态的行，否则无法得到最终合法的“棋盘”。同时我们可以观察到，先换行再换列跟先换列再换行结果是一样的，因为我们可以先将所有的行调整到正确的位置，再将所有的列调整到正确的位置。行与列之间的变换实际是相互独立的，二者互不影响，列变换不会影响相邻两行的异同关系，行变换不会不会影响相邻两列的异同关系。&lt;/p&gt;
&lt;p&gt;由于最终只有两种不同的行，要达成最终的“棋盘”实际上等价于将矩阵的行表示成 0,1 相互交替的状态，如果一个行无法变为 0,1 交替的状态，则我们认为矩阵不存在可行的变换。假设矩阵的某行用 [0,1] 表示之后得到数组为 [0,1,1,1,0,0]，那么只需求出这个数组变成 [0,1,0,1,0,1] 或者 [1,0,1,0,1,0] 的最少交换次数即可。同理，对于矩阵的列也是如此，这就将二维问题变成了两个一维问题。我们实际只需要分别将矩阵的第一行变为最终状态和第一列变为最终状态，最终的矩阵一定为合法“棋盘”。&lt;/p&gt;
&lt;p&gt;首先我们需要检测矩阵的合法性，即该矩阵是否可以变为合法的“棋盘”。我们依次检测矩阵的每一行是否是否可以变为 0,1 交替，即变为 [0,1,0,1,⋯],[1,0,1,0,⋯] 两种可能的行；然后依次检测矩阵的每一列是否可以变为 0,10,1 交替，即变为 [0,1,0,1,⋯],[1,0,1,0,⋯] 两种可能的列。设行的数目为 n，检测矩阵的行与列时需要进行如下检测：&lt;/p&gt;
&lt;p&gt;检测每一行和每一列的状态是否合法：由于列变换不改变相邻两行元素的对应关系，因此我们可以知道矩阵的行要么与第 11 行相同，要么与第 11 行“相反”。设第一行的状态为 &lt;em&gt;rowMask&lt;/em&gt;，与之相反对应的状态为 &lt;em&gt;reverseRowMask&lt;/em&gt;，我们检测每一行是否属于这两个合法的状态 &lt;em&gt;rowMask,reverseRowMask&lt;/em&gt;，如果不合法直接返回，对于列也采用同样的检测方法。由于题目中的行与列的值均为 0 或者 1，且行数和列数最大为 30，我们利用压缩位图来表示每一行或者每一列的状态，可以用一个 32 位整数来表示每一行，其中整数每位上的数字对应着每列上的数字。&lt;/p&gt;
&lt;p&gt;检测每一行和每一列中含有的数字是否合法：检测每一行或者每一列若要变为 0,1 交替的状态，如果 n 为偶数，则每一行中 1 的数目与 0 的数目相等；如果 n 为奇数，则每一行中 1 的数目与 0 的数目相差的绝对值一定为 1。此时我们只需要检测第一行中含有的数字 0,1 的个数是否合法，对于列我们也采用同样的检测方法。由于我们用一个 32 位整数来表示每一行或者每一列，我们只需要要快速计算出整数的二进制位上含有的 1 的数目即可。&lt;/p&gt;
&lt;p&gt;检测不同状态的行数和列数是否合法：我们设矩阵中与第一行相同的行的数量为 &lt;em&gt;count&lt;/em&gt;。根据我们之前的推论可知，需要满足两种不同的行交替分情况讨论：如果 n 为偶数，由于必须要满足两种不同的行交替，每种行的数目只能占到总行数的一半，此时一定有 &lt;em&gt;count&lt;/em&gt;×2=n；如果 n 为奇数，由于必须要满足两种不同的行交替，则另一种行的数量只能为 &lt;em&gt;n−count&lt;/em&gt;，由于必须满足交替不同，则二者之间的差值的绝对值一定为 11，因此此时一定满足 ∣2×&lt;em&gt;count&lt;/em&gt;−n∣=1，满足以上条件才是合法的行数。我们采用同样的方法对矩阵的列数进行检测。&lt;/p&gt;
&lt;p&gt;其次我们求出将矩阵变为棋盘的最少交换次数。分为两种情况讨论:&lt;/p&gt;
&lt;p&gt;如果 n 为偶数，则此时最终的合法棋盘有两种可能，即第一行的元素的第一个元素 &lt;em&gt;board&lt;/em&gt;[0][0]=0 或者 &lt;em&gt;board&lt;/em&gt;[0][0]=1。我们可以选择将第 1 行变为以 0 开头，此时只需将偶数位上的 0 全部替换为 1 即可；也可以选择将第 1 行变为以 1 开头，此时只需将奇数位上的 0 全部替换为 1 即可。我们可以用位图来快速计算出偶数位或者奇数位上 1 的个数，可以与特定的数进行布尔代数运算即可快速消除奇数位或者偶数位上的 1。&lt;/p&gt;
&lt;p&gt;如果 n 为奇数，则此时最终的合法棋盘只有一种可能，如果第一行中 0 的数目大于 1 的数目，此时第一行只能变为以 0 为开头交替的序列，此时我们只需要将偶数位上的 0 全部变为 1；如果第一行中 0 的数目小于 1 的数目，此时第一行只能交换变为以 1 为开头交替的序列，此时我们只需要将奇数位上的 0 全部变为 1。可以用位图来快速计算出偶数位或者奇数位上 1 的个数，可以与特定的数进行布尔代数运算即可快速消除奇数位或者偶数位上的 1。&lt;/p&gt;
&lt;p&gt;由于我们采用 32 位整数表示每一行或者每一列，在快速计算偶数位或者上的 1 的数目时可以采用位运算掩码。比如 32 位整数 x，我们只保留 x 偶数位上的 1，此时我们需要去掉奇数位上的 1，此时只需将 x 与掩码：&lt;/p&gt;
&lt;p&gt;\((1010 1010 1010 1010 1010 1010 1010 1010)_2=0xAAAAAAAA\)&lt;/p&gt;
&lt;p&gt;相与即可；我们只保留 xx 奇数位上的 11，此时我们需要去掉偶数位上的 11，此时只需将 xx 与掩码：&lt;/p&gt;
&lt;p&gt;\((0101 0101 0101 0101 0101 0101 0101 0101)_2=0x55555555\)&lt;/p&gt;
&lt;p&gt;相与即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int getMoves(int mask, int count, int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ones = __builtin_popcount(mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (n &amp;amp; 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 如果 n 为奇数，则每一行中 1 与 0 的数目相差为 1，且满足相邻行交替 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (abs(n - 2 * ones) != 1  abs(n - 2 * count) != 1 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (ones == (n &amp;gt;&amp;gt; 1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 偶数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return n / 2 - __builtin_popcount(mask &amp;amp; 0xAAAAAAAA);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 奇数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return (n + 1) / 2 - __builtin_popcount(mask &amp;amp; 0x55555555);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 如果 n 为偶数，则每一行中 1 与 0 的数目相等，且满足相邻行交替 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (ones != (n &amp;gt;&amp;gt; 1)  count != (n &amp;gt;&amp;gt; 1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 偶数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int count0 = n / 2 - __builtin_popcount(mask &amp;amp; 0xAAAAAAAA);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 奇数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int count1 = n / 2 - __builtin_popcount(mask &amp;amp; 0x55555555);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return min(count0, count1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int movesToChessboard(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; board) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = board.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int rowMask = 0, colMask = 0;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* 检查棋盘的第一行与第一列 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rowMask = (board[0][i] &amp;lt;&amp;lt; i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            colMask = (board[i][0] &amp;lt;&amp;lt; i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int reverseRowMask = ((1 &amp;lt;&amp;lt; n) - 1) ^ rowMask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int reverseColMask = ((1 &amp;lt;&amp;lt; n) - 1) ^ colMask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int rowCnt = 0, colCnt = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int currRowMask = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int currColMask = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                currRowMask = (board[i][j] &amp;lt;&amp;lt; j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                currColMask = (board[j][i] &amp;lt;&amp;lt; j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 检测每一行的状态是否合法 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (currRowMask != rowMask &amp;amp;&amp;amp; currRowMask != reverseRowMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else if (currRowMask == rowMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 记录与第一行相同的行数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                rowCnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 检测每一列的状态是否合法 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (currColMask != colMask &amp;amp;&amp;amp; currColMask != reverseColMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else if (currColMask == colMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 记录与第一列相同的列数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                colCnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int rowMoves = getMoves(rowMask, rowCnt, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int colMoves = getMoves(colMask, colCnt, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (rowMoves == -1  colMoves == -1) ? -1 : (rowMoves + colMoves); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>

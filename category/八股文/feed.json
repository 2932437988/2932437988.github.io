{
    "version": "https://jsonfeed.org/version/1",
    "title": "潇十七 • All posts by \"八股文\" category",
    "description": "可生活不是电影，我也少了点运气",
    "home_page_url": "https://x-17.top",
    "items": [
        {
            "id": "https://x-17.top/2022/10/12/%E5%85%AB%E8%82%A1/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "url": "https://x-17.top/2022/10/12/%E5%85%AB%E8%82%A1/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "title": "类型转换运算符",
            "date_published": "2022-10-12T10:49:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>C++ 有四个用于类型转换的运算符，它们被称为类型转换运算符。</p>\n<ul>\n<li>static_cast：静态类型转换</li>\n<li>dynamic_cast：动态转换</li>\n<li>const_cast：常量转换</li>\n<li>reinterpret_cast：重新释义转换</li>\n</ul>\n<ol>\n<li>static_cast<br>\nstatic_cast 运算符执行非动态转换，没有运行时类检查来保证转换的安全性。例如，它可以用来把一个基类指针转换为派生类指针。<br>\n使用方式：static_cast<type> (expr)</li>\n<li>dynamic_cast<br>\ndynamic_cast 在运行时执行转换，验证转换的有效性。如果转换未执行，则转换失败，表达式 expr 被判定为 null。dynamic_cast 执行动态转换时，type 必须是类的指针、类的引用或者 void*，如果 type 是类指针类型，那么 expr 也必须是一个指针，如果 type 是一个引用，那么 expr 也必须是一个引用。<br>\n使用方式：dynamic_cast<type> (expr)</li>\n<li>const_cast<br>\nconst_cast 运算符用于修改类型的 const /volatile 属性。除了 const 或 volatile 属性之外，目标类型必须与源类型相同。这种类型的转换主要是用来操作所传对象的 const 属性，可以加上 const 属性，也可以去掉 const 属性。<br>\n使用方式：const_cast<type> (expr)</li>\n<li>reinterpret_cast<br>\nreinterpret_cast 运算符把某种指针改为其他类型的指针。它可以把一个指针转换为一个整数，也可以把一个整数转换为一个指针。<br>\n使用方式：reinterpret_cast<type> (expr)</li>\n</ol>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/12/%E5%85%AB%E8%82%A1/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "url": "https://x-17.top/2022/10/12/%E5%85%AB%E8%82%A1/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "title": "单例模式",
            "date_published": "2022-10-12T10:47:44.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>本文整理自网络，后续将不断充实，也许等我变牛了能写出更好的吧，推荐这篇<a href=\"https://www.cnblogs.com/loveis715/archive/2012/07/18/2598409.html\">文章</a>，感觉很牛。</p>\n<h1 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\">#</a> 单例模式</h1>\n<div class=\"note success simple\"><p>设计模式之一<br>\n这种设计模式属于创建型模式，它提供了一种创建对象的最佳方式<br>\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方法，可以直接访问，不需要实例化该类的对象。</p>\n</div>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-bullhorn\"></i><h3 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意：</h3>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n</div>\n<h2 id=\"实现方式\"><a class=\"markdownIt-Anchor\" href=\"#实现方式\">#</a> 实现方式</h2>\n<h3 id=\"1懒汉模式线程不安全\"><a class=\"markdownIt-Anchor\" href=\"#1懒汉模式线程不安全\">#</a> 1. 懒汉模式，线程不安全</h3>\n<p>懒汉模式 (Lazy-Initialization) 直到使用时才会实例化对象，即调用 Instance () 方法时才会 new 一个单例的对象，如果不被调用就不会占用内存。这种模式单线程没有问题，但多线程时就会出现不可靠的情况。(以时间换空间)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> Singleton *<span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == _pInstance) &#123;</span><br><span class=\"line\">            _pInstance = <span class=\"keyword\">new</span> <span class=\"built_in\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _pInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_pInstance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _pInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Singleton</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;构造函数：Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Singleton</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;析构函数：~Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Singleton</span>(<span class=\"type\">const</span> Singleton &amp;signal);</span><br><span class=\"line\">    <span class=\"type\">const</span> Singleton &amp;<span class=\"keyword\">operator</span> = (<span class=\"type\">const</span> Singleton &amp; signal);</span><br><span class=\"line\">    <span class=\"type\">static</span> Singleton *_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Singleton * Singleton::_pInstance = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Singleton *p1 = Singleton::<span class=\"built_in\">getInstance</span>();</span><br><span class=\"line\">    Singleton *p2 = Singleton::<span class=\"built_in\">getInstance</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&amp;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&amp;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class=\"line\">    Singleton:<span class=\"built_in\">destory</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2懒汉模式加锁\"><a class=\"markdownIt-Anchor\" href=\"#2懒汉模式加锁\">#</a> 2. 懒汉模式，加锁</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;Singleton&gt; Ptr;</span><br><span class=\"line\">    ~<span class=\"built_in\">Singleton</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;析构函数：~Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> Ptr <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_instance == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lk</span><span class=\"params\">(_mutex)</span></span>;</span><br><span class=\"line\">            _instance = std::<span class=\"built_in\">shared_ptr</span>&lt;Singleton&gt;(<span class=\"keyword\">new</span> Singleton);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Singleton</span>();</span><br><span class=\"line\">    <span class=\"built_in\">Singleton</span>(<span class=\"type\">const</span> Singleton &amp;sigle);</span><br><span class=\"line\">    <span class=\"type\">const</span> Singleton &amp;<span class=\"keyword\">operator</span> = (<span class=\"type\">const</span> Singleton &amp;sigle);</span><br><span class=\"line\">    <span class=\"type\">static</span> Ptr _instance;</span><br><span class=\"line\">    <span class=\"type\">static</span> std::mutex _mutex;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Singleton::Ptr Singleton::_instance = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">std::mutex Singleton::_mutex;</span><br><span class=\"line\">Singleton::Singleton::<span class=\"built_in\">Singleton</span>() &#123;</span><br><span class=\"line\">    coout &lt;&lt; <span class=\"string\">&quot;构造函数：Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Singleton::Ptr p1 = Singleton::<span class=\"built_in\">getInstance</span>();</span><br><span class=\"line\">    Singleton::Ptr p2 = Singleton::<span class=\"built_in\">getInstance</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&amp;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&amp;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3懒汉模式magic-static\"><a class=\"markdownIt-Anchor\" href=\"#3懒汉模式magic-static\">#</a> 3. 懒汉模式，magic static</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> Singleton&amp; <span class=\"title\">get_instance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> Singleton instance;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Singleton</span>() &#123;</span><br><span class=\"line\">        std:cout &lt;&lt; <span class=\"string\">&quot;构造函数：Singleton()&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Singleton</span>() &#123;</span><br><span class=\"line\">        std:cout &lt;&lt; <span class=\"string\">&quot;析构函数：~Singleton()&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    Singleton&amp; p1 = Singleton::<span class=\"built_in\">getInstance</span>();</span><br><span class=\"line\">    Singleton&amp; p2 = Singleton::<span class=\"built_in\">getInstance</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&amp;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&amp;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4饿汉模式\"><a class=\"markdownIt-Anchor\" href=\"#4饿汉模式\">#</a> 4. 饿汉模式</h3>\n<p>加载时就实例化对象（以空间换时间）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;process.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singelton</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Singelton</span>()&#123;</span><br><span class=\"line\">        m_count ++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Singelton begin\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">Sleep</span>(<span class=\"number\">1000</span>);                            <span class=\"comment\">// 加sleep为了放大效果</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Singelton end\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">static</span> Singelton *single;<span class=\"comment\">//定义一个唯一指向实例的指针，并且是私有的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> Singelton *<span class=\"title\">GetSingelton</span><span class=\"params\">()</span></span>;<span class=\"comment\">//定义一个公有函数，可以获取这个唯一实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> m_count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 饿汉模式的关键：定义即实例化</span></span><br><span class=\"line\">Singelton *Singelton::single = <span class=\"keyword\">new</span> Singelton;</span><br><span class=\"line\"><span class=\"type\">int</span> Singelton::m_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\">Singelton *<span class=\"title\">Singelton::GetSingelton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不再需要进行实例化</span></span><br><span class=\"line\">    <span class=\"comment\">//if(single == nullptr)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    single = new Singelton;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Singelton::print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;m_count&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;we get the instance&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tsingleton* a1 = singleton::<span class=\"built_in\">getinstance</span>();</span><br><span class=\"line\">\tsingleton* a2 = singleton::<span class=\"built_in\">getinstance</span>();</span><br><span class=\"line\">\tsingleton* a3 = singleton::<span class=\"built_in\">getinstance</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;we destroy the instance&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "设计模式"
            ]
        }
    ]
}
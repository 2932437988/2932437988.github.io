<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://x-17.top</id>
    <title>潇十七 • Posts by &#34;算法&#34; category</title>
    <link href="https://x-17.top" />
    <updated>2022-10-08T07:32:59.000Z</updated>
    <category term="每日一题" />
    <category term="Medium" />
    <category term="MIT 6.1810" />
    <category term="操作系统" />
    <category term="docker" />
    <category term="Hard" />
    <category term="Easy" />
    <category term="leetcode每日一题" />
    <category term="Madium" />
    <category term="easy" />
    <category term="leetcode周赛" />
    <category term="设计模式" />
    <category term="C++" />
    <category term="工具" />
    <category term="C++ Primer" />
    <category term="教程" />
    <category term="Hexo" />
    <category term="Butterfly" />
    <category term="wiki" />
    <category term="笔试" />
    <category term="秋招" />
    <category term="面试" />
    <entry>
        <id>https://x-17.top/2022/10/08/LeetCode/870-%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/</id>
        <title>870. 优势洗牌</title>
        <link rel="alternate" href="https://x-17.top/2022/10/08/LeetCode/870-%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;870-优势洗牌&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#870-优势洗牌&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://leetcode.cn/problems/advantage-shuffle/&#34;&gt;870. 优势洗牌&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;给定两个大小相等的数组 nums1 和 nums2，nums1 相对于 nums2 的优势可以用满足 nums1 [i] &amp;gt; nums2 [i] 的索引 i 的数目来描述。&lt;/p&gt;
&lt;p&gt;返回 nums1 的任意排列，使其相对于 nums2 的优势最大化。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums1 = [2,7,11,15], nums2 = [1,10,4,11]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[2,11,7,15]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums1 = [12,24,8,32], nums2 = [13,25,32,11]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[24,32,8,12]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1 &amp;lt;= nums1.length &amp;lt;= 105&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nums2.length == nums1.length&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0 &amp;lt;= nums1[i], nums2[i] &amp;lt;= 109&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;advantageCount&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;nums1, vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;nums2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = nums1.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(), ids[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(nums1.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), nums1.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;iota&lt;/span&gt;(ids, ids + n, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(ids, ids + n, [&amp;amp;](&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j) &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nums2[i] &amp;lt; nums2[j]; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; left = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, right = n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x : nums1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans[x &amp;gt; nums2[ids[left]] ? ids[left++] : ids[right--]] = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$$O (nlogn)$$&lt;/li&gt;
&lt;li&gt;空间复杂度：$$O (n)$$&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-10-08T07:32:59.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/10/07/LeetCode/1800-%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</id>
        <title>1800. 最大升序子数组和</title>
        <link rel="alternate" href="https://x-17.top/2022/10/07/LeetCode/1800-%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;1800-最大升序子数组和&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1800-最大升序子数组和&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://leetcode.cn/problems/maximum-ascending-subarray-sum/&#34;&gt;1800. 最大升序子数组和&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个正整数组成的数组 nums ，返回 nums 中一个 升序 子数组的最大可能元素和。&lt;/p&gt;
&lt;p&gt;子数组是数组中的一个连续数字序列。&lt;/p&gt;
&lt;p&gt;已知子数组 [numsl, numsl+1, …, numsr-1, numsr] ，若对所有 i（l &amp;lt;= i &amp;lt; r），numsi &amp;lt; numsi+1 都成立，则称这一子数组为 升序 子数组。注意，大小为 1 的子数组也视作 升序 子数组。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [10,20,30,5,10,50]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：[5,10,50] 是元素和最大的升序子数组，最大元素和为 65 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [10,20,30,40,50]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：[10,20,30,40,50] 是元素和最大的升序子数组，最大元素和为 150 。 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [12,17,15,13,10,11,12]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：[10,11,12] 是元素和最大的升序子数组，最大元素和为 33 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [100,10,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1 &amp;lt;= nums.length &amp;lt;= 100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 &amp;lt;= nums[i] &amp;lt;= 100&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;maxAscendingSum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m=nums[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(nums[i]&amp;gt;nums[i&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                m+=nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans=&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(m,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                m=nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(ans,m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;空间复杂度&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(1)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-10-06T23:33:33.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/10/06/LeetCode/927-%E4%B8%89%E7%AD%89%E5%88%86/</id>
        <title>927. 三等分</title>
        <link rel="alternate" href="https://x-17.top/2022/10/06/LeetCode/927-%E4%B8%89%E7%AD%89%E5%88%86/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;927-三等分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#927-三等分&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://leetcode.cn/problems/three-equal-parts/&#34;&gt;927. 三等分&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个由 0 和 1 组成的数组 arr ，将数组分成  3 个非空的部分 ，使得所有这些部分表示相同的二进制值。&lt;/p&gt;
&lt;p&gt;如果可以做到，请返回任何 [i, j]，其中 i+1 &amp;lt; j，这样一来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;arr [0], arr [1], …, arr [i] 为第一部分；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arr [i + 1], arr [i + 2], …, arr [j - 1] 为第二部分；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arr [j], arr [j + 1], …, arr [arr.length - 1] 为第三部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这三个部分所表示的二进制值相等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果无法做到，就返回 [-1, -1]。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，[1,1,0] 表示十进制中的 6，而不会是 3。此外，前导零也是被允许的，所以 [0,1,1] 和 [1,1] 表示相同的值。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,0,1,0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[0,3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,1,0,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[-1,-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,1,0,0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[0,2]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;3 &amp;lt;= arr.length &amp;lt;= 3 * 104&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arr [i] 是 0 或 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;threeEqualParts&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; arr)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sum = &lt;span class=&#34;built_in&#34;&gt;accumulate&lt;/span&gt;(arr.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), arr.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sum % &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sum == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; partial = sum / &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; first = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, second = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, third = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, cur = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (arr[i] == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    first = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur == partial) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    second = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * partial) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    third = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cur++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len = (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)arr.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - third;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (first + len &amp;lt;= second &amp;amp;&amp;amp; second + len &amp;lt;= third) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (third + i &amp;lt; arr.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (arr[first + i] != arr[second + i] || arr[first + i] != arr[third + i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;first + len - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, second + len&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(1)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-10-06T05:23:56.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/10/05/LeetCode/811-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0/</id>
        <title>811. 子域名访问计数</title>
        <link rel="alternate" href="https://x-17.top/2022/10/05/LeetCode/811-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;811-子域名访问计数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#811-子域名访问计数&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://leetcode.cn/problems/subdomain-visit-count/&#34;&gt;811. 子域名访问计数&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;网站域名 “&lt;a href=&#34;http://discuss.leetcode.com&#34;&gt;discuss.leetcode.com&lt;/a&gt;” 由多个子域名组成。顶级域名为 “com” ，二级域名为 “&lt;a href=&#34;http://leetcode.com&#34;&gt;leetcode.com&lt;/a&gt;” ，最低一级为 “&lt;a href=&#34;http://discuss.leetcode.com&#34;&gt;discuss.leetcode.com&lt;/a&gt;” 。当访问域名 “&lt;a href=&#34;http://discuss.leetcode.com&#34;&gt;discuss.leetcode.com&lt;/a&gt;” 时，同时也会隐式访问其父域名 “&lt;a href=&#34;http://leetcode.com&#34;&gt;leetcode.com&lt;/a&gt;” 以及 “com” 。&lt;/p&gt;
&lt;p&gt;计数配对域名 是遵循 “rep d1.d2.d3” 或 “rep d1.d2” 格式的一个域名表示，其中 rep 表示访问域名的次数，d1.d2.d3 为域名本身。&lt;/p&gt;
&lt;p&gt;例如，“9001 &lt;a href=&#34;http://discuss.leetcode.com&#34;&gt;discuss.leetcode.com&lt;/a&gt;” 就是一个 计数配对域名 ，表示 &lt;a href=&#34;http://discuss.leetcode.com&#34;&gt;discuss.leetcode.com&lt;/a&gt; 被访问了 9001 次。&lt;br&gt;
给你一个 计数配对域名 组成的数组 cpdomains ，解析得到输入中每个子域名对应的 计数配对域名 ，并以数组形式返回。可以按 任意顺序 返回答案。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：cpdomains = [&amp;quot;9001 discuss.leetcode.com&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[&amp;quot;9001 leetcode.com&amp;quot;,&amp;quot;9001 discuss.leetcode.com&amp;quot;,&amp;quot;9001 com&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：例子中仅包含一个网站域名：&amp;quot;discuss.leetcode.com&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;按照前文描述，子域名 &amp;quot;leetcode.com&amp;quot; 和 &amp;quot;com&amp;quot; 都会被访问，所以它们都被访问了 9001 次。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：cpdomains = [&amp;quot;900 google.mail.com&amp;quot;, &amp;quot;50 yahoo.com&amp;quot;, &amp;quot;1 intel.mail.com&amp;quot;, &amp;quot;5 wiki.org&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[&amp;quot;901 mail.com&amp;quot;,&amp;quot;50 yahoo.com&amp;quot;,&amp;quot;900 google.mail.com&amp;quot;,&amp;quot;5 wiki.org&amp;quot;,&amp;quot;5 org&amp;quot;,&amp;quot;1 intel.mail.com&amp;quot;,&amp;quot;951 com&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：按照前文描述，会访问 &amp;quot;google.mail.com&amp;quot; 900 次，&amp;quot;yahoo.com&amp;quot; 50 次，&amp;quot;intel.mail.com&amp;quot; 1 次，&amp;quot;wiki.org&amp;quot; 5 次。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;而对于父域名，会访问 &amp;quot;mail.com&amp;quot; 900 + 1 = 901 次，&amp;quot;com&amp;quot; 900 + 50 + 1 = 951 次，和 &amp;quot;org&amp;quot; 5 次。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1 &amp;lt;= cpdomain.length &amp;lt;= 100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 &amp;lt;= cpdomain[i].length &amp;lt;= 100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cpdomain [i] 会遵循 “repi d1i.d2i.d3i” 或 “repi d1i.d2i” 格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;repi 是范围 [1, 104] 内的一个整数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d1i、d2i 和 d3i 由小写英文字母组成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&#34;title&#34;&gt;subdomainVisits&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;string&amp;gt;&amp;amp; cpdomains)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;string&amp;gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;string, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; counts;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;cpdomain : cpdomains) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; space = cpdomain.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count = &lt;span class=&#34;built_in&#34;&gt;stoi&lt;/span&gt;(cpdomain.&lt;span class=&#34;built_in&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, space));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            string domain = cpdomain.&lt;span class=&#34;built_in&#34;&gt;substr&lt;/span&gt;(space + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            counts[domain] += count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; domain.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (domain[i] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    string subdomain = domain.&lt;span class=&#34;built_in&#34;&gt;substr&lt;/span&gt;(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    counts[subdomain] += count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;[subdomain, count] : counts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans.&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;to_string&lt;/span&gt;(count) + &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; + subdomain);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;时间复杂度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时间复杂度&#34;&gt;#&lt;/a&gt; 时间复杂度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-10-04T23:48:49.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/10/03/LeetCode/1784-%E6%A3%80%E6%9F%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5/</id>
        <title>1784. 检查二进制字符串字段</title>
        <link rel="alternate" href="https://x-17.top/2022/10/03/LeetCode/1784-%E6%A3%80%E6%9F%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/check-if-binary-string-has-at-most-one-segment-of-ones/&#34;&gt;https://leetcode.cn/problems/check-if-binary-string-has-at-most-one-segment-of-ones/&lt;/a&gt; 给你一个二进制字符串 s ，该字符串 不含前导零 。 如果 s 包含 零个或一个由连续的 ‘1’ 组成的字段 ，返回 true​​​ 。否则，返回 false 。 如果 s 中 由连续若干个 ‘1’ 组成的字段 数量不超过 1，返回 true​​​ 。否则，返回 false 。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;1001&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：由连续若干个 &amp;#x27;1&amp;#x27; 组成的字段数量为 2，返回 false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;110&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;s [i]​​​​ 为 ‘0’ 或 ‘1’&lt;/li&gt;
&lt;li&gt;s [0] 为 ‘1’&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool checkOnesSegment(string s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int flag=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;s.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(!flag&amp;amp;&amp;amp;s[i]==&amp;#x27;1&amp;#x27;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(s[i]==&amp;#x27;1&amp;#x27;&amp;amp;&amp;amp;flag)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(int j=i;j&amp;lt;s.length();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if(s[j]!=&amp;#x27;1&amp;#x27;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        i=j-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        flag=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-10-02T23:41:35.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/10/02/LeetCode/777-%E5%9C%A8lr%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6/</id>
        <title>777. 在LR字符串中交换相邻字符</title>
        <link rel="alternate" href="https://x-17.top/2022/10/02/LeetCode/777-%E5%9C%A8lr%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/swap-adjacent-in-lr-string/&#34;&gt;https://leetcode.cn/problems/swap-adjacent-in-lr-string/&lt;/a&gt; 在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如 &amp;quot;RXXLRXRXL&amp;quot;）中进行移动操作。一次移动操作指用一个 &amp;quot;LX&amp;quot; 替换一个 &amp;quot;XL&amp;quot;，或者用一个 &amp;quot;XR&amp;quot; 替换一个 &amp;quot;RX&amp;quot;。现给定起始字符串 start 和结束字符串 end，请编写代码，当且仅当存在一系列移动操作使得 start 可以转换成 end 时， 返回 True。 示例 :&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: start = &amp;quot;RXXLRXRXL&amp;quot;, end = &amp;quot;XRLXXRRLX&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: True&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;我们可以通过以下几步将start转换成end:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RXXLRXRXL -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;XRXLRXRXL -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;XRLXRXRXL -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;XRLXXRRXL -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;XRLXXRRLX&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= len(start) = len(end) &amp;lt;= 10000。&lt;/li&gt;
&lt;li&gt;start 和 end 中的字符串仅限于’L’, ‘R’和’X’。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool canTransform(string start, string end) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = start.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int i = 0, j = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (i &amp;lt; n &amp;amp;&amp;amp; j &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            while (i &amp;lt; n &amp;amp;&amp;amp; start[i] == &amp;#x27;X&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            while (j &amp;lt; n &amp;amp;&amp;amp; end[j] == &amp;#x27;X&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (i &amp;lt; n &amp;amp;&amp;amp; j &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (start[i] != end[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                char c = start[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if ((c == &amp;#x27;L&amp;#x27; &amp;amp;&amp;amp; i &amp;lt; j)  (c == &amp;#x27;R&amp;#x27; &amp;amp;&amp;amp; i &amp;gt; j)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (i &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (start[i] != &amp;#x27;X&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (j &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (end[j] != &amp;#x27;X&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-10-01T23:42:54.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/10/01/LeetCode/1694-%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/</id>
        <title>1694. 重新格式化电话号码</title>
        <link rel="alternate" href="https://x-17.top/2022/10/01/LeetCode/1694-%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/reformat-phone-number/&#34;&gt;https://leetcode.cn/problems/reformat-phone-number/&lt;/a&gt; 给你一个字符串形式的电话号码 number 。number 由数字、空格 ’ &#39;、和破折号 ‘-’ 组成。 请你按下述方式重新格式化电话号码。 首先，删除 所有的空格和破折号。 其次，将数组从左到右 每 3 个一组 分块，直到 剩下 4 个或更少数字。剩下的数字将按下述规定再分块： 2 个数字：单个含 2 个数字的块。 3 个数字：单个含 3 个数字的块。 4 个数字：两个分别含 2 个数字的块。 最后用破折号将这些块连接起来。注意，重新格式化过程中 不应该 生成仅含 1 个数字的块，并且 最多 生成两个含 2 个数字的块。 返回格式化后的电话号码。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：number = &amp;quot;1-23-45 6&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;123-456&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：数字是 &amp;quot;123456&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 &amp;quot;123&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤 2：剩下 3 个数字，将它们放入单个含 3 个数字的块。第 2 个块是 &amp;quot;456&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;连接这些块后得到 &amp;quot;123-456&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：number = &amp;quot;123 4-567&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;123-45-67&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：数字是 &amp;quot;1234567&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 &amp;quot;123&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤 2：剩下 4 个数字，所以将它们分成两个含 2 个数字的块。这 2 块分别是 &amp;quot;45&amp;quot; 和 &amp;quot;67&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;连接这些块后得到 &amp;quot;123-45-67&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：number = &amp;quot;123 4-5678&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;123-456-78&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：数字是 &amp;quot;12345678&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤 1：第 1 个块 &amp;quot;123&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤 2：第 2 个块 &amp;quot;456&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;步骤 3：剩下 2 个数字，将它们放入单个含 2 个数字的块。第 3 个块是 &amp;quot;78&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;连接这些块后得到 &amp;quot;123-456-78&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：number = &amp;quot;12&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;12&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 5：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：number = &amp;quot;--17-5 229 35-39475 &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;175-229-353-94-75&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 &amp;lt;= number.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;number 由数字和字符 ‘-’ 及 ’ ’ 组成。&lt;/li&gt;
&lt;li&gt;number 中至少含 2 个数字。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    string reformatNumber(string number) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deque&amp;lt;char&amp;gt; d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;number.length();i++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(number[i]!=&amp;#x27; &amp;#x27;&amp;amp;&amp;amp;number[i]!=&amp;#x27;-&amp;#x27;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                d.push_back(number[i]); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        string ans=&amp;quot;&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(d.size()&amp;gt;4)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;3;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans+=d.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                d.pop_front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans+=&amp;#x27;-&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(d.size()==4)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;2;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans+=d.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                d.pop_front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans+=&amp;#x27;-&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;2;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans+=d.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                d.pop_front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(d.size()==3)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;3;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans+=d.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                d.pop_front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;2;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans+=d.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                d.pop_front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-10-01T00:06:52.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/30/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-08-%E9%9B%B6%E7%9F%A9%E9%98%B5/</id>
        <title>面试题 01.08. 零矩阵</title>
        <link rel="alternate" href="https://x-17.top/2022/09/30/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-08-%E9%9B%B6%E7%9F%A9%E9%98%B5/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/zero-matrix-lcci/&#34;&gt;https://leetcode.cn/problems/zero-matrix-lcci/&lt;/a&gt; 编写一种算法，若 M × N 矩阵中某个元素为 0，则将其所在的行与列清零。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[1,1,1],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[1,0,1],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[1,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[1,0,1],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[0,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[1,0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[0,1,2,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[3,4,5,2],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[1,3,1,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[0,0,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[0,4,5,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[0,3,1,0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void setZeroes(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; h(matrix[0].size(),0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; s(matrix.size(),0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;matrix.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j=0;j&amp;lt;matrix[0].size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(matrix[i][j]==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    h[j]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    s[i]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;matrix.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(s[i]==1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(int j=0;j&amp;lt;matrix[0].size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    matrix[i][j]=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;matrix[0].size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(h[i]==1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(int j=0;j&amp;lt;matrix.size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    matrix[j][i]=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (mn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (m+n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-29T23:41:21.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/29/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-09-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AE%E8%BD%AC/</id>
        <title>面试题 01.09. 字符串轮转</title>
        <link rel="alternate" href="https://x-17.top/2022/09/29/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-09-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AE%E8%BD%AC/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/string-rotation-lcci/&#34;&gt;https://leetcode.cn/problems/string-rotation-lcci/&lt;/a&gt; 字符串轮转。给定两个字符串 s1 和 s2，请编写代码检查 s2 是否为 s1 旋转而成（比如，waterbottle 是 erbottlewat 旋转后的字符串）。 示例 1:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s1 = &amp;quot;waterbottle&amp;quot;, s2 = &amp;quot;erbottlewat&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s1 = &amp;quot;aa&amp;quot;, s2 = &amp;quot;aba&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串长度在 [0, 100000] 范围内。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你能只调用一次检查子串的方法吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool isFlipedString(string s1, string s2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return s1.size() == s2.size() &amp;amp;&amp;amp; (s1 + s1).find(s2) != string::npos;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-28T23:47:17.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/28/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-09-%E7%AC%AC-k-%E4%B8%AA%E6%95%B0/</id>
        <title>面试题 17.09. 第 k 个数</title>
        <link rel="alternate" href="https://x-17.top/2022/09/28/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-09-%E7%AC%AC-k-%E4%B8%AA%E6%95%B0/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/get-kth-magic-number-lcci/&#34;&gt;https://leetcode.cn/problems/get-kth-magic-number-lcci/&lt;/a&gt; 有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，5，7，9，15，21。 示例 1:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: k = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int getKthMagicNumber(int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; factors = &amp;#123;3, 5, 7&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_set&amp;lt;long&amp;gt; seen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        priority_queue&amp;lt;long, vector&amp;lt;long&amp;gt;, greater&amp;lt;long&amp;gt;&amp;gt; heap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        seen.insert(1L);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        heap.push(1L);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ugly = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; k; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            long curr = heap.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            heap.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ugly = (int)curr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int factor : factors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                long next = curr * factor;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (!seen.count(next)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    seen.insert(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    heap.push(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ugly;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (klogk)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (logk)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-27T23:37:35.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/27/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-02-%E5%88%A4%E5%AE%9A%E6%98%AF%E5%90%A6%E4%BA%92%E4%B8%BA%E5%AD%97%E7%AC%A6%E9%87%8D%E6%8E%92/</id>
        <title>面试题 01.02. 判定是否互为字符重排</title>
        <link rel="alternate" href="https://x-17.top/2022/09/27/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-01-02-%E5%88%A4%E5%AE%9A%E6%98%AF%E5%90%A6%E4%BA%92%E4%B8%BA%E5%AD%97%E7%AC%A6%E9%87%8D%E6%8E%92/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/check-permutation-lcci/&#34;&gt;https://leetcode.cn/problems/check-permutation-lcci/&lt;/a&gt; 给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: s1 = &amp;quot;abc&amp;quot;, s2 = &amp;quot;bca&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: s1 = &amp;quot;abc&amp;quot;, s2 = &amp;quot;bad&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;= len(s1) &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= len(s2) &amp;lt;= 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;排序，哈希都可以&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool CheckPermutation(string s1, string s2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(s1.begin(),s1.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(s2.begin(),s2.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(s1==s2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (logn)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-27T00:37:49.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/26/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-19-%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</id>
        <title>面试题 17.19. 消失的两个数字</title>
        <link rel="alternate" href="https://x-17.top/2022/09/26/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98-17-19-%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/missing-two-lcci/&#34;&gt;https://leetcode.cn/problems/missing-two-lcci/&lt;/a&gt; 给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O (N) 时间内只用 O (1) 的空间找到它们吗？ 以任意顺序返回这两个数字均可。 示例 1:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: [1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: [2,3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: [2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: [1,4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nums.length &amp;lt;= 30000&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector missingTwo(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long n = nums.size() + 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int a = -accumulate(nums.cbegin(), nums.cend(), -(1 + n) * n / 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int b = -inner_product(nums.cbegin(), nums.cend(), nums.cbegin(), -(1 + n) * n / 2 * (2 * n + 1) / 3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int tmp = sqrt(2 * b - a * a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return &amp;#123; (a + tmp) / 2, (a - tmp) / 2 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-09-25T23:31:31.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/25/LeetCode/788-%E6%97%8B%E8%BD%AC%E6%95%B0%E5%AD%97/</id>
        <title>788. 旋转数字</title>
        <link rel="alternate" href="https://x-17.top/2022/09/25/LeetCode/788-%E6%97%8B%E8%BD%AC%E6%95%B0%E5%AD%97/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rotated-digits/&#34;&gt;https://leetcode.cn/problems/rotated-digits/&lt;/a&gt; 我们称一个数 X 为好数，如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。 如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。 现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？ 示例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;在[1, 10]中有四个好数： 2, 5, 6, 9。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;注意 1 和 10 不是好数, 因为他们在旋转之后不变。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N 的取值范围是 [1, 10000]。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map&amp;lt;int,int&amp;gt; m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool is(int n)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bool flag=false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(n)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(m.count(n%10)&amp;amp;&amp;amp;m[n%10]==1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                flag=true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(m.count(n%10)==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                flag=false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            n/=10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int rotatedDigits(int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m[0]=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m[1]=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m[2]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m[5]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m[6]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m[8]=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m[9]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=1;i&amp;lt;=n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(is(i))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-24T23:47:22.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/24/LeetCode/1652-%E6%8B%86%E7%82%B8%E5%BC%B9/</id>
        <title>1652. 拆炸弹</title>
        <link rel="alternate" href="https://x-17.top/2022/09/24/LeetCode/1652-%E6%8B%86%E7%82%B8%E5%BC%B9/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/defuse-the-bomb/&#34;&gt;https://leetcode.cn/problems/defuse-the-bomb/&lt;/a&gt; 你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。 为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。 如果 k &amp;gt; 0 ，将第 i 个数字用 接下来 k 个数字之和替换。 如果 k &amp;lt;0 ，将第 i 个数字用 之前 k 个数字之和替换。 如果 k == 0 ，将第 i 个数字用 0 替换。 由于 code 是循环的， code [n-1] 下一个元素是 code [0] ，且 code [0] 前一个元素是 code [n-1] 。 给你 循环 数组 code 和整数密钥 k ，请你返回解密后的结果来拆除炸弹！ 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：code = [5,7,1,4], k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[12,10,16,13]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：每个数字都被接下来 3 个数字之和替换。解密后的密码为 [7+1+4, 1+4+5, 4+5+7, 5+7+1]。注意到数组是循环连接的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：code = [1,2,3,4], k = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[0,0,0,0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：当 k 为 0 时，所有数字都被 0 替换。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：code = [2,4,9,3], k = -2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[12,5,6,13]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：解密后的密码为 [3+9, 2+3, 4+2, 9+4] 。注意到数组是循环连接的。如果 k 是负数，那么和为 之前 的数字。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n == code.length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= code[i] &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;-(n - 1) &amp;lt;= k &amp;lt;= n - 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;int&amp;gt; decrypt(vector&amp;lt;int&amp;gt;&amp;amp; code, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (k &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i = 0; i &amp;lt; code.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                int num=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(int j = 1; j &amp;lt;= k; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    num += code[(i+j)%code.size()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans.push_back(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if (k &amp;lt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k = -k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i = 0; i &amp;lt; code.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                int num=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(int j = 1; j &amp;lt;= k; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    num += code[(i-j+code.size())%code.size()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans.push_back(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i = 0; i &amp;lt; code.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans.push_back(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-24T00:22:47.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/23/LeetCode/707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</id>
        <title>707. 设计链表</title>
        <link rel="alternate" href="https://x-17.top/2022/09/23/LeetCode/707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/design-linked-list/&#34;&gt;https://leetcode.cn/problems/design-linked-list/&lt;/a&gt; 设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针 / 引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： get (index)：获取链表中第 index 个节点的值。如果索引无效，则返回 - 1。 addAtHead (val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 addAtTail (val)：将值为 val 的节点追加到链表的最后一个元素。 addAtIndex (index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果 index 小于 0，则在头部插入节点。 deleteAtIndex (index)：如果索引 index 有效，则删除链表中的第 index 个节点。 示例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;MyLinkedList linkedList = new MyLinkedList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linkedList.addAtHead(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linkedList.addAtTail(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linkedList.addAtIndex(1,2); //链表变为1-&amp;gt; 2-&amp;gt; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linkedList.get(1); //返回2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linkedList.deleteAtIndex(1); //现在链表是1-&amp;gt; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linkedList.get(1); //返回3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 val 值都在 [1, 1000] 之内。&lt;/li&gt;
&lt;li&gt;操作次数将在  [1, 1000] 之内。&lt;/li&gt;
&lt;li&gt;请不要使用内置的 LinkedList 库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class MyLinkedList &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    struct ListNode&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode* next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode* prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode(int val):val(val), next(nullptr), prev(nullptr) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int _size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ListNode* _dummyHead;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ListNode* _dummyTail;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MyLinkedList() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyHead = new ListNode(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyTail = new ListNode(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyHead-&amp;gt;next = _dummyTail;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyTail-&amp;gt;prev = _dummyHead;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _size = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int get(int index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(index &amp;gt; _size - 1  index &amp;lt; 0)&amp;#123; return -1; &amp;#125; ListNode* cur = _dummyHead-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(index--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur = cur-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return cur-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void addAtHead(int val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode* p = new ListNode(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;next = _dummyHead-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyHead-&amp;gt;next-&amp;gt;prev = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyHead-&amp;gt;next = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;prev = _dummyHead;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void addAtTail(int val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode* p = new ListNode(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyTail-&amp;gt;prev-&amp;gt;next = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;prev = _dummyTail-&amp;gt;prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;next = _dummyTail;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _dummyTail-&amp;gt;prev = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void addAtIndex(int index, int val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(index &amp;gt; _size  index &amp;lt; 0)&amp;#123; return ; &amp;#125; ListNode* cur = _dummyHead-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode* p = new ListNode(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(index--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur = cur-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur-&amp;gt;prev-&amp;gt;next = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;prev = cur-&amp;gt;prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;next = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur-&amp;gt;prev = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void deleteAtIndex(int index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(index &amp;gt; _size - 1  index &amp;lt; 0)&amp;#123; return ; &amp;#125; ListNode* cur = _dummyHead-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(index--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur = cur-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur-&amp;gt;prev-&amp;gt;next = cur-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur-&amp;gt;next-&amp;gt;prev = cur-&amp;gt;prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delete(cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _size--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Your MyLinkedList object will be instantiated and called as such:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * MyLinkedList* obj = new MyLinkedList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * int param_1 = obj-&amp;gt;get(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * obj-&amp;gt;addAtHead(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * obj-&amp;gt;addAtTail(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * obj-&amp;gt;addAtIndex(index,val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * obj-&amp;gt;deleteAtIndex(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-23T00:17:08.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/22/LeetCode/1640-%E8%83%BD%E5%90%A6%E8%BF%9E%E6%8E%A5%E5%BD%A2%E6%88%90%E6%95%B0%E7%BB%84/</id>
        <title>1640. 能否连接形成数组</title>
        <link rel="alternate" href="https://x-17.top/2022/09/22/LeetCode/1640-%E8%83%BD%E5%90%A6%E8%BF%9E%E6%8E%A5%E5%BD%A2%E6%88%90%E6%95%B0%E7%BB%84/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/check-array-formation-through-concatenation/&#34;&gt;https://leetcode.cn/problems/check-array-formation-through-concatenation/&lt;/a&gt; 给你一个整数数组 arr ，数组中的每个整数 互不相同 。另有一个由整数数组构成的数组 pieces，其中的整数也 互不相同 。请你以 任意顺序 连接 pieces 中的数组以形成 arr 。但是，不允许 对每个数组 pieces [i] 中的整数重新排序。 如果可以连接 pieces 中的数组形成 arr ，返回 true ；否则，返回 false 。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [15,88], pieces = [[88],[15]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：依次连接 [15] 和 [88]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [49,18,16], pieces = [[16,18,49]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：即便数字相符，也不能重新排列 pieces[0]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [91,4,64,78], pieces = [[78],[4,64],[91]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：依次连接 [91]、[4,64] 和 [78]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= pieces.length &amp;lt;= arr.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;sum(pieces[i].length) == arr.length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= pieces[i].length &amp;lt;= arr.length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= arr[i], pieces[i][j] &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;arr 中的整数 互不相同&lt;/li&gt;
&lt;li&gt;pieces 中的整数 互不相同（也就是说，如果将 pieces 扁平化成一维数组，数组中的所有整数互不相同）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool canFormArray(vector&amp;lt;int&amp;gt;&amp;amp; arr, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; pieces) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map&amp;lt;int,int&amp;gt; m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;arr.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            m[arr[i]]=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map&amp;lt;int,int&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;pieces.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(m.count(pieces[i][0])==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j=1;j&amp;lt;pieces[i].size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(m.count(pieces[i][0])==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(m[pieces[i][j]]!=m[pieces[i][j-1]]+1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-21T23:48:07.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/21/LeetCode/854-%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BA-k-%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
        <title>854. 相似度为 K 的字符串</title>
        <link rel="alternate" href="https://x-17.top/2022/09/21/LeetCode/854-%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BA-k-%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/k-similar-strings/&#34;&gt;https://leetcode.cn/problems/k-similar-strings/&lt;/a&gt; 对于某些非负整数 k ，如果交换 s1 中两个字母的位置恰好 k 次，能够使结果字符串等于 s2 ，则认为字符串 s1 和 s2 的 相似度为 k 。 给你两个字母异位词 s1 和 s2 ，返回 s1 和 s2 的相似度 k 的最小值。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s1 = &amp;quot;ab&amp;quot;, s2 = &amp;quot;ba&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s1 = &amp;quot;abc&amp;quot;, s2 = &amp;quot;bca&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s1.length &amp;lt;= 20&lt;/li&gt;
&lt;li&gt;s2.length == s1.length&lt;/li&gt;
&lt;li&gt;s1 和 s2  只包含集合 {‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’} 中的小写字母&lt;/li&gt;
&lt;li&gt;s2 是 s1 的一个字母异位词&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int kSimilarity(string s1, string s2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = s1.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queue&amp;lt;pair&amp;lt;string, int&amp;gt;&amp;gt; qu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_set&amp;lt;string&amp;gt; visit;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        qu.emplace(s1, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        visit.emplace(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int step = 0;; step++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int sz = qu.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int i = 0; i &amp;lt; sz; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                auto [cur, pos] = qu.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                qu.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (cur == s2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return step;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                while (pos &amp;lt; n &amp;amp;&amp;amp; cur[pos] == s2[pos]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    pos++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for (int j = pos + 1; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if (cur[j] != s2[j] &amp;amp;&amp;amp; cur[j] == s2[pos]) &amp;#123; // 剪枝，只在 cur[j] != s2[j] 时去交换&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        swap(cur[pos], cur[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        if (!visit.count(cur)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            visit.emplace(cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            qu.emplace(cur, pos + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        swap(cur[pos], cur[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-09-21T01:05:22.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/20/LeetCode/698-%E5%88%92%E5%88%86%E4%B8%BAk%E4%B8%AA%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AD%90%E9%9B%86/</id>
        <title>698. 划分为k个相等的子集</title>
        <link rel="alternate" href="https://x-17.top/2022/09/20/LeetCode/698-%E5%88%92%E5%88%86%E4%B8%BAk%E4%B8%AA%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AD%90%E9%9B%86/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/&#34;&gt;https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/&lt;/a&gt; 给定一个整数数组  nums 和一个正整数 k，找出是否有可能把这个数组分成 k 个非空子集，其总和都相等。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入： nums = [4, 3, 2, 3, 5, 2, 1], k = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出： True&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;说明： 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: nums = [1,2,3,4], k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= k &amp;lt;= len(nums) &amp;lt;= 16&lt;/li&gt;
&lt;li&gt;0 &amp;lt; nums[i] &amp;lt; 10000&lt;/li&gt;
&lt;li&gt;每个元素的频率在 [1,4] 范围内&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool canPartitionKSubsets(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int all = accumulate(nums.begin(), nums.end(), 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (all % k &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int per = all / k; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(nums.begin(), nums.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (nums.back() &amp;gt; per) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;bool&amp;gt; dp(1 &amp;lt;&amp;lt; n, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; curSum(1 &amp;lt;&amp;lt; n, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[0] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 1 &amp;lt;&amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (!dp[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int j = 0; j &amp;lt; n; j++) &amp;#123; if (curSum[i] + nums[j] &amp;gt; per) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (((i &amp;gt;&amp;gt; j) &amp;amp; 1) == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    int next = i  (1 &amp;lt;&amp;lt; j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if (!dp[next]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        curSum[next] = (curSum[i] + nums[j]) % per;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        dp[next] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return dp[(1 &amp;lt;&amp;lt; n) - 1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n*2^n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (2^n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-20T00:20:31.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/19/LeetCode/1636-%E6%8C%89%E7%85%A7%E9%A2%91%E7%8E%87%E5%B0%86%E6%95%B0%E7%BB%84%E5%8D%87%E5%BA%8F%E6%8E%92%E5%BA%8F/</id>
        <title>1636. 按照频率将数组升序排序</title>
        <link rel="alternate" href="https://x-17.top/2022/09/19/LeetCode/1636-%E6%8C%89%E7%85%A7%E9%A2%91%E7%8E%87%E5%B0%86%E6%95%B0%E7%BB%84%E5%8D%87%E5%BA%8F%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/sort-array-by-increasing-frequency/&#34;&gt;https://leetcode.cn/problems/sort-array-by-increasing-frequency/&lt;/a&gt; 给你一个整数数组 nums ，请你将数组按照每个值的频率 升序 排序。如果有多个值的频率相同，请你按照数值本身将它们 降序 排序。 请你返回排序后的数组。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1,1,2,2,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[3,1,1,2,2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&amp;#x27;3&amp;#x27; 频率为 1，&amp;#x27;1&amp;#x27; 频率为 2，&amp;#x27;2&amp;#x27; 频率为 3 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [2,3,1,3,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1,3,3,2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&amp;#x27;2&amp;#x27; 和 &amp;#x27;3&amp;#x27; 频率都为 2 ，所以它们之间按照数值本身降序排序。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [-1,1,-6,4,5,-6,1,4,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[5,-1,4,4,-6,-6,1,1,1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;-100 &amp;lt;= nums[i] &amp;lt;= 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;int&amp;gt; frequencySort(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;int, int&amp;gt; cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int num : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cnt[num]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(nums.begin(), nums.end(), [&amp;amp;](const int a, const int b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (cnt[a] != cnt[b]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return cnt[a] &amp;lt; cnt[b]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return a &amp;gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-19T00:15:06.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/18/LeetCode/827-%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/</id>
        <title>827. 最大人工岛</title>
        <link rel="alternate" href="https://x-17.top/2022/09/18/LeetCode/827-%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/making-a-large-island/&#34;&gt;https://leetcode.cn/problems/making-a-large-island/&lt;/a&gt; 给你一个大小为 n x n 二进制矩阵 grid 。最多 只能将一格 0 变成 1 。 返回执行此操作后，grid 中最大的岛屿面积是多少？ 岛屿 由一组上、下、左、右四个方向相连的 1 形成。 示例 1:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: grid = [[1, 0], [0, 1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: grid = [[1, 1], [1, 0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 将一格0变成1，岛屿的面积扩大为 4。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: grid = [[1, 1], [1, 1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 没有0可以让我们变成1，面积依然为 4。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n == grid.length&lt;/li&gt;
&lt;li&gt;n == grid[i].length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 500&lt;/li&gt;
&lt;li&gt;grid [i][j] 为 0 或 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const vector&amp;lt;int&amp;gt; d = &amp;#123;0, -1, 0, 1, 0&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool valid(int n, int x, int y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;lt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int dfs(const vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;grid, int x, int y, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;tag, int t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = grid.size(), res = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tag[x][y] = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 4; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int x1 = x + d[i], y1 = y + d[i + 1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (valid(n, x1, y1) &amp;amp;&amp;amp; grid[x1][y1] == 1 &amp;amp;&amp;amp; tag[x1][y1] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res += dfs(grid, x1, y1, tag, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int largestIsland(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = grid.size(), res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; tag(n, vector&amp;lt;int&amp;gt;(n));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;int, int&amp;gt; area;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (grid[i][j] == 1 &amp;amp;&amp;amp; tag[i][j] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    int t = i * n + j + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    area[t] = dfs(grid, i, j, tag, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    res = max(res, area[t]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (grid[i][j] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    int z = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    unordered_set&amp;lt;int&amp;gt; connected;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    for (int k = 0; k &amp;lt; 4; k++) &amp;#123; int x = i + d[k], y = j + d[k + 1]; if (!valid(n, x, y)  tag[x][y] == 0  connected.count(tag[x][y]) &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        z += area[tag[x][y]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        connected.insert(tag[x][y]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    res = max(res, z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n^2)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n^2)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-09-18T00:29:56.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/17/LeetCode/1624-%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
        <title>1624. 两个相同字符之间的最长子字符串</title>
        <link rel="alternate" href="https://x-17.top/2022/09/17/LeetCode/1624-%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/largest-substring-between-two-equal-characters/&#34;&gt;https://leetcode.cn/problems/largest-substring-between-two-equal-characters/&lt;/a&gt; 给你一个字符串 s，请你返回 两个相同字符之间的最长子字符串的长度 ，计算长度时不含这两个字符。如果不存在这样的子字符串，返回 -1 。 子字符串 是字符串中的一个连续字符序列。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;aa&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最优的子字符串是两个 &amp;#x27;a&amp;#x27; 之间的空子字符串。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;abca&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最优的子字符串是 &amp;quot;bc&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;cbzxy&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：s 中不存在出现出现两次的字符，所以返回 -1 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;cabbac&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最优的子字符串是 &amp;quot;abba&amp;quot; ，其他的非最优解包括 &amp;quot;bb&amp;quot; 和 &amp;quot;&amp;quot; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s.length &amp;lt;= 300&lt;/li&gt;
&lt;li&gt;s 只含小写英文字母&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int maxLengthBetweenEqualCharacters(string s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map&amp;lt;char,vector&amp;lt;int&amp;gt;&amp;gt; m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;s.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            m[s[i]].push_back(i); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=-1; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(auto it=m.begin();it!=m.end();it++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(it-&amp;gt;second.size()&amp;gt;=2)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans=max(ans,it-&amp;gt;second[it-&amp;gt;second.size()-1]-it-&amp;gt;second[0]-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-17T06:06:02.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/16/LeetCode/850-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF-ii/</id>
        <title>850. 矩形面积 II</title>
        <link rel="alternate" href="https://x-17.top/2022/09/16/LeetCode/850-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF-ii/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rectangle-area-ii/&#34;&gt;https://leetcode.cn/problems/rectangle-area-ii/&lt;/a&gt; 我们给出了一个（轴对齐的）二维矩形列表 rectangles 。 对于 rectangle [i] = [x1, y1, x2, y2]，其中（x1，y1）是矩形 i 左下角的坐标， (xi1, yi1) 是该矩形 左下角 的坐标， (xi2, yi2) 是该矩形 右上角 的坐标。 计算平面中所有 rectangles 所覆盖的 总面积 。任何被两个或多个矩形覆盖的区域应只计算 一次 。 返回 总面积 。因为答案可能太大，返回 \(10^9 + 7\) 的 模 。 示例 1： &lt;img src=&#34;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：如图所示，三个矩形覆盖了总面积为6的区域。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从(1,1)到(2,2)，绿色矩形和红色矩形重叠。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从(1,0)到(2,3)，三个矩形都重叠。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：rectangles = [[0,0,1000000000,1000000000]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释：答案是 \(10^{18} 对 (10^9 + 7) \) 取模的结果， 即 49 。 提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= rectangles.length &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;rectanges[i].length = 4&lt;/li&gt;
&lt;li&gt;\(0 &amp;lt;= x_{i1}, y_{i1}, x_{i2}, y_{i2} &amp;lt;= 10^9\)&lt;/li&gt;
&lt;li&gt;矩形叠加覆盖后的总面积不会超越 \(2^{63}  - 1 \)，这意味着可以用一个 64 位有符号整数来保存面积结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int rectangleArea(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; rectangles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = rectangles.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; hbound;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (const auto&amp;amp; rect: rectangles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 下边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hbound.push_back(rect[1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 上边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hbound.push_back(rect[3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(hbound.begin(), hbound.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hbound.erase(unique(hbound.begin(), hbound.end()), hbound.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int m = hbound.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 「思路与算法部分」的 length 数组并不需要显式地存储下来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // length[i] 可以通过 hbound[i+1] - hbound[i] 得到&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; seg(m - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;tuple&amp;lt;int, int, int&amp;gt;&amp;gt; sweep;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 左边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sweep.emplace_back(rectangles[i][0], i, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 右边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sweep.emplace_back(rectangles[i][2], i, -1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(sweep.begin(), sweep.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long long ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; sweep.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int j = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            while (j + 1 &amp;lt; sweep.size() &amp;amp;&amp;amp; get&amp;lt;0&amp;gt;(sweep[i]) == get&amp;lt;0&amp;gt;(sweep[j + 1])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ++j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (j + 1 == sweep.size()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            // 一次性地处理掉一批横坐标相同的左右边界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int k = i; k &amp;lt;= j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                auto&amp;amp;&amp;amp; [_, idx, diff] = sweep[k];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                int left = rectangles[idx][1], right = rectangles[idx][3];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for (int x = 0; x &amp;lt; m - 1; ++x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if (left &amp;lt;= hbound[x] &amp;amp;&amp;amp; hbound[x + 1] &amp;lt;= right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        seg[x] += diff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int cover = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int k = 0; k &amp;lt; m - 1; ++k) &amp;#123; if (seg[k] &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cover += (hbound[k + 1] - hbound[k]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans += static_cast&amp;lt;long long&amp;gt;(cover) * (get&amp;lt;0&amp;gt;(sweep[j + 1]) - get&amp;lt;0&amp;gt;(sweep[j]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans % static_cast&amp;lt;int&amp;gt;(1e9 + 7);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n^2)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-09-16T02:04:12.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/15/LeetCode/672-%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3-%E2%85%B1/</id>
        <title>672. 灯泡开关 Ⅱ</title>
        <link rel="alternate" href="https://x-17.top/2022/09/15/LeetCode/672-%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3-%E2%85%B1/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/bulb-switcher-ii/&#34;&gt;https://leetcode.cn/problems/bulb-switcher-ii/&lt;/a&gt; 房间中有 n 只已经打开的灯泡，编号从 1 到 n 。墙上挂着 4 个开关 。 这 4 个开关各自都具有不同的功能，其中： 开关 1 ：反转当前所有灯的状态（即开变为关，关变为开） 开关 2 ：反转编号为偶数的灯的状态（即 2, 4, …） 开关 3 ：反转编号为奇数的灯的状态（即 1, 3, …） 开关 4 ：反转编号为 j = 3k + 1 的灯的状态，其中 k = 0, 1, 2, …（即 1, 4, 7, 10, …） 你必须 恰好 按压开关 presses 次。每次按压，你都需要从 4 个开关中选出一个来执行按压操作。 给你两个整数 n 和 presses ，执行完所有按压之后，返回 不同可能状态 的数量。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：n = 1, presses = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：状态可以是：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 1 ，[关]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 2 ，[开]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：n = 2, presses = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：状态可以是：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 1 ，[关, 关]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 2 ，[开, 关]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 3 ，[关, 开]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：n = 3, presses = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：状态可以是：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 1 ，[关, 关, 关]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 2 ，[关, 开, 关]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 3 ，[开, 开, 开]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 按压开关 4 ，[关, 开, 开]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= presses &amp;lt;= 1000&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int flipLights(int n, int presses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(presses==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(n==1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else if(n==2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return presses==1?3:4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return presses==1?4:presses==2?7:8;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (1)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-15T12:55:47.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/14/LeetCode/1619-%E5%88%A0%E9%99%A4%E6%9F%90%E4%BA%9B%E5%85%83%E7%B4%A0%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84%E5%9D%87%E5%80%BC/</id>
        <title>1619. 删除某些元素后的数组均值</title>
        <link rel="alternate" href="https://x-17.top/2022/09/14/LeetCode/1619-%E5%88%A0%E9%99%A4%E6%9F%90%E4%BA%9B%E5%85%83%E7%B4%A0%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84%E5%9D%87%E5%80%BC/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/mean-of-array-after-removing-some-elements/&#34;&gt;https://leetcode.cn/problems/mean-of-array-after-removing-some-elements/&lt;/a&gt; 给你一个整数数组 arr ，请你删除最小 5% 的数字和最大 5% 的数字后，剩余数字的平均值。 与 标准答案 误差在 10-5 的结果都被视为正确结果。 示例 1： 输入：arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3] 输出：2.00000 解释：删除数组中最大和最小的元素后，所有元素都等于 2，所以平均值为 2 。 示例 2： 输入：arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0] 输出：4.00000 示例 3： 输入：arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4] 输出：4.77778 示例 4： 输入：arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3] 输出：5.27778 示例 5： 输入：arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1] 输出：5.29167 提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;20 &amp;lt;= arr.length &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;arr.length 是 20 的 倍数&lt;/li&gt;
&lt;li&gt;\(0 &amp;lt;= arr[i] &amp;lt;= 10^5\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    double trimMean(vector&amp;lt;int&amp;gt;&amp;amp; arr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(arr.begin(),arr.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        double ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n=arr.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=n/20;i&amp;lt;n-n/20;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans+=arr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans/(n-n/10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (logn)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-14T05:55:59.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/13/LeetCode/670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</id>
        <title>670. 最大交换</title>
        <link rel="alternate" href="https://x-17.top/2022/09/13/LeetCode/670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-swap/&#34;&gt;https://leetcode.cn/problems/maximum-swap/&lt;/a&gt; 给定一个非负整数，你至多可以交换一次数字中的任意两位。返回你能得到的最大值。 示例 1 :&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: 2736&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 7236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 交换数字2和数字7。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2 :&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: 9973&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 9973&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 不需要交换。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定数字的范围是 \([0, 10^8]\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;暴力&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int maximumSwap(int num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(num)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a.push_back(num%10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            num/=10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int t=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j=1;j&amp;lt;a.size();j++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(t)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                int n=a[a.size()-j]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                int flag=a.size()-j; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(int i=flag-1;i&amp;gt;=0;i--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if((a[i]&amp;gt;n&amp;amp;&amp;amp;t==1)(a[i]&amp;gt;=n&amp;amp;&amp;amp;t==0))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        n=a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        flag=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        t=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[flag]=a[a.size()-j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[a.size()-j]=n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=a.size()-1;i&amp;gt;=0;i--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            num*=10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            num+=a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (log^2n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (logn)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-13T05:28:29.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/12/LeetCode/1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</id>
        <title>1608. 特殊数组的特征值</title>
        <link rel="alternate" href="https://x-17.top/2022/09/12/LeetCode/1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/special-array-with-x-elements-greater-than-or-equal-x/&#34;&gt;https://leetcode.cn/problems/special-array-with-x-elements-greater-than-or-equal-x/&lt;/a&gt; 给你一个非负整数数组 nums 。如果存在一个数 x ，使得 nums 中恰好有 x 个元素 大于或者等于 x ，那么就称 nums 是一个 特殊数组 ，而 x 是该数组的 特征值 。 注意： x 不必 是 nums 的中的元素。 如果数组 nums 是一个 特殊数组 ，请返回它的特征值 x 。否则，返回 -1 。可以证明的是，如果 nums 是特殊数组，那么其特征值 x 是 唯一的 。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [3,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：有 2 个元素（3 和 5）大于或等于 2 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [0,0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：没有满足题目要求的特殊数组，故而也不存在特征值 x 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果 x = 0，应该有 0 个元素 &amp;gt;= x，但实际有 2 个。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果 x = 1，应该有 1 个元素 &amp;gt;= x，但实际有 0 个。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果 x = 2，应该有 2 个元素 &amp;gt;= x，但实际有 0 个。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x 不能取更大的值，因为 nums 中只有两个元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [0,4,3,0,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：有 3 个元素大于或等于 3 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [3,6,7,7,0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= nums[i] &amp;lt;= 1000&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;降序排列找到第 i 位元素大于等于 i 且第 i+1 位小于 i,i 即为所求。(前面所述的 i 从 1 开始，代码中从 0 开始所以 i+1 为所求）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    static bool compare(int a,int b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return a&amp;gt;b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int specialArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(nums.begin(),nums.end(),compare);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;nums.size();i++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(nums[i]&amp;gt;i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(i+1==nums.size())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;else if(nums[i+1]&amp;lt;=i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return i+1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (logn)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-12T06:55:57.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/11/LeetCode/857-%E9%9B%87%E4%BD%A3-k-%E5%90%8D%E5%B7%A5%E4%BA%BA%E7%9A%84%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC/</id>
        <title>857. 雇佣 K 名工人的最低成本</title>
        <link rel="alternate" href="https://x-17.top/2022/09/11/LeetCode/857-%E9%9B%87%E4%BD%A3-k-%E5%90%8D%E5%B7%A5%E4%BA%BA%E7%9A%84%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/&#34;&gt;https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/&lt;/a&gt; 有 n 名工人。 给定两个数组 quality 和 wage ，其中，quality [i] 表示第 i 名工人的工作质量，其最低期望工资为 wage [i] 。 现在我们想雇佣 k 名工人组成一个工资组。在雇佣 一组 k 名工人时，我们必须按照下述规则向他们支付工资： 对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。 工资组中的每名工人至少应当得到他们的最低期望工资。 给定整数 k ，返回 组成满足上述条件的付费群体所需的最小金额 。在实际答案的 10-5 以内的答案将被接受。。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入： quality = [10,20,5], wage = [70,50,30], k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出： 105.00000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释： 我们向 0 号工人支付 70，向 2 号工人支付 35。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入： quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出： 30.66667&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释： 我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n == quality.length == wage.length&lt;/li&gt;
&lt;li&gt;\(1 &amp;lt;= k &amp;lt;= n &amp;lt;= 10^4\)&lt;/li&gt;
&lt;li&gt;\(1 &amp;lt;= quality[i], wage[i] &amp;lt;= 10^4\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    double mincostToHireWorkers(vector&amp;lt;int&amp;gt;&amp;amp; quality, vector&amp;lt;int&amp;gt;&amp;amp; wage, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = quality.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; h(n, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        iota(h.begin(), h.end(), 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(h.begin(), h.end(), [&amp;amp;](int&amp;amp; a, int&amp;amp; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return quality[a] * wage[b] &amp;gt; quality[b] * wage[a];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        double res = 1e9;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        double totalq = 0.0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, less&amp;lt;int&amp;gt;&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; k - 1; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            totalq += quality[h[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.push(quality[h[i]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = k - 1; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int idx = h[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            totalq += quality[idx];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.push(quality[idx]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            double totalc = ((double) wage[idx] / quality[idx]) * totalq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = min(res, totalc);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            totalq -= q.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-09-11T10:19:46.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/10/LeetCode/669-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
        <title>669. 修剪二叉搜索树</title>
        <link rel="alternate" href="https://x-17.top/2022/09/10/LeetCode/669-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/trim-a-binary-search-tree/&#34;&gt;https://leetcode.cn/problems/trim-a-binary-search-tree/&lt;/a&gt; 给你二叉搜索树的根节点 root ，同时给定最小边界 low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在 [low, high] 中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。 所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。 示例 1： &lt;img src=&#34;https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg&#34; alt=&#34;&#34;&gt; 输入：root = [1,0,2], low = 1, high = 2 输出：[1,null,2] 示例 2： &lt;img src=&#34;https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg&#34; alt=&#34;&#34;&gt; 输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3 输出：[3,2,null,1] 提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点数在范围 [1, 104] 内&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= Node.val &amp;lt;= 104&lt;/li&gt;
&lt;li&gt;树中每个节点的值都是 唯一 的&lt;/li&gt;
&lt;li&gt;题目数据保证输入是一棵有效的二叉搜索树&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= low &amp;lt;= high &amp;lt;= 104&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TreeNode* trimBST(TreeNode* root, int low, int high) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (root == nullptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return nullptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (root-&amp;gt;val &amp;lt; low) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return trimBST(root-&amp;gt;right, low, high);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else if (root-&amp;gt;val &amp;gt; high) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return trimBST(root-&amp;gt;left, low, high);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            root-&amp;gt;left = trimBST(root-&amp;gt;left, low, high);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            root-&amp;gt;right = trimBST(root-&amp;gt;right, low, high);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-10T10:58:44.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/09/LeetCode/1598-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/</id>
        <title>1598. 文件夹操作日志搜集器</title>
        <link rel="alternate" href="https://x-17.top/2022/09/09/LeetCode/1598-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/crawler-log-folder/&#34;&gt;https://leetcode.cn/problems/crawler-log-folder/&lt;/a&gt; 每当用户执行变更文件夹操作时，LeetCode 文件系统都会保存一条日志记录。 下面给出对变更操作的说明： “…/” ：移动到当前文件夹的父文件夹。如果已经在主文件夹下，则 继续停留在当前文件夹 。 “./” ：继续停留在当前文件夹。 “x/” ：移动到名为 x 的子文件夹中。题目数据 保证总是存在文件夹 x 。 给你一个字符串列表 logs ，其中 logs [i] 是用户在 ith 步执行的操作。 文件系统启动时位于主文件夹，然后执行 logs 中的操作。 执行完所有变更文件夹操作后，请你找出 返回主文件夹所需的最小步数 。 示例 1： &lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/09/sample_11_1957-300x58.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：logs = [&amp;quot;d1/&amp;quot;,&amp;quot;d2/&amp;quot;,&amp;quot;../&amp;quot;,&amp;quot;d21/&amp;quot;,&amp;quot;./&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：执行 &amp;quot;../&amp;quot; 操作变更文件夹 2 次，即可回到主文件夹&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2： &lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/09/sample_22_1957-300x128.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：logs = [&amp;quot;d1/&amp;quot;,&amp;quot;d2/&amp;quot;,&amp;quot;./&amp;quot;,&amp;quot;d3/&amp;quot;,&amp;quot;../&amp;quot;,&amp;quot;d31/&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：logs = [&amp;quot;d1/&amp;quot;,&amp;quot;../&amp;quot;,&amp;quot;../&amp;quot;,&amp;quot;../&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= logs.length &amp;lt;= 103&lt;/li&gt;
&lt;li&gt;2 &amp;lt;= logs[i].length &amp;lt;= 10&lt;/li&gt;
&lt;li&gt;logs [i] 包含小写英文字母，数字，’.’ 和 ‘/’&lt;/li&gt;
&lt;li&gt;logs [i] 符合语句中描述的格式&lt;/li&gt;
&lt;li&gt;文件夹名称由小写英文字母和数字组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;遍历比较字符串是否为 &amp;quot;…/“和”./&amp;quot;，不是则记录值加一，是 &amp;quot;…/&amp;quot; 且记录值不为 0 则记录值减一。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int minOperations(vector&amp;lt;string&amp;gt;&amp;amp; logs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        string s1=&amp;quot;./&amp;quot;,s2=&amp;quot;../&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;logs.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(logs[i]==s2)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(ans) ans--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;else if(logs[i]!=s1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-09T01:19:19.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/08/LeetCode/667-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97-ii/</id>
        <title>667. 优美的排列 II</title>
        <link rel="alternate" href="https://x-17.top/2022/09/08/LeetCode/667-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97-ii/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/beautiful-arrangement-ii/&#34;&gt;https://leetcode.cn/problems/beautiful-arrangement-ii/&lt;/a&gt; 给你两个整数 n 和 k ，请你构造一个答案列表 answer ，该列表应当包含从 1 到 n 的 n 个不同正整数，并同时满足下述条件： 假设该列表是 answer = [a1, a2, a3, … , an] ，那么列表 [a1 - a2, a2 - a3, a3 - a4, … , an-1 - an] 中应该有且仅有 k 个不同整数。 返回列表 answer 。如果存在多种答案，只需返回其中 任意一种 。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：n = 3, k = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：[1, 2, 3] 包含 3 个范围在 1-3 的不同整数，并且 [1, 1] 中有且仅有 1 个不同整数：1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：n = 3, k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1, 3, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：[1, 3, 2] 包含 3 个范围在 1-3 的不同整数，并且 [2, 1] 中有且仅有 2 个不同整数：1 和 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(1 &amp;lt;= k &amp;lt; n &amp;lt;= 10^4\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;思维题&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;int&amp;gt; constructArray(int n, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; answer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 1; i &amp;lt; n - k; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            answer.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = n - k, j = n; i &amp;lt;= j; ++i, --j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            answer.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (i != j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                answer.push_back(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return answer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-08T08:32:21.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/07/LeetCode/1592-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/</id>
        <title>1592. 重新排列单词间的空格</title>
        <link rel="alternate" href="https://x-17.top/2022/09/07/LeetCode/1592-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rearrange-spaces-between-words/&#34;&gt;https://leetcode.cn/problems/rearrange-spaces-between-words/&lt;/a&gt; 给你一个字符串 text ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 text 至少包含一个单词 。 请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化 该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾 ，这也意味着返回的字符串应当与原 text 字符串的长度相等。 返回 重新排列空格后的字符串 。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：text = &amp;quot; this is a sentence &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;this is a sentence&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：总共有 9 个空格和 4 个单词。可以将 9 个空格平均分配到相邻单词之间，相邻单词间空格数为：9 / (4-1) = 3 个。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：text = &amp;quot; practice makes perfect&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;practice makes perfect &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：总共有 7 个空格和 3 个单词。7 / (3-1) = 3 个空格加上 1 个多余的空格。多余的空格需要放在字符串的末尾。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：text = &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：text = &amp;quot; walks udp package into bar a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;walks udp package into bar a &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 5：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：text = &amp;quot;a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&amp;quot;a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= text.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;text 由小写英文字母和 ’ ’ 组成&lt;/li&gt;
&lt;li&gt;text 中至少包含一个单词&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;模拟&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    string reorderSpaces(string text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list&amp;lt;char&amp;gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;string&amp;gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;text.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(text[i]==&amp;#x27; &amp;#x27;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                while(!a.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    s+=a.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    a.pop_front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(!s.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b.push_back(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a.push_back(text[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        string s1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(!a.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            s1+=a.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a.pop_front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!s1.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            b.push_back(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n=b.size()-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        string s=&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s+=b[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(n==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;ans;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                s+=&amp;#x27; &amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=1;i&amp;lt;b.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(int j=0;j&amp;lt;ans/n;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    s+=&amp;#x27; &amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                s+=b[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;ans%n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                s+=&amp;#x27; &amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-07T09:04:47.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/06/LeetCode/828-%E7%BB%9F%E8%AE%A1%E5%AD%90%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</id>
        <title>828. 统计子串中的唯一字符</title>
        <link rel="alternate" href="https://x-17.top/2022/09/06/LeetCode/828-%E7%BB%9F%E8%AE%A1%E5%AD%90%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/&#34;&gt;https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/&lt;/a&gt; 我们定义了一个函数 countUniqueChars (s) 来统计字符串 s 中的唯一字符，并返回唯一字符的个数。 例如：s = “LEETCODE” ，则其中 “L”, “T”,“C”,“O”,“D” 都是唯一字符，因为它们只出现一次，所以 countUniqueChars (s) = 5 。 本题将会给你一个字符串 s ，我们需要返回 countUniqueChars (t) 的总和，其中 t 是 s 的子字符串。输入用例保证返回值为 32 位整数。 注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计 s 的所有子字符串中的唯一字符）。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: s = &amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 所有可能的子串为：&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;AB&amp;quot;,&amp;quot;BC&amp;quot; 和 &amp;quot;ABC&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;其中，每一个子串都由独特字符构成。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: s = &amp;quot;ABA&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释: 除了 countUniqueChars(&amp;quot;ABA&amp;quot;) = 1 之外，其余与示例 1 相同。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &amp;quot;LEETCODE&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：92&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s.length &amp;lt;= 10^5&lt;/li&gt;
&lt;li&gt;s 只包含大写英文字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;题意是求出给定字符串的全部子串中唯一字符的个数，因此只需要计算每个字符能在多少个子串中成为唯一字符，即一个字符分别在第 i,j,k 位出现的话，就应该有 \((j-i)*(k-j)\) 个字符串中位于 j 位的该字符是唯一字符。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int uniqueLetterString(string s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map&amp;lt;char,vector&amp;lt;int&amp;gt;&amp;gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;s.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a[s[i]].push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(auto it=a.begin();it!=a.end();it++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vector&amp;lt;int&amp;gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            b.push_back(-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;it-&amp;gt;second.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b.push_back(it-&amp;gt;second[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            b.push_back(s.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=1;i&amp;lt;b.size()-1;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans+=(b[i]-b[i-1])*(b[i+1]-b[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-09-06T07:47:08.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/04/LeetCode/1582-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E4%BD%8D%E7%BD%AE/</id>
        <title>1582. 二进制矩阵中的特殊位置</title>
        <link rel="alternate" href="https://x-17.top/2022/09/04/LeetCode/1582-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E4%BD%8D%E7%BD%AE/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/special-positions-in-a-binary-matrix/&#34;&gt;https://leetcode.cn/problems/special-positions-in-a-binary-matrix/&lt;/a&gt; 给你一个大小为 rows x cols 的矩阵 mat，其中 mat [i][j] 是 0 或 1，请返回 矩阵 mat 中特殊位置的数目 。 特殊位置 定义：如果 mat [i][j] == 1 并且第 i 行和第 j 列中的所有其他元素均为 0（行和列的下标均 从 0 开始 ），则位置 (i, j) 被称为特殊位置。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：mat = [[1,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,0,1],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [1,0,0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：(1,2) 是一个特殊位置，因为 mat[1][2] == 1 且所处的行和列上所有其他元素都是 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：mat = [[1,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,1,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,0,1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：(0,0), (1,1) 和 (2,2) 都是特殊位置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：mat = [[0,0,0,1],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [1,0,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,1,1,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,0,0,0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：mat = [[0,0,0,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [1,0,0,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,1,0,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,0,1,0,0],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [0,0,0,1,1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rows == mat.length&lt;/li&gt;
&lt;li&gt;cols == mat[i].length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= rows, cols &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;mat [i][j] 是 0 或 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;模拟即可&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int numSpecial(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; h;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;int&amp;gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;mat.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int num=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j=0;j&amp;lt;mat[i].size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                num+=mat[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            h.push_back(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;mat[0].size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int num=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j=0;j&amp;lt;mat.size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                num+=mat[j][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            s.push_back(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;h.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j=0;j&amp;lt;s.size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(h[i]==1&amp;amp;&amp;amp;s[j]==1&amp;amp;&amp;amp;mat[i][j]==1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (m*n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (m+n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-04T04:19:09.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/02/LeetCode/687-%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84/</id>
        <title>687. 最长同值路径</title>
        <link rel="alternate" href="https://x-17.top/2022/09/02/LeetCode/687-%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/longest-univalue-path/&#34;&gt;https://leetcode.cn/problems/longest-univalue-path/&lt;/a&gt; 给定一个二叉树的 root ，返回 最长的路径的长度 ，这个路径中的 每个节点具有相同值 。 这条路径可以经过也可以不经过根节点。 两个节点之间的路径长度 由它们之间的边数表示。 示例 1: &lt;img src=&#34;https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [5,4,5,1,1,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2: &lt;img src=&#34;https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [1,4,5,4,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树的节点数的范围是 [0, 104]&lt;/li&gt;
&lt;li&gt;-1000 &amp;lt;= Node.val &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;树的深度将不超过 1000&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;利用深搜递归获得经过某个父节点得到的最长规定路径，从而得到全局最长规定路径&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * Definition for a binary tree node.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * struct TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *     TreeNode *left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *     TreeNode *right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int longestUnivaluePath(TreeNode* root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int dfs(TreeNode* root)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!root)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int left=dfs(root-&amp;gt;left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int right=dfs(root-&amp;gt;right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(root&amp;amp;&amp;amp;root-&amp;gt;left&amp;amp;&amp;amp;root-&amp;gt;val==root-&amp;gt;left-&amp;gt;val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(root&amp;amp;&amp;amp;root-&amp;gt;right&amp;amp;&amp;amp;root-&amp;gt;val==root-&amp;gt;right-&amp;gt;val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=max(ans,right+left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return max(right,left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-09-02T11:08:40.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/09/01/LeetCode/1475-%E5%95%86%E5%93%81%E6%8A%98%E6%89%A3%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E4%BB%B7%E6%A0%BC/</id>
        <title>1475. 商品折扣后的最终价格</title>
        <link rel="alternate" href="https://x-17.top/2022/09/01/LeetCode/1475-%E5%95%86%E5%93%81%E6%8A%98%E6%89%A3%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E4%BB%B7%E6%A0%BC/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/&#34;&gt;https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/&lt;/a&gt; 给你一个数组 prices ，其中 prices [i] 是商店里第 i 件商品的价格。 商店里正在进行促销活动，如果你要买第 i 件商品，那么你可以得到与 prices [j] 相等的折扣，其中 j 是满足 j &amp;gt; i 且 prices [j] &amp;lt;= prices [i] 的 最小下标 ，如果没有满足条件的 j ，你将没有任何折扣。 请你返回一个数组，数组中第 i 个元素是折扣后你购买商品 i 最终需要支付的价格。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：prices = [8,4,6,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[4,2,4,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;商品 0 的价格为 price[0]=8 ，你将得到 prices[1]=4 的折扣，所以最终价格为 8 - 4 = 4 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;商品 1 的价格为 price[1]=4 ，你将得到 prices[3]=2 的折扣，所以最终价格为 4 - 2 = 2 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;商品 2 的价格为 price[2]=6 ，你将得到 prices[3]=2 的折扣，所以最终价格为 6 - 2 = 4 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;商品 3 和 4 都没有折扣。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：prices = [1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：在这个例子中，所有商品都没有折扣。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：prices = [10,1,1,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[9,0,1,6]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= prices.length &amp;lt;= 500&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= prices[i] &amp;lt;= 10^3&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;按题意直接遍历即可&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector finalPrices(vector&amp;lt;int&amp;gt;&amp;amp; prices) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;prices.size()-1;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int flag=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j=i+1;j&amp;lt;prices.size();j++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(prices[i]&amp;gt;=prices[j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    a.push_back(prices[i]-prices[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    flag=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(flag)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a.push_back(prices[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a.push_back(prices[prices.size()-1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 \(O (n^2)\)&lt;/li&gt;
&lt;li&gt;空间复杂度 \(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-09-01T09:05:37.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/31/LeetCode/946-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/</id>
        <title>946. 验证栈序列</title>
        <link rel="alternate" href="https://x-17.top/2022/08/31/LeetCode/946-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/validate-stack-sequences/&#34;&gt;https://leetcode.cn/problems/validate-stack-sequences/&lt;/a&gt; 给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：我们可以按以下顺序执行：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;push(1), push(2), push(3), push(4), pop() -&amp;gt; 4,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;push(5), pop() -&amp;gt; 5, pop() -&amp;gt; 3, pop() -&amp;gt; 2, pop() -&amp;gt; 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：1 不能在 2 之前弹出。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= pushed.length &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= pushed[i] &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;pushed 的所有元素 互不相同&lt;/li&gt;
&lt;li&gt;popped.length == pushed.length&lt;/li&gt;
&lt;li&gt;popped 是 pushed 的一个排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;栈模拟&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool validateStackSequences(vector&amp;lt;int&amp;gt;&amp;amp; pushed, vector&amp;lt;int&amp;gt;&amp;amp; popped) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int flag=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stack s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;pushed.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            s.push(pushed[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            while(s.top()==popped[flag])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                s.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                flag++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(flag==popped.size())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(s.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-08-31T04:53:01.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/30/LeetCode/998-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-ii/</id>
        <title>998. 最大二叉树 II</title>
        <link rel="alternate" href="https://x-17.top/2022/08/30/LeetCode/998-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-ii/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-binary-tree-ii/&#34;&gt;https://leetcode.cn/problems/maximum-binary-tree-ii/&lt;/a&gt; 最大树 定义：一棵树，并满足：其中每个节点的值都大于其子树中的任何其他值。 给你最大树的根节点 root 和一个整数 val 。 就像 之前的问题 那样，给定的树是利用 Construct (a) 例程从列表 a（root = Construct (a)）递归地构建的： 如果 a 为空，返回 null 。 否则，令 a [i] 作为 a 的最大元素。创建一个值为 a [i] 的根节点 root 。 root 的左子树将被构建为 Construct ([a [0], a [1], …, a [i - 1]]) 。 root 的右子树将被构建为 Construct ([a [i + 1], a [i + 2], …, a [a.length - 1]]) 。 返回 root 。 请注意，题目没有直接给出 a ，只是给出一个根节点 root = Construct (a) 。 假设 b 是 a 的副本，并在末尾附加值 val。题目数据保证 b 中的值互不相同。 返回 Construct (b) 。 示例 1： &lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-1-1.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-1-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [4,1,3,null,null,2], val = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[5,4,null,1,3,null,null,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：a = [1,4,2,3], b = [1,4,2,3,5]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2： &lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-2-1.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-2-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [5,2,4,null,1], val = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[5,2,4,null,1,null,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：a = [2,1,5,4], b = [2,1,5,4,3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3： &lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-3-1.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/maximum-binary-tree-3-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [5,2,3,null,1], val = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[5,2,4,null,1,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：a = [2,1,5,3], b = [2,1,5,3,4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(树中节点数目在范围 [1, 100] 内 \)&lt;/li&gt;
&lt;li&gt;\(1 &amp;lt;= Node.val &amp;lt;= 100\)&lt;/li&gt;
&lt;li&gt;\(树中的所有值 互不相同 \)&lt;/li&gt;
&lt;li&gt;\(1 &amp;lt;= val &amp;lt;= 100\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;因为 val 是附加在末尾的，所以根据题意，如果 val 大于 a 中所有值，那只需要将整个 a 作为以 val 为根节点的左子树即可得到 b；否则就在 a 的右子树中找到小于 val 的节点值，将值为 val 的节点插在此处并将该节点及其子树作为 val 节点的左子树即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TreeNode* insertIntoMaxTree(TreeNode* root, int val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TreeNode* parent = nullptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TreeNode* cur = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (cur) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (val &amp;gt; cur-&amp;gt;val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (!parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return new TreeNode(val, root, nullptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                TreeNode* node = new TreeNode(val, cur, nullptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                parent-&amp;gt;right = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                parent = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cur = cur-&amp;gt;right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        parent-&amp;gt;right = new TreeNode(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-08-30T02:42:42.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/29/LeetCode/1470-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/</id>
        <title>1470. 重新排列数组</title>
        <link rel="alternate" href="https://x-17.top/2022/08/29/LeetCode/1470-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/shuffle-the-array/&#34;&gt;https://leetcode.cn/problems/shuffle-the-array/&lt;/a&gt; 给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,…,xn,y1,y2,…,yn] 的格式排列。 请你将数组按 [x1,y1,x2,y2,…,xn,yn] 格式重新排列，返回重排后的数组。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [2,5,1,3,4,7], n = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[2,3,5,4,1,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1,2,3,4,4,3,2,1], n = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1,4,2,3,3,2,4,1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1,1,2,2], n = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1,2,1,2]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(1 &amp;lt;= n &amp;lt;= 500\)&lt;/li&gt;
&lt;li&gt;\(nums.length == 2n\)&lt;/li&gt;
&lt;li&gt;\(1 &amp;lt;= nums[i] &amp;lt;= 10^3\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;按题意模拟即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector shuffle(vector&amp;lt;int&amp;gt;&amp;amp; nums, int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans.push_back(nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans.push_back(nums[i+n]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-08-29T03:55:49.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/28/LeetCode/793-%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E5%90%8E-k-%E4%B8%AA%E9%9B%B6/</id>
        <title>793. 阶乘函数后 K 个零</title>
        <link rel="alternate" href="https://x-17.top/2022/08/28/LeetCode/793-%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E5%90%8E-k-%E4%B8%AA%E9%9B%B6/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/&#34;&gt;https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/&lt;/a&gt;f (x) 是 x! 末尾是 0 的数量。回想一下 x! = 1 * 2 * 3 * … * x，且 0! = 1 。 例如， f (3) = 0 ，因为 3! = 6 的末尾没有 0 ；而 f (11) = 2 ，因为 11!= 39916800 末端有 2 个 0 。 给定 k，找出返回能满足 f (x) = k 的非负整数 x 的数量。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：k = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：0!, 1!, 2!, 3!, 和 4! 均符合 k = 0 的条件。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：k = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：没有匹配到这样的 x!，符合 k = 5 的条件。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(0 &amp;lt;= k &amp;lt;= 10^9\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;根据题意，只有因子 2 和 5 相乘能得到以 0 为结尾的数。 又因为 2 出现次数远大于 5，因此只需求 5 为因子出现的次数（25 及类似的要记多次），也可分析出所求其实只有 0 和 5 两种结果。（官方代码）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int zeta(long x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res += x / 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x /= 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    long long help(int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long long r = 5LL * k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        long long l = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (l &amp;lt;= r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            long long mid = (l + r) / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (zeta(mid) &amp;lt; k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                l = mid + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                r = mid - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return r + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int preimageSizeFZF(int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return help(k + 1) - help(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (log^2k)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-08-28T13:46:52.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/27/LeetCode/662-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6/</id>
        <title>662. 二叉树最大宽度</title>
        <link rel="alternate" href="https://x-17.top/2022/08/27/LeetCode/662-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-width-of-binary-tree/&#34;&gt;https://leetcode.cn/problems/maximum-width-of-binary-tree/&lt;/a&gt; 给你一棵二叉树的根节点 root ，返回树的 最大宽度 。 树的 最大宽度 是所有层中最大的 宽度 。 每一层的 宽度 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 null 节点，这些 null 节点也计入长度。 题目数据保证答案将会在  32 位 带符号整数范围内。 示例 1： &lt;img src=&#34;https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [1,3,2,5,3,null,9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最大宽度出现在树的第 3 层，宽度为 4 (5,3,null,9) 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2： &lt;img src=&#34;https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [1,3,2,5,null,null,9,6,null,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最大宽度出现在树的第 4 层，宽度为 7 (6,null,null,null,null,null,7) 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3： &lt;img src=&#34;https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [1,3,2,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：最大宽度出现在树的第 2 层，宽度为 2 (3,2) 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(树中节点的数目范围是 [1, 3000]\)&lt;/li&gt;
&lt;li&gt;\(-100&amp;lt;=Node.val&amp;lt;=100\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;解法一：广度优先遍历（官方题解）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int widthOfBinaryTree(TreeNode* root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unsigned long long res = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;pair&amp;gt; arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr.emplace_back(root, 1L);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (!arr.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vector&amp;lt;pair&amp;gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (auto &amp;amp;[node, index] : arr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (node-&amp;gt;left) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    tmp.emplace_back(node-&amp;gt;left, index * 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (node-&amp;gt;right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    tmp.emplace_back(node-&amp;gt;right, index * 2 + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = max(res, arr.back().second - arr[0].second + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr = move(tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解法二：深度优先遍历（官方题解）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;using ULL = unsigned long long;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int widthOfBinaryTree(TreeNode* root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;int, ULL&amp;gt; levelMin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        function&amp;lt;ULL(TreeNode*, int, ULL)&amp;gt; dfs = [&amp;amp;](TreeNode* node, int depth, ULL index)-&amp;gt;ULL &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (node == nullptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return 0LL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (!levelMin.count(depth)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                levelMin[depth] = index; // 每一层最先访问到的节点会是最左边的节点，即每一层编号的最小值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return max(&amp;#123;index - levelMin[depth] + 1LL, dfs(node-&amp;gt;left, depth + 1, index * 2), dfs(node-&amp;gt;right, depth + 1, index * 2 + 1)&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return dfs(root, 1, 1LL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (n)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-08-27T04:07:20.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/26/LeetCode/1464-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</id>
        <title>1464. 数组中两元素的最大乘积</title>
        <link rel="alternate" href="https://x-17.top/2022/08/26/LeetCode/1464-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/&#34;&gt;https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/&lt;/a&gt; 给你一个整数数组 nums，请你选择数组的两个不同下标 i 和 j，使 (nums [i]-1)*(nums [j]-1) 取得最大值。 请你计算并返回该式的最大值。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [3,4,5,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：12 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：如果选择下标 i=1 和 j=2（下标从 0 开始），则可以获得最大值，(nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1,5,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：选择下标 i=1 和 j=3（下标从 0 开始），则可以获得最大值 (5-1)*(5-1) = 16 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [3,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2 &amp;lt;= nums.length &amp;lt;= 500&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= nums[i] &amp;lt;= 10^3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;解法一：数据最多是 500，而暴力求解时间复杂度是 \(O (n^2)\), 显然可以通过。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int maxProduct(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;nums.size()-1;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j=i+1;j&amp;lt;nums.size();j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans=max(ans,(nums[i]-1)*(nums[j]-1));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (n^2)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解法二：根据题意我们只需要找出最大值和次大值即可，所以可以排序实现。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int maxProduct(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(nums.begin(),nums.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (nums[nums.size()-1]-1)*(nums[nums.size()-2]-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (nlogn)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解法三：一次遍历维护最大值和次大值即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int maxProduct(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int a=max(nums[0],nums[1]),b=min(nums[0],nums[1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=2;i&amp;lt;nums.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int c=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a=max(a,nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(a==nums[i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b=max(c,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b=max(b,nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (a-1)*(b-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复杂度分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：\(O (n)\)&lt;/li&gt;
&lt;li&gt;空间复杂度：\(O (1)\)&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-08-26T04:23:17.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/25/LeetCode/658-%E6%89%BE%E5%88%B0-k-%E4%B8%AA%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E5%85%83%E7%B4%A0/</id>
        <title>658. 找到 K 个最接近的元素</title>
        <link rel="alternate" href="https://x-17.top/2022/08/25/LeetCode/658-%E6%89%BE%E5%88%B0-k-%E4%B8%AA%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E5%85%83%E7%B4%A0/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-k-closest-elements/&#34;&gt;https://leetcode.cn/problems/find-k-closest-elements/&lt;/a&gt; 给定一个 排序好 的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。 整数 a 比整数 b 更接近 x 需要满足： a - x &amp;lt; b - x 或者 a - x == b - x 且 a &amp;lt; b 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,2,3,4,5], k = 4, x = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1,2,3,4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：arr = [1,2,3,4,5], k = 4, x = -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[1,2,3,4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= k &amp;lt;= arr.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= arr.length &amp;lt;= 104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr 按 升序 排列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-104 &amp;lt;= arr[i], x &amp;lt;= 104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;解法一：按照题意进行排序，返回前 k 个，官方解法写的确实短。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector findClosestElements(vector&amp;lt;int&amp;gt;&amp;amp; arr, int k, int x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(arr.begin(), arr.end(), [x](int a, int b) -&amp;gt; bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return abs(a - x) &amp;lt; abs(b - x)  abs(a - x) == abs(b - x) &amp;amp;&amp;amp; a &amp;lt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(arr.begin(), arr.begin() + k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return vector(arr.begin(), arr.begin() + k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解法二：二分加双指针，依旧是简短的官方代码。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector findClosestElements(vector&amp;lt;int&amp;gt;&amp;amp; arr, int k, int x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int right = lower_bound(arr.begin(), arr.end(), x) - arr.begin();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int left = right - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (k--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (left &amp;lt; 0) &amp;#123; right++; &amp;#125; else if (right &amp;gt;= arr.size()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                left--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else if (x - arr[left] &amp;lt;= arr[right] - x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                left--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                right++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return vector(arr.begin() + left + 1, arr.begin() + right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Medium" />
        <category term="leetcode每日一题" />
        <updated>2022-08-25T03:36:02.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/24/LeetCode/1460-%E9%80%9A%E8%BF%87%E7%BF%BB%E8%BD%AC%E5%AD%90%E6%95%B0%E7%BB%84%E4%BD%BF%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</id>
        <title>1460. 通过翻转子数组使两个数组相等</title>
        <link rel="alternate" href="https://x-17.top/2022/08/24/LeetCode/1460-%E9%80%9A%E8%BF%87%E7%BF%BB%E8%BD%AC%E5%AD%90%E6%95%B0%E7%BB%84%E4%BD%BF%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/make-two-arrays-equal-by-reversing-sub-arrays/&#34;&gt;https://leetcode.cn/problems/make-two-arrays-equal-by-reversing-sub-arrays/&lt;/a&gt; 给你两个长度相同的整数数组 target 和 arr 。每一步中，你可以选择 arr 的任意 非空子数组 并将它翻转。你可以执行此过程任意次。 如果你能让 arr 变得与 target 相同，返回 True；否则，返回 False 。 示例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：target = [1,2,3,4], arr = [2,4,1,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：你可以按照如下步骤使 arr 变成 target：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1- 翻转子数组 [2,4,1] ，arr 变成 [1,4,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2- 翻转子数组 [4,2] ，arr 变成 [1,2,4,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3- 翻转子数组 [4,3] ，arr 变成 [1,2,3,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;上述方法并不是唯一的，还存在多种将 arr 变成 target 的方法。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：target = [7], arr = [7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：arr 不需要做任何翻转已经与 target 相等。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：target = [3,7,9], arr = [3,7,11]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：arr 没有数字 9 ，所以无论如何也无法变成 target 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;target.length == arr.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= target.length &amp;lt;= 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= target[i] &amp;lt;= 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= arr[i] &amp;lt;= 1000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;题解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题解&#34;&gt;#&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;如果 target 和 arr 的长度为 1，那么只需要判断二者是否相等即可； 如果它们的长度大于一，以二为例，只要它们的元素都相等，就可以通过最多一次交换得到相同的两个数组；同理可证，可在不改变其他数字位置的情况下交换任意两个数字的位置，因此，只需判断两数组所包含的元素是否完全相等即可。 解法一：利用 map 存储出现的整数及次数，比较是否相等即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool canBeEqual(vector&amp;lt;int&amp;gt;&amp;amp; target, vector&amp;lt;int&amp;gt;&amp;amp; arr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(target.size()==1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(target[0]==arr[0])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            map&amp;lt;int,int&amp;gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            map&amp;lt;int,int&amp;gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int i=0;i&amp;lt;target.size();i++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(t.count(target[i]))&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    t[target[i]]++; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;else&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    t[target[i]]=1; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(a.count(arr[i]))&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    a[arr[i]]++; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;else&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    a[arr[i]]=1; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(auto it=t.begin(),ia=a.begin();it!=t.end(),ia!=a.end();it++,ia++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(it-&amp;gt;first!=ia-&amp;gt;firstit-&amp;gt;second!=ia-&amp;gt;second)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解法二：排序后比较即可&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool canBeEqual(vector&amp;lt;int&amp;gt;&amp;amp; target, vector&amp;lt;int&amp;gt;&amp;amp; arr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(target.begin(),target.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sort(arr.begin(),arr.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;target.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(target[i]!=arr[i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Easy" />
        <category term="leetcode每日一题" />
        <updated>2022-08-24T04:12:49.000Z</updated>
    </entry>
    <entry>
        <id>https://x-17.top/2022/08/23/LeetCode/782-%E5%8F%98%E4%B8%BA%E6%A3%8B%E7%9B%98/</id>
        <title>782.变为棋盘</title>
        <link rel="alternate" href="https://x-17.top/2022/08/23/LeetCode/782-%E5%8F%98%E4%B8%BA%E6%A3%8B%E7%9B%98/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/transform-to-chessboard/&#34;&gt;https://leetcode.cn/problems/transform-to-chessboard/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个 n x n 的二维网络 board 仅由 0 和 1 组成 。每次移动，你能任意交换两列或是两行的位置。&lt;br&gt;
返回 将这个矩阵变为  “棋盘”  所需的最小移动次数 。如果不存在可行的变换，输出 -1。&lt;br&gt;
“棋盘” 是指任意一格的上下左右四个方向的值均与本身不同的矩阵。&lt;br&gt;
示例 1:&lt;br&gt;
&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/chessboard1-grid.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
 输入: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]&lt;br&gt;
 输出: 2&lt;br&gt;
 解释：一种可行的变换方式如下，从左到右：&lt;br&gt;
第一次移动交换了第一列和第二列。&lt;br&gt;
第二次移动交换了第二行和第三行。&lt;br&gt;
示例 2:&lt;br&gt;
&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/chessboard2-grid.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
 输入: board = [[0, 1], [1, 0]]&lt;br&gt;
 输出: 0&lt;br&gt;
 解释：注意左上角的格值为 0 时也是合法的棋盘，也是合法的棋盘.&lt;br&gt;
 示例 3:&lt;br&gt;
&lt;img src=&#34;https://x-17.top/wp-content/uploads/2022/08/chessboard3-grid.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
 输入: board = [[1, 0], [1, 0]]&lt;br&gt;
 输出: -1&lt;br&gt;
 解释：任意的变换都不能使这个输入变为合法的棋盘。&lt;br&gt;
 &lt;br&gt;
提示：&lt;br&gt;
n == board.length&lt;br&gt;
n == board[i].length&lt;br&gt;
2 &amp;lt;= n &amp;lt;= 30&lt;br&gt;
board [i][j] 将只包含 0 或 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;官方解法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#官方解法&#34;&gt;#&lt;/a&gt; 官方解法：&lt;/h2&gt;
&lt;p&gt;方法一：分维度计算&lt;/p&gt;
&lt;p&gt;首先需要思考的是对矩阵做一次交换之后，矩阵的变换状态。比如我们以交换列为代表，在对任意两列进行交换之后，可以看到列交换是不会改变任意相邻两行之间的元素异同对应关系，比如相邻两行的两个元素_board_[i][j],&lt;em&gt;board&lt;/em&gt; [i+1][j] 原本就相同，任意列交换之后这个两个元素对应的关系保持不变，如果这两个元素本来就不同，经过列交换之后也仍然不同，因此可以推出矩阵一定只能包含有两种不同的行，要么与第一行的元素相同，要么每一行的元素刚好与第一行的元素 “相反”。如果矩阵可以转换为合法的 “棋盘”，假设第 1 行的元素为 [0,1,1,1,0]，则其他行的元素要么为 [0,1,1,1,0]，要么为 [1,0,0,0,1]。最终的棋盘一定只有两种不同的行，要么以 0 开始的 [0,1,0,1,⋯]，要么以 11 开始的 [1,0,1,0,⋯]，因此我们可以推出棋盘也一定可以通过列变换将所有的行变为只有以上两种状态的行，否则无法得到最终合法的 “棋盘”。同时我们可以观察到，先换行再换列跟先换列再换行结果是一样的，因为我们可以先将所有的行调整到正确的位置，再将所有的列调整到正确的位置。行与列之间的变换实际是相互独立的，二者互不影响，列变换不会影响相邻两行的异同关系，行变换不会不会影响相邻两列的异同关系。&lt;/p&gt;
&lt;p&gt;由于最终只有两种不同的行，要达成最终的 “棋盘” 实际上等价于将矩阵的行表示成 0,1 相互交替的状态，如果一个行无法变为 0,1 交替的状态，则我们认为矩阵不存在可行的变换。假设矩阵的某行用 [0,1] 表示之后得到数组为 [0,1,1,1,0,0]，那么只需求出这个数组变成 [0,1,0,1,0,1] 或者 [1,0,1,0,1,0] 的最少交换次数即可。同理，对于矩阵的列也是如此，这就将二维问题变成了两个一维问题。我们实际只需要分别将矩阵的第一行变为最终状态和第一列变为最终状态，最终的矩阵一定为合法 “棋盘”。&lt;/p&gt;
&lt;p&gt;首先我们需要检测矩阵的合法性，即该矩阵是否可以变为合法的 “棋盘”。我们依次检测矩阵的每一行是否是否可以变为 0,1 交替，即变为 [0,1,0,1,⋯],[1,0,1,0,⋯] 两种可能的行；然后依次检测矩阵的每一列是否可以变为 0,10,1 交替，即变为 [0,1,0,1,⋯],[1,0,1,0,⋯] 两种可能的列。设行的数目为 n，检测矩阵的行与列时需要进行如下检测：&lt;/p&gt;
&lt;p&gt;检测每一行和每一列的状态是否合法：由于列变换不改变相邻两行元素的对应关系，因此我们可以知道矩阵的行要么与第 11 行相同，要么与第 11 行 “相反”。设第一行的状态为 &lt;em&gt;rowMask&lt;/em&gt;，与之相反对应的状态为 &lt;em&gt;reverseRowMask&lt;/em&gt;，我们检测每一行是否属于这两个合法的状态 &lt;em&gt;rowMask,reverseRowMask&lt;/em&gt;，如果不合法直接返回，对于列也采用同样的检测方法。由于题目中的行与列的值均为 0 或者 1，且行数和列数最大为 30，我们利用压缩位图来表示每一行或者每一列的状态，可以用一个 32 位整数来表示每一行，其中整数每位上的数字对应着每列上的数字。&lt;/p&gt;
&lt;p&gt;检测每一行和每一列中含有的数字是否合法：检测每一行或者每一列若要变为 0,1 交替的状态，如果 n 为偶数，则每一行中 1 的数目与 0 的数目相等；如果 n 为奇数，则每一行中 1 的数目与 0 的数目相差的绝对值一定为 1。此时我们只需要检测第一行中含有的数字 0,1 的个数是否合法，对于列我们也采用同样的检测方法。由于我们用一个 32 位整数来表示每一行或者每一列，我们只需要要快速计算出整数的二进制位上含有的 1 的数目即可。&lt;/p&gt;
&lt;p&gt;检测不同状态的行数和列数是否合法：我们设矩阵中与第一行相同的行的数量为 &lt;em&gt;count&lt;/em&gt;。根据我们之前的推论可知，需要满足两种不同的行交替分情况讨论：如果 n 为偶数，由于必须要满足两种不同的行交替，每种行的数目只能占到总行数的一半，此时一定有 _count_×2=n；如果 n 为奇数，由于必须要满足两种不同的行交替，则另一种行的数量只能为 &lt;em&gt;n−count&lt;/em&gt;，由于必须满足交替不同，则二者之间的差值的绝对值一定为 11，因此此时一定满足 ∣2×_count_−n∣=1，满足以上条件才是合法的行数。我们采用同样的方法对矩阵的列数进行检测。&lt;/p&gt;
&lt;p&gt;其次我们求出将矩阵变为棋盘的最少交换次数。分为两种情况讨论:&lt;/p&gt;
&lt;p&gt;如果 n 为偶数，则此时最终的合法棋盘有两种可能，即第一行的元素的第一个元素 &lt;em&gt;board&lt;/em&gt; [0][0]=0 或者 &lt;em&gt;board&lt;/em&gt; [0][0]=1。我们可以选择将第 1 行变为以 0 开头，此时只需将偶数位上的 0 全部替换为 1 即可；也可以选择将第 1 行变为以 1 开头，此时只需将奇数位上的 0 全部替换为 1 即可。我们可以用位图来快速计算出偶数位或者奇数位上 1 的个数，可以与特定的数进行布尔代数运算即可快速消除奇数位或者偶数位上的 1。&lt;/p&gt;
&lt;p&gt;如果 n 为奇数，则此时最终的合法棋盘只有一种可能，如果第一行中 0 的数目大于 1 的数目，此时第一行只能变为以 0 为开头交替的序列，此时我们只需要将偶数位上的 0 全部变为 1；如果第一行中 0 的数目小于 1 的数目，此时第一行只能交换变为以 1 为开头交替的序列，此时我们只需要将奇数位上的 0 全部变为 1。可以用位图来快速计算出偶数位或者奇数位上 1 的个数，可以与特定的数进行布尔代数运算即可快速消除奇数位或者偶数位上的 1。&lt;/p&gt;
&lt;p&gt;由于我们采用 32 位整数表示每一行或者每一列，在快速计算偶数位或者上的 1 的数目时可以采用位运算掩码。比如 32 位整数 x，我们只保留 x 偶数位上的 1，此时我们需要去掉奇数位上的 1，此时只需将 x 与掩码：&lt;/p&gt;
&lt;p&gt;\((1010 1010 1010 1010 1010 1010 1010 1010)_2=0xAAAAAAAA\)&lt;/p&gt;
&lt;p&gt;相与即可；我们只保留 xx 奇数位上的 11，此时我们需要去掉偶数位上的 11，此时只需将 xx 与掩码：&lt;/p&gt;
&lt;p&gt;\((0101 0101 0101 0101 0101 0101 0101 0101)_2=0x55555555\)&lt;/p&gt;
&lt;p&gt;相与即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int getMoves(int mask, int count, int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int ones = __builtin_popcount(mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (n &amp;amp; 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 如果 n 为奇数，则每一行中 1 与 0 的数目相差为 1，且满足相邻行交替 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (abs(n - 2 * ones) != 1  abs(n - 2 * count) != 1 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (ones == (n &amp;gt;&amp;gt; 1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 偶数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return n / 2 - __builtin_popcount(mask &amp;amp; 0xAAAAAAAA);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 奇数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return (n + 1) / 2 - __builtin_popcount(mask &amp;amp; 0x55555555);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; else &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 如果 n 为偶数，则每一行中 1 与 0 的数目相等，且满足相邻行交替 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (ones != (n &amp;gt;&amp;gt; 1)  count != (n &amp;gt;&amp;gt; 1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 偶数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int count0 = n / 2 - __builtin_popcount(mask &amp;amp; 0xAAAAAAAA);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 奇数位变为 1 的最小交换次数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int count1 = n / 2 - __builtin_popcount(mask &amp;amp; 0x55555555);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return min(count0, count1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int movesToChessboard(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; board) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n = board.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int rowMask = 0, colMask = 0;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /* 检查棋盘的第一行与第一列 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rowMask = (board[0][i] &amp;lt;&amp;lt; i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            colMask = (board[i][0] &amp;lt;&amp;lt; i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int reverseRowMask = ((1 &amp;lt;&amp;lt; n) - 1) ^ rowMask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int reverseColMask = ((1 &amp;lt;&amp;lt; n) - 1) ^ colMask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int rowCnt = 0, colCnt = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int currRowMask = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int currColMask = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                currRowMask = (board[i][j] &amp;lt;&amp;lt; j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                currColMask = (board[j][i] &amp;lt;&amp;lt; j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 检测每一行的状态是否合法 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (currRowMask != rowMask &amp;amp;&amp;amp; currRowMask != reverseRowMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else if (currRowMask == rowMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 记录与第一行相同的行数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                rowCnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 检测每一列的状态是否合法 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (currColMask != colMask &amp;amp;&amp;amp; currColMask != reverseColMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; else if (currColMask == colMask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                /* 记录与第一列相同的列数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                colCnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int rowMoves = getMoves(rowMask, rowCnt, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int colMoves = getMoves(colMask, colCnt, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (rowMoves == -1  colMoves == -1) ? -1 : (rowMoves + colMoves); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Hard" />
        <category term="leetcode每日一题" />
        <updated>2022-08-23T11:14:21.000Z</updated>
    </entry>
</feed>

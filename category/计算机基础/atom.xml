<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://x-17.top</id>
    <title>潇十七 • Posts by &#34;计算机基础&#34; category</title>
    <link href="https://x-17.top" />
    <updated>2022-10-08T12:22:17.000Z</updated>
    <category term="每日一题" />
    <category term="Easy" />
    <category term="MIT 6.1810" />
    <category term="操作系统" />
    <category term="Hard" />
    <category term="docker" />
    <category term="Medium" />
    <category term="leetcode每日一题" />
    <category term="Madium" />
    <category term="easy" />
    <category term="leetcode周赛" />
    <category term="工具" />
    <category term="设计模式" />
    <category term="C++ Primer" />
    <category term="C++" />
    <category term="wiki" />
    <category term="教程" />
    <category term="Hexo" />
    <category term="Butterfly" />
    <category term="秋招" />
    <category term="笔试" />
    <category term="面试" />
    <entry>
        <id>https://x-17.top/2022/10/08/MIT-6-1810-Operating-System-Engineering/</id>
        <title>MIT 6.1810 Operating System Engineering</title>
        <link rel="alternate" href="https://x-17.top/2022/10/08/MIT-6-1810-Operating-System-Engineering/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;课程地址:&lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/2022/index.html&#34;&gt;https://pdos.csail.mit.edu/6.1810/2022/index.html&lt;/a&gt;&lt;br&gt;
 新坑，MIT 6.1810&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;61810-2022-lecture-1-os-overview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#61810-2022-lecture-1-os-overview&#34;&gt;#&lt;/a&gt; 6.1810 2022 Lecture 1: O/S overview&lt;/h1&gt;
&lt;div class=&#34;tabs&#34; id=&#34;lecture-1&#34;&gt;&lt;ul class=&#34;nav-tabs&#34;&gt;&lt;li class=&#34;tab active&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lecture-1-1&#34;&gt;Overview&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lecture-1-2&#34;&gt;Class structure&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lecture-1-3&#34;&gt;Introduction to UNIX system calls&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lecture-1-4&#34;&gt;examples&lt;/button&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;tab-contents&#34;&gt;&lt;div class=&#34;tab-item-content active&#34; id=&#34;lecture-1-1&#34;&gt;&lt;h2 id=&#34;overview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt; Overview&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;bubble-content&#34;&gt;6.1810 goals&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;Understand operating system (O/S) design and implementation&lt;br&gt;Hands-on experience extending a small O/S&lt;br&gt;Hands-on experience writing systems software&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;What is the purpose of an O/S?&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;Abstract the hardware for convenience and portability&lt;br&gt;Multiplex the hardware among many applications&lt;br&gt;Isolate applications in order to contain bugs&lt;br&gt;Allow sharing among cooperating applications&lt;br&gt;Control sharing for security&lt;br&gt;Don’t get in the way of high performance&lt;br&gt;Support a wide range of applications&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;Organization: layered picture&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;[user/kernel diagram]&lt;br&gt;- user applications: vi，gcc，DB，&amp;amp;c&lt;br&gt;- kernel services&lt;br&gt;- h/w: CPU，RAM，disk，net，&amp;amp;c&lt;br&gt;we care a lot about the interfaces and internal kernal structure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;What services does ans O/S kernel typically provide?&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;process (a running program)&lt;br&gt;memory allocation&lt;br&gt;file contents&lt;br&gt;file names，directories&lt;br&gt;access control (security)&lt;br&gt;many others: users，IPC，network，time，terminals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;What’s the application / kernel interface?&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;“System calls&amp;quot;&lt;br&gt;Examples，in C，from UNIX (e.g. Linux，macOS，FreeBSD):&lt;br&gt;    fd = open(out”，1);&lt;br&gt;    write(fd，“hello\n”，6);&lt;br&gt;    pid = fork();&lt;br&gt;There look like function calls but they aren’t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;Why is O/S design+implementation hard and interesting?&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;many design tensions:&lt;br&gt;- efficient vs abstract/portable/general-purpose&lt;br&gt;- powerful vs simple interfaces&lt;br&gt;- flexible vs secure&lt;br&gt;features interact: &lt;br&gt;    fd = open;&lt;br&gt;    fork()&lt;br&gt;uses are varied: laptops，smart-phones，cloud，virtual machines，embedded&lt;br&gt;evolving hardware: NVRAM，multi-core，fast networks&lt;br&gt;unforgiving environment: quirky h/w，hard to debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;You’ll be glad you took this coourse if you…&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;care about what gose on under the hood&lt;br&gt;like infrastructure&lt;br&gt;need to track down bugs or security problems&lt;br&gt;care about high performance&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lecture-1-2&#34;&gt;&lt;h2 id=&#34;class-structure&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#class-structure&#34;&gt;#&lt;/a&gt; Class structure&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;bubble-content&#34;&gt;Online course information:&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#ec5830;&#34;&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/&#34;&gt;https://pdos.csail.mit.edu/6.1810/&lt;/a&gt; – schedule，assignments，labs&lt;br&gt;Piazza – announcements，discussion，lab help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;Lectures&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#ec5830;&#34;&gt;O/S ideas&lt;br&gt;case study of xv6，a small O/S，via code and xv6 book&lt;br&gt;lab background&lt;br&gt;O/S papers&lt;br&gt;submit a question about each reading，before lecture.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;Labs:&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#ec5830;&#34;&gt;The point: hands-on experience&lt;br&gt;Mostly one week each.&lt;br&gt;Three kinds:&lt;br&gt;    Systems programming (due next week…)&lt;br&gt;    O/S primitives，e.g. thread switching.&lt;br&gt;    O/S kernel extensions to xv6，e.g. network.&lt;br&gt;Use piazza to ask/answer lab questions.&lt;br&gt;Discussion is great，but please do not look at others’ solutions!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;bubble-content&#34;&gt;Grading:&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#ec5830;&#34;&gt;70% labs，based on tests (the same tests you run).&lt;br&gt;20% lab check-oof meetings: we’ll ask you about randomly-selected labs.&lt;br&gt;10% home-work and class/piazza discussion.&lt;br&gt;No exams，no quizzes.&lt;br&gt;Note that most of the grade is from labs. Start them early!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lecture-1-3&#34;&gt;&lt;h2 id=&#34;introduction-to-unix-system-calls&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#introduction-to-unix-system-calls&#34;&gt;#&lt;/a&gt; Introduction to UNIX system calls&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; Introduction to UNIX system calls &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;Applications see the O/S via system calls; that interface will be a big focus.&lt;br&gt;let’s start by looking at how programs use system calls.&lt;br&gt;you’ll use these system calls in the first lab.&lt;br&gt;and extend and improve them in subsequent labs.&lt;br&gt;I’ll show some examples, and run them on xv6.&lt;br&gt;xv6 has similar structure to UNIX systems such as Linux.&lt;/p&gt;&lt;/div&gt;&lt;details class=&#34;folding-tag&#34; red&gt;&lt;summary&gt; but much simpler -- you&#39;ll be able to digest all of xv6 &lt;/summary&gt;              &lt;div class=&#39;content&#39;&gt;              &lt;p&gt;accompanying book explains how xv6 works, and why&lt;/p&gt;              &lt;/div&gt;            &lt;/details&gt;&lt;details class=&#34;folding-tag&#34; red&gt;&lt;summary&gt; why UNIX? &lt;/summary&gt;              &lt;div class=&#39;content&#39;&gt;              &lt;p&gt;open source, well documented, clean design, widely used&lt;br&gt;studying xv6 will help if you ever need to look inside Linux&lt;/p&gt;              &lt;/div&gt;            &lt;/details&gt;&lt;details class=&#34;folding-tag&#34; red&gt;&lt;summary&gt; xv6 has two roles in 6.1810: &lt;/summary&gt;              &lt;div class=&#39;content&#39;&gt;              &lt;p&gt;example of core functions: virtual memory, multi-core, interrupts, &amp;amp;c&lt;br&gt;starting point for most of the labs&lt;/p&gt;              &lt;/div&gt;            &lt;/details&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;xv6 runs on RISC-V, as in 6.004&lt;br&gt;you’ll run xv6 under the qemu machine emulator&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; copy.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;copy input to output&lt;/p&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;read bytes from input, write them to the output&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;copy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;copy.c is written in C&lt;br&gt;Kernighan and Ritchie (K&amp;amp;R) book is good for learning C&lt;br&gt;you can find these example programs via the schedule on the web site&lt;/p&gt;&lt;/div&gt;&lt;details class=&#34;folding-tag&#34; red&gt;&lt;summary&gt; read() and write() are system calls &lt;/summary&gt;              &lt;div class=&#39;content&#39;&gt;              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;&lt;wavy&gt;first&lt;/wavy&gt; read()/write() argument is a “file descriptor” (fd)&lt;br&gt;passed to kernel to tell it which “open file” to read/write&lt;br&gt;must previously have been opened&lt;br&gt;an FD connects to a file/device/socket/&amp;amp;c&lt;br&gt;a process can open many files, have many FDs&lt;br&gt;UNIX convention: fd 0 is “standard input”, 1 is “standard output”&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;&lt;wavy&gt;second&lt;/wavy&gt; read() argument is a pointer to some memory into which to read&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;&lt;wavy&gt;third&lt;/wavy&gt; argument is the number of bytes to read&lt;br&gt;read() may read less, but not more&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;&lt;wavy&gt;return value:&lt;/wavy&gt; number of bytes actually read, or -1 for error&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;&lt;wavy&gt;note:&lt;/wavy&gt; copy.c does not care about the format of the data&lt;br&gt;UNIX I/O is 8-bit bytes&lt;br&gt;interpretation is application-specific, e.g. database records, C source, &amp;amp;c&lt;/p&gt;&lt;/div&gt;              &lt;/div&gt;            &lt;/details&gt;&lt;div class=&#34;note red icon-padding disabled&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;where do file descriptors come from?&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; open.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;create a file&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;open&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cat&lt;/span&gt; out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;open() creates a file, &lt;wavy&gt;returns a file descriptor (or -1 for error)&lt;/wavy&gt;&lt;br&gt;FD is a small integer&lt;br&gt;FD indexes into a per-process table maintained by kernel&lt;br&gt;[user/kernel diagram]&lt;/p&gt;&lt;/div&gt;&lt;span class=&#34;bubble-content&#34;&gt;different processes have different FD name-spaces&lt;/span&gt;&lt;span class=&#34;bubble-notation&#34;&gt;&lt;span class=&#34;bubble-item&#34; style=&#34;background-color:#71a4e3;&#34;&gt;i.e. FD 1 usually means different things to different processes&lt;/span&gt;&lt;/span&gt;&lt;div class=&#34;note red icon-padding flat&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;these examples ignore errors – don’t be this sloppy!&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;Figure 1.2 in the xv6 book lists system call arguments/return&lt;br&gt;or look at UNIX man pages, e.g. “man 2 open”&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; what happens when a program calls a system call like open()? &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;looks like a function call, but it’s actually a special instruction&lt;br&gt;hardware saves some user registers&lt;br&gt;hardware increases privilege level&lt;br&gt;hardware jumps to a known “entry point” in the kernel&lt;br&gt;now running C code in the kernel&lt;br&gt;kernel calls system call implementation&lt;br&gt;sys_open() looks up name in file system&lt;br&gt;it might wait for the disk&lt;br&gt;it updates kernel data structures (file block cache, FD table)&lt;br&gt;restore user registers&lt;br&gt;reduce privilege level&lt;br&gt;jump back to calling point in the program, which resumes&lt;br&gt;we’ll see more detail later in the course&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; shell &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;I’ve been typing to UNIX’s command-line interface, the shell.&lt;br&gt;the shell prints the “$” prompts.&lt;br&gt;the shell lets you run UNIX command-line utilities&lt;br&gt;useful for system management, messing with files, development, scripting&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt; &amp;gt; out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;grep x &amp;lt; out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;UNIX supports other styles of interaction too&lt;br&gt;window systems, GUIs, servers, routers, &amp;amp;c.&lt;br&gt;but time-sharing via the shell was the original focus of UNIX.&lt;br&gt;we can exercise many system calls via the shell.&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; fork.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;create a new process&lt;/p&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;the shell creates a new process for each command you type, e. g. for&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;the fork() system call creates a new process&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;fork&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;the kernel makes a copy of the calling process&lt;br&gt;instructions, data, registers, file descriptors, current directory&lt;br&gt;“parent” and “child” process&lt;br&gt;only difference: &lt;emp&gt;fork() returns a pid in parent, 0 in child a pid (process ID) is an interger,kernel gives each process a different pid&lt;/emp&gt;&lt;br&gt;thus:&lt;br&gt;fork.c’s “fork() returned” executes in &lt;em&gt;both&lt;/em&gt; processes&lt;br&gt;the “if(pid == 0)” allows code to distinguish&lt;br&gt;ok, fork lets us create a new process&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note red icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;how can we run a program in that process?&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; exec.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;replace calling process with an executable file&lt;/p&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;how does the shell run a program, e. g.&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; a b c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;a program is stored in a file: instructions and initial memory created by the compiler and linker&lt;br&gt;so there’s a file called echo, containing instructions&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;exec&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;exec() replaces current process with an executable file&lt;br&gt;discards instructions and memory from the file&lt;br&gt;preserves file descriptors&lt;br&gt;exec(filename, argument-array)&lt;br&gt;argument-array holds command-line arguments; exec passes to main()&lt;br&gt;cat uesr/echo.c&lt;br&gt;echo.c shows how a program looks at its command-line arguments&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; forkexec.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;fork() a new process，exec() a program&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;forkexec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;forkexec.c contains a common UNIX idiom:&lt;br&gt;fork() a child process&lt;br&gt;exec() a command in the child&lt;br&gt;parent wait()s for child to finish&lt;br&gt;the shell does fork/exec/wait for every command you type&lt;br&gt;after wait(), the shell prints the next prompt&lt;br&gt;to run in the background – &amp;amp; – the shell skips the wait()&lt;br&gt;exit(status) -&amp;gt; wait(&amp;amp;status)&lt;br&gt;status convention: 0 = success, 1 = command encountered an error&lt;br&gt;note: the fork() copies, but exec() discards the copied memory&lt;br&gt;this may seem wasteful&lt;br&gt;you’ll transparently eliminate the copy in the “copy-on-write” lab&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; refirect.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;redirect the output of a command&lt;/p&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;what does the shell do for this?&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; hello &amp;gt; out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;answer: fork, change FD 1 in child, exec echo&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;redirect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cat&lt;/span&gt; out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;note: open() always chooses lowest unused FD; 1 due to close(1).&lt;br&gt;fork, FDs, and exec interact nicely to implement I/O redirection&lt;br&gt;separate fork-then-exec give child a chance to change FDs before exec FDs provide indirection&lt;br&gt;commands just use FDs 0 and 1, don’t have to know where they go exec preserves the FDs that sh set up&lt;br&gt;thus: only sh has to know about I/O redirection, not each program&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; design decisions &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;It’s worth asking “why” about design decisions:&lt;br&gt;Why these I/O and process abstractions?&lt;br&gt;Why not something else?&lt;br&gt;Why provide a file system?&lt;br&gt;Why not let programs ues the disk their own way?&lt;br&gt;Why FDs?&lt;br&gt;Why not pass a filename to write()?&lt;br&gt;Why are files streams of bytes, not disk blocks or formatted records?&lt;br&gt;Why not combine fork() and exec()?&lt;br&gt;The UNIX design works well, but we will see other designs!&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; pipe1.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;communicate through a pipe&lt;/p&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;how does the shell implement&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt; | grep x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;pipe1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;an FD can refer to a “pipe”, as well as a file&lt;br&gt;the pipe() system call creates two FDs&lt;br&gt;read from the first FD&lt;br&gt;write to the seconnd FD&lt;br&gt;the hernel maintains a buffer for each pipe&lt;br&gt;[u/k diagram]&lt;br&gt;write() appends to the buffer&lt;br&gt;read() waits until there is data&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; pipe2.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;communicate between process&lt;/p&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;pipes combine well with fork() to implement ls | grep x&lt;br&gt;shell creates a pipe,&lt;br&gt;then forks (twice),&lt;br&gt;then connects ls’s FD 1 to pipe’s write FD,&lt;br&gt;and grep’s FD 0 to the pipe&lt;br&gt;[diagram]&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;pipe -- a simplified version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;pipes are a separate abstraction, but combine well w/ fork()&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; list.c &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p class=&#39;p red&#39;&gt;list files in a directory&lt;/p&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;how does ls get a list of the files in a directory?&lt;br&gt;you can open a directory and read it -&amp;gt; file names&lt;br&gt;“.” is a pseudo-name for a process’s current directory&lt;br&gt;see ls.c for more details&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; Summary &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;We’ve looked at UNIX’s I/O, file system, and process abstractions.&lt;br&gt;The interfaces are simple – just integers and I/O buffers.&lt;br&gt;The abstractions combine well, e. g. for I/O rediretion.&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lecture-1-4&#34;&gt;&lt;div class=&#34;tabs&#34; id=&#34;examples&#34;&gt;&lt;ul class=&#34;nav-tabs&#34;&gt;&lt;li class=&#34;tab active&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-1&#34;&gt;copy.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-2&#34;&gt;echo.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-3&#34;&gt;exec.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-4&#34;&gt;fork.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-5&#34;&gt;forkexec.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-6&#34;&gt;list.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-7&#34;&gt;open.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-8&#34;&gt;pipe1.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-9&#34;&gt;pipe2.c&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#examples-10&#34;&gt;redirect.c&lt;/button&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;tab-contents&#34;&gt;&lt;div class=&#34;tab-item-content active&#34; id=&#34;examples-1&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// copy.c: copy input to output.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = read(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, buf, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buf));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(n &amp;lt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    write(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, buf, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-2&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    write(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, argv[i], &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(argv[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt; argc)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      write(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      write(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-3&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// exec.c: replace a process with an executable file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[] = &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;this&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;is&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  exec(&lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, argv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec failed!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-4&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// fork.c: create a new process&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pid = fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;fork() returned %d\n&amp;quot;&lt;/span&gt;, pid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(pid == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;child\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;parent\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-5&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// forkexec.c: fork then exec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pid, status;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pid = fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(pid == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[] = &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;THIS&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;IS&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;ECHO&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    exec(&lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, argv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec failed!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;parent waiting\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wait(&amp;amp;status);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;the child exited with status %d\n&amp;quot;&lt;/span&gt;, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-6&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// list.c: list file names in the current directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ushort inum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; name[&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirent&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;e&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  fd = open(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(read(fd, &amp;amp;e, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(e)) == &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(e))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(e.name[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, e.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-7&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// open.c: create a file, write to it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/fcntl.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fd = open(&lt;span class=&#34;string&#34;&gt;&amp;quot;out&amp;quot;&lt;/span&gt;, O_WRONLY | O_CREATE | O_TRUNC);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  write(fd, &lt;span class=&#34;string&#34;&gt;&amp;quot;ooo\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-8&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// pipe1.c: communication over a pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fds[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// create a pipe, with two FDs in fds[0], fds[1].&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pipe(fds);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  write(fds[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;quot;this is pipe1\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  n = read(fds[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], buf, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buf));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  write(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, buf, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-9&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// pipe2.c: communication between two processes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n, pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fds[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// create a pipe, with two FDs in fds[0], fds[1].&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pipe(fds);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pid = fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pid == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    write(fds[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;quot;this is pipe2\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n = read(fds[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], buf, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buf));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    write(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, buf, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;examples-10&#34;&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/fcntl.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// redirect.c: run a command with output redirected&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pid = fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(pid == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    close(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    open(&lt;span class=&#34;string&#34;&gt;&amp;quot;out&amp;quot;&lt;/span&gt;, O_WRONLY | O_CREATE | O_TRUNC);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[] = &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;this&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;is&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;redirected&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    exec(&lt;span class=&#34;string&#34;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, argv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec failed!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wait((&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *) &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;lab-util-unix-utilities&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lab-util-unix-utilities&#34;&gt;#&lt;/a&gt; Lab util: Unix utilities&lt;/h1&gt;
&lt;div class=&#34;tabs&#34; id=&#34;lab:xv6-and-unix-utilities&#34;&gt;&lt;ul class=&#34;nav-tabs&#34;&gt;&lt;li class=&#34;tab active&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lab:xv6-and-unix-utilities-1&#34;&gt;Boot xv6(easy)&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lab:xv6-and-unix-utilities-2&#34;&gt;sleep(easy)&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lab:xv6-and-unix-utilities-3&#34;&gt;pingpong(easy)&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lab:xv6-and-unix-utilities-4&#34;&gt;primes(moderate)/(hard)&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lab:xv6-and-unix-utilities-5&#34;&gt;find(moderate)&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lab:xv6-and-unix-utilities-6&#34;&gt;xargs(moderate)&lt;/button&gt;&lt;/li&gt;&lt;li class=&#34;tab&#34;&gt;&lt;button type=&#34;button&#34; data-href=&#34;#lab:xv6-and-unix-utilities-7&#34;&gt;Optional challenge exercises&lt;/button&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;tab-contents&#34;&gt;&lt;div class=&#34;tab-item-content active&#34; id=&#34;lab:xv6-and-unix-utilities-1&#34;&gt;&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; requirement &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;You can do these labs on an Athena machine or on your own computer. If you use your own computer, have a look at the &lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/2022/tools.html&#34;&gt;lab tools page&lt;/a&gt; for setup tips.&lt;/p&gt;&lt;p&gt;If you use Athena, you must use an x86 machine; that is,  &lt;code&gt;uname -a&lt;/code&gt;  should mention  &lt;code&gt;i386 GNU/Linux&lt;/code&gt;  or  &lt;code&gt;i686 GNU/Linux&lt;/code&gt;  or x86_64 GNU/Linux. You can log into a public Athena host with&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -X athena.dialup.mit.edu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;We have set up the appropriate compilers and simulators for you on Athena. To use them, run&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;add -f 6.828&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;You must run this command every time you log in (or add it to your  &lt;code&gt;~/.environment&lt;/code&gt;  file). If you get obscure errors while compiling or running  &lt;code&gt;qemu&lt;/code&gt; , check that you added the course locker.&lt;br&gt;Fetch the git repository for the xv6 source for the lab:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;built_in&#34;&gt;clone&lt;/span&gt; git://g.csail.mit.edu/xv6-labs-2022&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cloning into &amp;#x27;xv6-labs-2022&amp;#x27;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; xv6-labs-2022&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;The repo is setup so that git checkouts the  &lt;code&gt;util&lt;/code&gt;  branch when cloning the repo.&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Onbranch util&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Your branch is up to date with &amp;#x27;origin/util&amp;#x27;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nothing to commit, working tree clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;The xv6-labs-2022 repository differs slightly from the book’s xv6-riscv; it mostly adds some files. If you are curious look at the git log:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;The files you will need for this and subsequent lab assignments are distributed using the Git version control system. For each of the labs you will checkout (git checkout util) a version of xv6 tailored for that lab. To learn more about Git, take a look at the Git user’s manual, or, you may find this CS-oriented overview of Git useful. Git allows you to keep track of the changes you make to the code. For example, if you are finished with one of the exercises, and want to checkpoint your progress, you can commit your changes by running:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git commit -am &lt;span class=&#34;string&#34;&gt;&amp;#x27;my solution for util lab exercise 1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Create commit 60d2135: my solution for util lab exercise 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    1 file changed, 1 insertions(+), 0 deletions(-)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;You can keep track of your changes by using the  &lt;code&gt;git diff&lt;/code&gt;  command. Running  &lt;code&gt;git diff&lt;/code&gt;  will display the changes to your code since your last commit, and  &lt;code&gt;git diff origin/util&lt;/code&gt;  will display the changes relative to the initial util code. Here, origin/util is the name of the git branch with the initial code you downloaded for the class.&lt;br&gt;Build and run xv6:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;make qemu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;If you type  &lt;code&gt;ls&lt;/code&gt;  at the prompt, you should see output similar to the following:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;These are the files that  &lt;code&gt;mkfs&lt;/code&gt;  includess in the initial file system; most are programs you can run. You just ran one of them:ls.&lt;br&gt;xv6 has no  &lt;code&gt;ps&lt;/code&gt;  command, but, if you type &lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;p&lt;/kbd&gt;, the kernel will print information about each process. If you try it now, you’ll see two lines: one for  &lt;code&gt;init&lt;/code&gt; , and one for  &lt;code&gt;sh&lt;/code&gt; .&lt;br&gt;To quit qemu type: &lt;kbd&gt;Ctrl&lt;/kbd&gt;-&lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;x&lt;/kbd&gt; (press &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;a&lt;/kbd&gt; at the same time, followed by &lt;kbd&gt;x&lt;/kbd&gt;).&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;h4 id=&#34;grading-and-hand-in-procedure&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#grading-and-hand-in-procedure&#34;&gt;#&lt;/a&gt; Grading and hand-in procedure&lt;/h4&gt;&lt;p&gt;You can run  &lt;code&gt;make grade&lt;/code&gt;  to test your solutions with the grading program. The TAs will use the same grading program to assign your lab submission a grade. Separately, we will also have check-off meetings for labs(see &lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/2022/general.html#grading&#34;&gt;Grading policy&lt;/a&gt;).&lt;br&gt;The lab code comes with GNU Make rules to make submission easier. After committing your final changes to the lab, type  &lt;code&gt;make handin&lt;/code&gt;  to subtime your lab. For detailed instructions on how to submit see &lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/2022/labs/util.html#submit&#34;&gt;below&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; code &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p&gt;&lt;span class=&#39;p center logo large&#39;&gt;关于实验&lt;/span&gt;&lt;/p&gt;&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;因为阿里云服务器挂载网站并且是 centos 操作系统，虚拟机又会导致我的电脑卡顿，因而我选择了在云服务器利用 docker 容器安装 Ubuntu 完成整个实验。(后续会写 docker 学习文章，一定不鸽，咕咕咕)&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;首先，自己配置好环境哈！&lt;br&gt;然后安装课程所需&lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/2022/tools.html&#34;&gt;软件&lt;/a&gt;&lt;br&gt;我的环境是 Ubuntu 20.04，因此运行命令&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之后你可以按照上面的 note 中提供的 shell 命令去运行！&lt;br&gt;如果你不使用 Athena，请忽略前两条指令；请注意我在部分代码块中加入了预期的运行结果，你可以通过进行 &lt;code&gt;$&lt;/code&gt;  区分。&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lab:xv6-and-unix-utilities-2&#34;&gt;&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; requirement &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;Implement the UNIX program  &lt;code&gt;sleep&lt;/code&gt;  for xv6; your  &lt;code&gt;sleep&lt;/code&gt;  should pause for a user-specified number of ticks. A tick is a notion of time defined dy the xv6 hernel, namely the time between two interrupts from the timer chip. Your solution should be in the file  &lt;code&gt;user/sleep.c&lt;/code&gt; .&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;Some hints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Before you start coding, read Chapter 1 of the &lt;a href=&#34;&#34;&gt;xv6 book&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Look at some of the other programs in  &lt;code&gt;user/&lt;/code&gt; (e.g.,  &lt;code&gt;user/echo.c&lt;/code&gt; ,  &lt;code&gt;user/grep.c&lt;/code&gt; ,and  &lt;code&gt;user/rm.c&lt;/code&gt; ) to see how you can obtain the command-line arguments passed to a proggram.&lt;/li&gt;&lt;li&gt;If the user forgets to pass an argument, sleep should print an error message.&lt;/li&gt;&lt;li&gt;Use the system call  &lt;code&gt;sleep&lt;/code&gt; .&lt;/li&gt;&lt;li&gt;See  &lt;code&gt;kernel/sysproc.c&lt;/code&gt;  for the xv6 kernel code that implements the  &lt;code&gt;sleep&lt;/code&gt;  system call (look for  &lt;code&gt;sys_sleep&lt;/code&gt; ),  &lt;code&gt;user/user.h&lt;/code&gt;  for the C definition of  &lt;code&gt;sleep&lt;/code&gt;  callable from a user program, and  &lt;code&gt;user/usys.s&lt;/code&gt;  for the assembler code that jumps from user code into the kernel for  &lt;code&gt;sleep&lt;/code&gt; .&lt;/li&gt;&lt;li&gt;&lt;code&gt;main&lt;/code&gt;  should call  &lt;code&gt;exit(0)&lt;/code&gt;  when it is done.&lt;/li&gt;&lt;li&gt;Add your  &lt;code&gt;sleep&lt;/code&gt;  program to  &lt;code&gt;UPROGS&lt;/code&gt;  in Makefile; once you’ve done that,  &lt;code&gt;make qemu&lt;/code&gt;  will compile your program and you’ll be able to run it from the xv6 shell.&lt;/li&gt;&lt;li&gt;Look at Kernighan and Ritchie’s book &lt;span class=&#39;p green&#39;&gt;The C programming language (second edition)&lt;/span&gt;(K&amp;amp;R) to learn about C.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Run the program from the xv6 shell:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;make qemu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;init: starting sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;sleep&lt;/span&gt; 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(nothing happens for a little while)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Your solution is correct if your program pauses when run as shown above. Run  &lt;code&gt;make grade&lt;/code&gt;  to see if you indeed pass the sleep tests.&lt;br&gt;Note that  &lt;code&gt;make grade&lt;/code&gt;  runs all tests, including the ones for the assignments below. If you want to run the grade tests for one assignment, type:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;./grade-lab-util &lt;span class=&#34;built_in&#34;&gt;sleep&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;This will run the grade tests that match “sleep”. Or, you can type:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;make GRADEFLAGS=&lt;span class=&#34;built_in&#34;&gt;sleep&lt;/span&gt; grade&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;which does the same.&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; code &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(argc != &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;must only 1 argument for sleep\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sleeptime = atoi(argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;nothing happens for %d seconds\n&amp;quot;&lt;/span&gt;, sleeptime);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sleep(sleeptime);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lab:xv6-and-unix-utilities-3&#34;&gt;&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; requirement &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;Write a program that uses UNIX system calls to “ping-pong” abyte between two processes over a pair of pipes, one for each direction. The parent should send a byte to the child; the child should print “&lt;pid&gt;:received ping”, where &lt;pid&gt; is its process ID, write the byte on the pipe to the parent, and exit; the parent should read the byte from the child, print “&lt;pid&gt;:received pong”, and exit. Your solution should be in the file  &lt;code&gt;user/pingpong.c&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;Some hints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use  &lt;code&gt;pipe&lt;/code&gt;  to create a pipe.&lt;/li&gt;&lt;li&gt;Use  &lt;code&gt;fork&lt;/code&gt;  to create a child.&lt;/li&gt;&lt;li&gt;Use  &lt;code&gt;read&lt;/code&gt;  to from a pipe, and  &lt;code&gt;write&lt;/code&gt;  to a pipe.&lt;/li&gt;&lt;li&gt;Use  &lt;code&gt;getpid&lt;/code&gt;  to find the process ID of the calling process.&lt;/li&gt;&lt;li&gt;Add the program to `UPROGS’ in Makefile.&lt;/li&gt;&lt;li&gt;User programs on xv6 have a limited set of library functions available to them. You can see the list in  &lt;code&gt;user/user.h&lt;/code&gt; ; the source (other than for system calls) is in  &lt;code&gt;user/ulib.c, user/printf.c,&lt;/code&gt;  and  &lt;code&gt;user/umalloc.c&lt;/code&gt; .&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Run the program from the xv6 shell and it should produce the following output:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;make qemu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;init: starting sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;pingpong&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4: received ping&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: received pong&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Your solution is correct if your program exchanges a byte between two processes and produces output as shown above.&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; code &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;首先，很明显，我们需要两条管道传递信息。&lt;br&gt;对于管道传参  &lt;code&gt;int pipefd[2]&lt;/code&gt; ， &lt;code&gt;pipefd[0]&lt;/code&gt;  为管道读端， &lt;code&gt;pipefd[1]&lt;/code&gt;  为管道写端。&lt;br&gt;而且读取成功的情况下， &lt;code&gt;pipe&lt;/code&gt;  函数会返回读取到的字节数。&lt;br&gt;记得使用 &lt;code&gt;fork&lt;/code&gt;  创建子进程，以及使用 &lt;code&gt;read, write, close&lt;/code&gt;  对管道进行操作。&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;                                 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fd1[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],fd2[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buffer[] = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;X&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pipe(fd1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pipe(fd2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fork() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        close(fd1[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        close(fd2[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(read(fd1[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], buffer, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) != &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a--&amp;gt;b read error!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d: received ping\n&amp;quot;&lt;/span&gt;, getpid());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(write(fd2[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], buffer, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) != &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b--&amp;gt;a write error!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        close(fd1[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        close(fd2[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(write(fd1[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], buffer, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) != &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a--&amp;gt;b write error!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(read(fd2[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], buffer, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) != &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buffer)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b--&amp;gt;a read error!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d: received pong\n&amp;quot;&lt;/span&gt;, getpid());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wait(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lab:xv6-and-unix-utilities-4&#34;&gt;&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; requirement &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;Write a concurrent version of prime sieve using pipes. This idea is due to Doug Mcllroy, inventor of Unix pipes. The picture halfway down &lt;a href=&#34;http://swtch.com/~rsc/thread/&#34;&gt;this page&lt;/a&gt; and the surrounding text explain how to do it. Your solution should be in the file  &lt;code&gt;user/primes.c&lt;/code&gt; .&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;Your goal is to use  &lt;code&gt;pipe&lt;/code&gt;  and  &lt;code&gt;fork&lt;/code&gt;  to set up the pipeline. The first process feeds the numbers 2 through 35 into the pipeline. For each prime number, you will arrange to create one process that reads from its left neighbor over a pipe and writes to its right neighbor over another pipe. Since xv6 has limited number of file descriptors and processes, the first process can stop at 35.&lt;br&gt;Some hints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Be careful to close file descriptors that a process doesn’t need, because otherwise your program will run xv6 out of resources before the first process reaches 35.&lt;/li&gt;&lt;li&gt;Once the first process reaches 35, it should wait until the entire pipeline terminates, including all children, grandchildren, &amp;amp;c. Thus the main primes process should only exit after all the output has been printed, and after all the other primes processes have exited.&lt;/li&gt;&lt;li&gt;Hint:  &lt;code&gt;read&lt;/code&gt;  returns zero when the write-side of a pipe is closed.&lt;/li&gt;&lt;li&gt;It’s simplest to directly write 32-bit (4-byte)  &lt;code&gt;int&lt;/code&gt; s to the pipes, rather than using formatted  &lt;code&gt;ASCII I/O&lt;/code&gt; .&lt;/li&gt;&lt;li&gt;You should create the processes in the pipeline only as they are needed.&lt;/li&gt;&lt;li&gt;Add the program to  &lt;code&gt;UPROGS&lt;/code&gt;  in Makefile.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Your solution is correct if it implements a pipe-based sieve and produces the following output:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;make qemu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;primes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; code &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;这个实验的关键是利用 &lt;code&gt;pipe&lt;/code&gt;  和 &lt;code&gt;fork&lt;/code&gt; ，详细思想请看上个 &lt;code&gt;note&lt;/code&gt;  给出的链接。&lt;br&gt;主要思想就是保证管道头部的数字为素数并删除在管道中是该数字倍数的数，其余的数写入下一个管道，如此反复。&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;* input, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(num == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; prime = *input;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;prime %d\n&amp;quot;&lt;/span&gt;, input);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pipe(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fork() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; num; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp = *(input+i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            write(p[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;*)(&amp;amp;temp), &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    close(p[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fork() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; counter = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buffer[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(read(p[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], buffer, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp = *((&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;*)buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(temp % prime != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                *input = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                input += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                counter++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func(input - counter, counter);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wait(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wait(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; input[&lt;span class=&#34;number&#34;&gt;34&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;( ; i &amp;lt; &lt;span class=&#34;number&#34;&gt;34&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        input[i] = i + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    func(input, &lt;span class=&#34;number&#34;&gt;34&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lab:xv6-and-unix-utilities-5&#34;&gt;&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; requirement &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;Write a simple version of the UNIX find program: find all the files in a directory tree with a specific name. Your solution should be in the file  &lt;code&gt;user/find.c&lt;/code&gt; .&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;Some hints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Look at  &lt;code&gt;user/ls.c&lt;/code&gt;  to see how to read directories.&lt;/li&gt;&lt;li&gt;Use recursion to allow find to descend into sub-directories.&lt;/li&gt;&lt;li&gt;Don’t recurse into “.” and “…”.&lt;/li&gt;&lt;li&gt;Changes to the file system persist across runs of qemu; to get a clean file system run  &lt;code&gt;make clean&lt;/code&gt;  and then  &lt;code&gt;make qemu&lt;/code&gt; .&lt;/li&gt;&lt;li&gt;You’ll need to use C strings. Have a look at K&amp;amp;R (the C book), for example Section 5.5.&lt;/li&gt;&lt;li&gt;Note that == does not compare strings like in Python. Use strcmp() instead.&lt;/li&gt;&lt;li&gt;Add the program to  &lt;code&gt;UPROGS&lt;/code&gt;  in Makefile.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Your solution is correct if produces the following output (when the file system contains the files  &lt;code&gt;b, a/b&lt;/code&gt;  and  &lt;code&gt;a/aa/b&lt;/code&gt; ):&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;make qemu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &amp;gt; b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;mkdir&lt;/span&gt; a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &amp;gt; a/b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;mkdir&lt;/span&gt; a/aa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &amp;gt; a/aa/b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;find . b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; code &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;根据提示，我们可以根据 &lt;code&gt;ls.c&lt;/code&gt;  文件编写 &lt;code&gt;find.c&lt;/code&gt;  文件。&lt;br&gt;find 和 ls 的异同&lt;/p&gt;&lt;ul&gt;&lt;li&gt;find 需要找到指定目录中所有文件名为 filename 的文件，并打印路径 + 文件名&lt;/li&gt;&lt;li&gt;ls 打印出指定目录中的所有目录项&lt;/li&gt;&lt;li&gt;都需要输入 &lt;code&gt;path&lt;/code&gt;  参数&lt;/li&gt;&lt;li&gt;都需要判断 &lt;code&gt;path&lt;/code&gt;  参数所指向的文件类型&lt;/li&gt;&lt;li&gt;都需要遍历目录项并读取目录项的名字&lt;/li&gt;&lt;li&gt;find 还需要给定 &lt;code&gt;filename&lt;/code&gt;  参数&lt;/li&gt;&lt;li&gt;find 需要递归遍历指定目录中的所有子目录&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此，我们实现 find 需要在 ls 的基础上添加递归遍历子目录并查找指定文件名的操作，同时需要忽略掉 &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;..&lt;/code&gt; ，防止重复递归。&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;                                 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/stat.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/fs.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* &lt;span class=&#34;title function_&#34;&gt;fmtname&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *path)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[DIRSIZ + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(p = path + &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(path); p &amp;gt;= path &amp;amp;&amp;amp; *p != &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;; p--);            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p++;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    memmove(buf, p, &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(p) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;eq_print&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *fileName, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *findName)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(fmtname(fileName), findName) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *path, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* name)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;], *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirent&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;de&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;st&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((fd = open(path, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;find: connot open %s\n&amp;quot;&lt;/span&gt;, path);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fstat(fd, &amp;amp;st) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;find: connot stat %s\n&amp;quot;&lt;/span&gt;, path);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        close(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(st.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; T_FILE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        eq_print(path, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; T_DIR:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(path) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; + DIRSIZ +&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;gt; &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;find: path too long\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(buf, path);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p = buf + &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        *p++ = &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(read(fd, &amp;amp;de, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(de)) == &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(de)) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(de.inum == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || de.inum == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; || &lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(de.name, &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || &lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(de.name, &lt;span class=&#34;string&#34;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            memmove(p, de.name, &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(de.name));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            p[&lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(de.name)] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            find(buf, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    close(fd);   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(argc != &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;please input: find &amp;lt;path&amp;gt; &amp;lt;fileName&amp;gt;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    find(argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], argv[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lab:xv6-and-unix-utilities-6&#34;&gt;&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; requirement &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-bullhorn&#34;&gt;&lt;/i&gt;&lt;p&gt;Write a simple version of the UNIX xargs program: its arguments describe a command to run, it reads lines from the standard input, and it runs the command for each line, appending the line to the command’s arguments. Your solution should be in the file  &lt;code&gt;user/xargs.c&lt;/code&gt; .&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;The following example illustrates xarg’s behavior:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; hello too | xargs &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bye&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bye hello too&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Note that the command here is “echo bye” and the additional arguments are “hello too”, making the command “echo bye hello too”, which outputs “bye hello too”.&lt;br&gt;Please note that xargs on UNIX makes an optimization where it will feed more than argument to the command at a time.&lt;br&gt;We don’t expect you to make this optimization. To make xargs on UNIX behave the way we want it to for this lab, please run it with the -n option set to 1. For instance&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;(&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; 1 : &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; 2) | xargs -n 1 &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Some hints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use  &lt;code&gt;fork&lt;/code&gt;  and  &lt;code&gt;exec&lt;/code&gt;  to invoke the command on each line of input. Use  &lt;code&gt;wait&lt;/code&gt;  in the parent to wait for the child to complete the command.&lt;/li&gt;&lt;li&gt;To read individual lines of input, read a character at a time until a newline (’\n’) appears.&lt;/li&gt;&lt;li&gt;lernel/param.h declars MAXARG, which may be useful if you need to declare an argv array.&lt;/li&gt;&lt;li&gt;Add the program to  &lt;code&gt;UPROGS&lt;/code&gt;  in Makefile.&lt;/li&gt;&lt;li&gt;Changes to the file system persist across runs of qemu; to get a clean file system run make clean and then make qemu.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;xargs, find, and grep combine well:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;find . b | xargs grep hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;will run “grep hello” on each file named b in the directories below “.”.&lt;br&gt;To test your solution for xargs, run the shell script &lt;a href=&#34;http://xargstest.sh&#34;&gt;xargstest.sh&lt;/a&gt;. Your solution is correct if it produces the following output:&lt;/p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;make qemu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;init: starting sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;sh &amp;lt; xargstest.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;$ $ $ $ $ hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;You may have to go back and fix bugs in your find program. The output has many $ because the xv6 shell doesn’t realize it is processing commands from a file instead of from the console, and prints a $ for each command in the file.&lt;/p&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; code &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&#34;note success simple&#34;&gt;&lt;p&gt;&lt;code&gt;xargs&lt;/code&gt;  命令是一种管道命令， &lt;code&gt;|&lt;/code&gt;  即为管道，他会将管道前面的命令的输出作为后面命令的标准输入。&lt;/p&gt;&lt;/div&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;                                 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/stat.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kernel/param.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* exec_argv[MAXARG], buf[&lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, idx = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i =&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; argc; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        exec_argv[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = argv[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        idx = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;((len = read(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, buf + idx, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;))) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(buf[idx] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                buf[idx] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ++idx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(len == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; idx == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        exec_argv[argc - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fork() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            exec(exec_argv[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], exec_argv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            wait(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&#34;tab-item-content&#34; id=&#34;lab:xv6-and-unix-utilities-7&#34;&gt;&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; requirement &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;ul&gt;&lt;li&gt;Write an uptime program that prints the uptime in terms of ticks using the  &lt;code&gt;uptime&lt;/code&gt;  system call.(easy)&lt;/li&gt;&lt;li&gt;Support regular expressions in name matching for  &lt;code&gt;find. grep.c&lt;/code&gt;  has some primitive support for regular expressions.(easy)&lt;/li&gt;&lt;li&gt;The xv6 shell(user/sh.c) is just another user program and you can improve it. It is a minimal shell and lacks many features found in real shell. For example, modify the shell to not print a $ when processing shell commands from a file(moderate), modify the shell to support wait(easy), modify the shell to support lists of commands, separated by “;”(moderate), modify the shell to support sub-shells by implementing “(” and “)” (moderate), modify the shell to support tab completion(easy), modify the shell to keep a history of passed shell commands(moderate), or anything else you would like your shell to do.(If you are very ambitious, you may have to modify the kermel to support the kernel features you need; xv6 doesn’t support mach.)&lt;/li&gt;&lt;/ul&gt;
              &lt;/div&gt;
            &lt;/details&gt;&lt;button type=&#34;button&#34; class=&#34;tab-to-top&#34; aria-label=&#34;scroll to top&#34;&gt;&lt;i class=&#34;fas fa-arrow-up&#34;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
        <category term="MIT 6.1810" />
        <category term="操作系统" />
        <updated>2022-10-08T12:22:17.000Z</updated>
    </entry>
</feed>

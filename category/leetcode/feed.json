{
    "version": "https://jsonfeed.org/version/1",
    "title": "潇十七 • All posts by \"leetcode\" category",
    "description": "可生活不是电影，我也少了点运气",
    "home_page_url": "https://x-17.top",
    "items": [
        {
            "id": "https://x-17.top/2022/12/29/2032-%E8%87%B3%E5%B0%91%E5%9C%A8%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E5%80%BC/",
            "url": "https://x-17.top/2022/12/29/2032-%E8%87%B3%E5%B0%91%E5%9C%A8%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E5%80%BC/",
            "title": "2032. 至少在两个数组中出现的值",
            "date_published": "2022-12-29T09:38:29.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"2032-至少在两个数组中出现的值\"><a class=\"markdownIt-Anchor\" href=\"#2032-至少在两个数组中出现的值\">#</a> <a href=\"https://leetcode.cn/problems/two-out-of-three/\">2032. 至少在两个数组中出现的值</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoOutOfThree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums3)</span> </span>&#123;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">        set&lt;<span class=\"type\">int</span>&gt; n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : nums1) &#123;</span><br><span class=\"line\">            m[num] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : nums2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.<span class=\"built_in\">count</span>(num) &amp;&amp; m[num] == <span class=\"number\">1</span>) n.<span class=\"built_in\">insert</span>(num);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> m[num] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : nums3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.<span class=\"built_in\">count</span>(num)) n.<span class=\"built_in\">insert</span>(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vector&lt;<span class=\"type\">int</span>&gt; &#123;n.<span class=\"built_in\">begin</span>(), n.<span class=\"built_in\">end</span>()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/28/LeetCode/1750-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%A4%E7%AB%AF%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E9%95%BF%E5%BA%A6/",
            "url": "https://x-17.top/2022/12/28/LeetCode/1750-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%A4%E7%AB%AF%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E9%95%BF%E5%BA%A6/",
            "title": "1750. 删除字符串两端相同字符后的最短长度",
            "date_published": "2022-12-28T09:12:46.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1750-删除字符串两端相同字符后的最短长度\"><a class=\"markdownIt-Anchor\" href=\"#1750-删除字符串两端相同字符后的最短长度\">#</a> <a href=\"https://leetcode.cn/problems/minimum-length-of-string-after-deleting-similar-ends/description/\">1750. 删除字符串两端相同字符后的最短长度</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minimumLength</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; s[left] == s[right]) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c = s[left];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; s[left] == c) &#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; s[right] == c) &#123;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/27/LeetCode/2027-%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/",
            "url": "https://x-17.top/2022/12/27/LeetCode/2027-%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/",
            "title": "2027. 转换字符串的最少操作次数",
            "date_published": "2022-12-27T09:20:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minimumMoves</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;X&#x27;</span>) &#123;</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">                num++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (flag != <span class=\"number\">0</span>) num++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                num = <span class=\"number\">0</span>;</span><br><span class=\"line\">                flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num != <span class=\"number\">0</span>) ans++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/26/LeetCode/1759-%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%9E%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE/",
            "url": "https://x-17.top/2022/12/26/LeetCode/1759-%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%9E%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE/",
            "title": "1759. 统计同构子字符串的数目",
            "date_published": "2022-12-26T08:59:06.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1759-统计同构子字符串的数目\"><a class=\"markdownIt-Anchor\" href=\"#1759-统计同构子字符串的数目\">#</a> <a href=\"https://leetcode.cn/problems/count-number-of-homogenous-substrings/description/\">1759. 统计同构子字符串的数目</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countHomogenous</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] != s[left]) &#123;</span><br><span class=\"line\">                ans += (i - left) * (i - left + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                ans %= MOD;</span><br><span class=\"line\">                left = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += (s.<span class=\"built_in\">length</span>() - left) * (s.<span class=\"built_in\">length</span>() + <span class=\"number\">1</span> - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans % MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/25/LeetCode/1739-%E6%94%BE%E7%BD%AE%E7%9B%92%E5%AD%90/",
            "url": "https://x-17.top/2022/12/25/LeetCode/1739-%E6%94%BE%E7%BD%AE%E7%9B%92%E5%AD%90/",
            "title": "1739. 放置盒子",
            "date_published": "2022-12-25T10:03:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1739-放置盒子\"><a class=\"markdownIt-Anchor\" href=\"#1739-放置盒子\">#</a> <a href=\"https://leetcode.cn/problems/building-boxes/description/\">1739. 放置盒子</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minimumBoxes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = <span class=\"number\">1</span>, i = <span class=\"number\">1</span>, j = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; cur) &#123;</span><br><span class=\"line\">            n -= cur;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            cur += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; cur) &#123;</span><br><span class=\"line\">            n -= cur;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            cur++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (i - <span class=\"number\">1</span>) * i / <span class=\"number\">2</span> + j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/24/LeetCode/1754-%E6%9E%84%E9%80%A0%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%A4%A7%E7%9A%84%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://x-17.top/2022/12/24/LeetCode/1754-%E6%9E%84%E9%80%A0%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%A4%A7%E7%9A%84%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "1754. 构造字典序最大的合并字符串",
            "date_published": "2022-12-24T12:07:51.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1754-构造字典序最大的合并字符串\"><a class=\"markdownIt-Anchor\" href=\"#1754-构造字典序最大的合并字符串\">#</a> <a href=\"https://leetcode.cn/problems/largest-merge-of-two-strings/description/\">1754. 构造字典序最大的合并字符串</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">largestMerge</span><span class=\"params\">(string word1, string word2)</span> </span>&#123;</span><br><span class=\"line\">        string merge;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; word1.<span class=\"built_in\">size</span>() || j &lt; word2.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; word1.<span class=\"built_in\">size</span>() &amp;&amp; word1.<span class=\"built_in\">substr</span>(i) &gt; word2.<span class=\"built_in\">substr</span>(j)) &#123;</span><br><span class=\"line\">                merge.<span class=\"built_in\">push_back</span>(word1[i++]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                merge.<span class=\"built_in\">push_back</span>(word2[j++]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/23/LeetCode/2011-%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E5%8F%98%E9%87%8F%E5%80%BC/",
            "url": "https://x-17.top/2022/12/23/LeetCode/2011-%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E5%8F%98%E9%87%8F%E5%80%BC/",
            "title": "2011. 执行操作后的变量值",
            "date_published": "2022-12-23T10:08:31.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"2011-执行操作后的变量值\"><a class=\"markdownIt-Anchor\" href=\"#2011-执行操作后的变量值\">#</a> <a href=\"https://leetcode.cn/problems/final-value-of-variable-after-performing-operations/description/\">2011. 执行操作后的变量值</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">finalValueAfterOperations</span><span class=\"params\">(vector&lt;string&gt;&amp; operations)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> op : operations) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (op == <span class=\"string\">&quot;--X&quot;</span> || op == <span class=\"string\">&quot;X--&quot;</span>) ans--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (op == <span class=\"string\">&quot;++X&quot;</span> || op == <span class=\"string\">&quot;X++&quot;</span>) ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/22/LeetCode/1799-N-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C/",
            "url": "https://x-17.top/2022/12/22/LeetCode/1799-N-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C/",
            "title": "1799. N 次操作后的最大分数和",
            "date_published": "2022-12-22T09:52:38.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1799-n-次操作后的最大分数和\"><a class=\"markdownIt-Anchor\" href=\"#1799-n-次操作后的最大分数和\">#</a> <a href=\"https://leetcode.cn/problems/maximize-score-after-n-operations/description/\">1799. N 次操作后的最大分数和</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxScore</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(<span class=\"number\">1</span> &lt;&lt; m, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">gcd_tmp</span>(m, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m, <span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">                gcd_tmp[i][j] = <span class=\"built_in\">gcd</span>(nums[i], nums[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> all = <span class=\"number\">1</span> &lt;&lt; m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> s = <span class=\"number\">1</span>; s &lt; all; ++s) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = __builtin_popcount(s);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((s &gt;&gt; i) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((s &gt;&gt; j) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            dp[s] = <span class=\"built_in\">max</span>(dp[s], dp[s ^ (<span class=\"number\">1</span> &lt;&lt; i) ^ (<span class=\"number\">1</span> &lt;&lt; j)] + t / <span class=\"number\">2</span> * gcd_tmp[i][j]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[all - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/21/LeetCode/1753-%E7%A7%BB%E9%99%A4%E7%9F%B3%E5%AD%90%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BE%97%E5%88%86/",
            "url": "https://x-17.top/2022/12/21/LeetCode/1753-%E7%A7%BB%E9%99%A4%E7%9F%B3%E5%AD%90%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BE%97%E5%88%86/",
            "title": "1753. 移除石子的最大得分",
            "date_published": "2022-12-21T10:28:50.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1753-移除石子的最大得分\"><a class=\"markdownIt-Anchor\" href=\"#1753-移除石子的最大得分\">#</a> <a href=\"https://leetcode.cn/problems/maximum-score-from-removing-stones/description/\">1753. 移除石子的最大得分</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximumScore</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = a + b + c;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxVal = <span class=\"built_in\">max</span>(&#123;a, b, c&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum - maxVal &lt; maxVal) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum - maxVal;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (1)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/20/LeetCode/1760-%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E7%9B%AE%E7%9A%84%E7%90%83/",
            "url": "https://x-17.top/2022/12/20/LeetCode/1760-%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E7%9B%AE%E7%9A%84%E7%90%83/",
            "title": "1760. 袋子里最少数目的球",
            "date_published": "2022-12-20T10:20:52.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1760-袋子里最少数目的球\"><a class=\"markdownIt-Anchor\" href=\"#1760-袋子里最少数目的球\">#</a> <a href=\"https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag/description/\">1760. 袋子里最少数目的球</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minimumSize</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> maxOperations)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">1</span>, right = *<span class=\"built_in\">max_element</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> y = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> ops = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x: nums) &#123;</span><br><span class=\"line\">                ops += (x - <span class=\"number\">1</span>) / y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ops &lt;= maxOperations) &#123;</span><br><span class=\"line\">                ans = y;</span><br><span class=\"line\">                right = y - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = y + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (nlogC)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/19/LeetCode/1971-%E5%AF%BB%E6%89%BE%E5%9B%BE%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E8%B7%AF%E5%BE%84/",
            "url": "https://x-17.top/2022/12/19/LeetCode/1971-%E5%AF%BB%E6%89%BE%E5%9B%BE%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E8%B7%AF%E5%BE%84/",
            "title": "1971. 寻找图中是否存在路径",
            "date_published": "2022-12-19T10:31:38.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1971-寻找图中是否存在路径\"><a class=\"markdownIt-Anchor\" href=\"#1971-寻找图中是否存在路径\">#</a> <a href=\"https://leetcode.cn/problems/find-if-path-exists-in-graph/description/\">1971. 寻找图中是否存在路径</a></h1>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> source, <span class=\"type\">int</span> destination, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;adj, vector&lt;<span class=\"type\">bool</span>&gt; &amp;visited)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source == destination) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visited[source] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> next : adj[source]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[next] &amp;&amp; <span class=\"built_in\">dfs</span>(next, destination, adj, visited)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">validPath</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; edges, <span class=\"type\">int</span> source, <span class=\"type\">int</span> destination)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">adj</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;edge : edges) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = edge[<span class=\"number\">0</span>], y = edge[<span class=\"number\">1</span>];</span><br><span class=\"line\">            adj[x].<span class=\"built_in\">emplace_back</span>(y);</span><br><span class=\"line\">            adj[y].<span class=\"built_in\">emplace_back</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">visited</span><span class=\"params\">(n, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">dfs</span>(source, destination, adj, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (m+n)$</li>\n<li>空间复杂度：$O (m+n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/18/LeetCode/1703-%E5%BE%97%E5%88%B0%E8%BF%9E%E7%BB%AD-K-%E4%B8%AA-1-%E7%9A%84%E6%9C%80%E5%B0%91%E7%9B%B8%E9%82%BB%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/",
            "url": "https://x-17.top/2022/12/18/LeetCode/1703-%E5%BE%97%E5%88%B0%E8%BF%9E%E7%BB%AD-K-%E4%B8%AA-1-%E7%9A%84%E6%9C%80%E5%B0%91%E7%9B%B8%E9%82%BB%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/",
            "title": "1703. 得到连续 K 个 1 的最少相邻交换次数",
            "date_published": "2022-12-18T09:22:07.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1703-得到连续-k-个-1-的最少相邻交换次数\"><a class=\"markdownIt-Anchor\" href=\"#1703-得到连续-k-个-1-的最少相邻交换次数\">#</a> <a href=\"https://leetcode.cn/problems/minimum-adjacent-swaps-for-k-consecutive-ones/description/\">1703. 得到连续 K 个 1 的最少相邻交换次数</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minMoves</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; g;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">preSum</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                g.<span class=\"built_in\">emplace_back</span>(i - g.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                preSum.<span class=\"built_in\">emplace_back</span>(preSum.<span class=\"built_in\">back</span>() + g.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = g.<span class=\"built_in\">size</span>(), res = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= m - k; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = i + k / <span class=\"number\">2</span>;</span><br><span class=\"line\">            res = <span class=\"built_in\">min</span>(res, (<span class=\"number\">1</span> - k % <span class=\"number\">2</span>) * g[mid] +  \\</span><br><span class=\"line\">                           (preSum[i + k] - preSum[mid + <span class=\"number\">1</span>]) - \\</span><br><span class=\"line\">                           (preSum[mid] - preSum[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/17/LeetCode/1764-%E9%80%9A%E8%BF%87%E8%BF%9E%E6%8E%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84/",
            "url": "https://x-17.top/2022/12/17/LeetCode/1764-%E9%80%9A%E8%BF%87%E8%BF%9E%E6%8E%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84/",
            "title": "1764. 通过连接另一个数组的子数组得到一个数组",
            "date_published": "2022-12-17T10:23:17.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1764-通过连接另一个数组的子数组得到一个数组\"><a class=\"markdownIt-Anchor\" href=\"#1764-通过连接另一个数组的子数组得到一个数组\">#</a> <a href=\"https://leetcode.cn/problems/form-array-by-concatenating-subarrays-of-another-array/description/\">1764. 通过连接另一个数组的子数组得到一个数组</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">canChoose</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; groups, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"number\">0</span>, q= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == groups[p][q]) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; j &lt; groups[p].<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i + j &gt;= nums.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nums[i + j] != groups[p][q + j]) &#123;</span><br><span class=\"line\">                        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                    i += j - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    p++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == groups.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/16/LeetCode/1785-%E6%9E%84%E6%88%90%E7%89%B9%E5%AE%9A%E5%92%8C%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%9C%80%E5%B0%91%E5%85%83%E7%B4%A0/",
            "url": "https://x-17.top/2022/12/16/LeetCode/1785-%E6%9E%84%E6%88%90%E7%89%B9%E5%AE%9A%E5%92%8C%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%9C%80%E5%B0%91%E5%85%83%E7%B4%A0/",
            "title": "1785. 构成特定和需要添加的最少元素",
            "date_published": "2022-12-16T13:02:14.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1785-构成特定和需要添加的最少元素\"><a class=\"markdownIt-Anchor\" href=\"#1785-构成特定和需要添加的最少元素\">#</a> <a href=\"https://leetcode.cn/problems/minimum-elements-to-add-to-form-a-given-sum/description/\">1785. 构成特定和需要添加的最少元素</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minElements</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> limit, <span class=\"type\">int</span> goal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : nums) sum += num;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> del = <span class=\"built_in\">abs</span>(sum - goal);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> del%limit?del/limit + <span class=\"number\">1</span>:del/limit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/15/LeetCode/1945-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E5%90%8E%E7%9A%84%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/",
            "url": "https://x-17.top/2022/12/15/LeetCode/1945-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E5%90%8E%E7%9A%84%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/",
            "title": "1945. 字符串转化后的各位数字之和",
            "date_published": "2022-12-15T08:11:25.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1945-字符串转化后的各位数字之和\"><a class=\"markdownIt-Anchor\" href=\"#1945-字符串转化后的各位数字之和\">#</a> <a href=\"https://leetcode.cn/problems/sum-of-digits-of-string-after-convert/description/\">1945. 字符串转化后的各位数字之和</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getLucky</span><span class=\"params\">(string s, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> str : s) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = str - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (t) &#123;</span><br><span class=\"line\">                ans += t%<span class=\"number\">10</span>;</span><br><span class=\"line\">                t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (ans) &#123;</span><br><span class=\"line\">                t += ans%<span class=\"number\">10</span>;</span><br><span class=\"line\">                ans /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = t;</span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">⋅</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(C·n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/14/LeetCode/1697-%E6%A3%80%E6%9F%A5%E8%BE%B9%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/",
            "url": "https://x-17.top/2022/12/14/LeetCode/1697-%E6%A3%80%E6%9F%A5%E8%BE%B9%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/",
            "title": "1697. 检查边长度限制的路径是否存在",
            "date_published": "2022-12-14T10:35:25.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1697-检查边长度限制的路径是否存在\"><a class=\"markdownIt-Anchor\" href=\"#1697-检查边长度限制的路径是否存在\">#</a> <a href=\"https://leetcode.cn/problems/checking-existence-of-edge-length-limited-paths/description/\">1697. 检查边长度限制的路径是否存在</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 并查集模板，包含路径压缩（参考 findset 函数）以及按秩合并（参考 sz 变量）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UF</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; fa;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; sz;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> comp_cnt;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">UF</span>(<span class=\"type\">int</span> _n): <span class=\"built_in\">n</span>(_n), <span class=\"built_in\">comp_cnt</span>(_n), <span class=\"built_in\">fa</span>(_n), <span class=\"built_in\">sz</span>(_n, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">iota</span>(fa.<span class=\"built_in\">begin</span>(), fa.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findset</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[x] == x ? x : fa[x] = <span class=\"built_in\">findset</span>(fa[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">        y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sz[x] &lt; sz[y]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fa[y] = x;</span><br><span class=\"line\">        sz[x] += sz[y];</span><br><span class=\"line\">        --comp_cnt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">        y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">distanceLimitedPathsExist</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; edgeList, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将 queries 按照边权限制从小到大排序</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">qid</span><span class=\"params\">(queries.size())</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">iota</span>(qid.<span class=\"built_in\">begin</span>(), qid.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(qid.<span class=\"built_in\">begin</span>(), qid.<span class=\"built_in\">end</span>(), [&amp;](<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queries[i][<span class=\"number\">2</span>] &lt; queries[j][<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 将 edgeList 按照边权从小到大排序</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(edgeList.<span class=\"built_in\">begin</span>(), edgeList.<span class=\"built_in\">end</span>(), [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; e1, <span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; e2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e1[<span class=\"number\">2</span>] &lt; e2[<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 并查集</span></span><br><span class=\"line\">        <span class=\"function\">UF <span class=\"title\">uf</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(queries.size())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> query: qid) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 往并查集中添加边直到边权关系 dis_i &lt; limit_j 不满足</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; edgeList.<span class=\"built_in\">size</span>() &amp;&amp; edgeList[i][<span class=\"number\">2</span>] &lt; queries[query][<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">                uf.<span class=\"built_in\">unite</span>(edgeList[i][<span class=\"number\">0</span>], edgeList[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 使用并查集判断连通性</span></span><br><span class=\"line\">            ans[query] = uf.<span class=\"built_in\">connected</span>(queries[query][<span class=\"number\">0</span>], queries[query][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo>+</mo><mi>q</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(mlogm+qlogq)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo>+</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+logm+q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/13/LeetCode/1832-%E5%88%A4%E6%96%AD%E5%8F%A5%E5%AD%90%E6%98%AF%E5%90%A6%E4%B8%BA%E5%85%A8%E5%AD%97%E6%AF%8D%E5%8F%A5/",
            "url": "https://x-17.top/2022/12/13/LeetCode/1832-%E5%88%A4%E6%96%AD%E5%8F%A5%E5%AD%90%E6%98%AF%E5%90%A6%E4%B8%BA%E5%85%A8%E5%AD%97%E6%AF%8D%E5%8F%A5/",
            "title": "1832. 判断句子是否为全字母句",
            "date_published": "2022-12-13T09:01:37.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1832-判断句子是否为全字母句\"><a class=\"markdownIt-Anchor\" href=\"#1832-判断句子是否为全字母句\">#</a> <a href=\"https://leetcode.cn/problems/check-if-the-sentence-is-pangram/description/\">1832. 判断句子是否为全字母句</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">checkIfPangram</span><span class=\"params\">(string sentence)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">char</span>&gt; set;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> s : sentence) set.<span class=\"built_in\">insert</span>(s);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set.<span class=\"built_in\">size</span>() == <span class=\"number\">26</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O©$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/12/LeetCode/1781-%E6%89%80%E6%9C%89%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BE%8E%E4%B8%BD%E5%80%BC%E4%B9%8B%E5%92%8C/",
            "url": "https://x-17.top/2022/12/12/LeetCode/1781-%E6%89%80%E6%9C%89%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BE%8E%E4%B8%BD%E5%80%BC%E4%B9%8B%E5%92%8C/",
            "title": "1781. 所有子字符串美丽值之和",
            "date_published": "2022-12-12T11:27:04.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1781-所有子字符串美丽值之和\"><a class=\"markdownIt-Anchor\" href=\"#1781-所有子字符串美丽值之和\">#</a> <a href=\"https://leetcode.cn/problems/sum-of-beauty-of-all-substrings/description/\">1781. 所有子字符串美丽值之和</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">beautySum</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt</span><span class=\"params\">(<span class=\"number\">26</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> maxFreq = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; s.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                cnt[s[j] - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">                maxFreq = <span class=\"built_in\">max</span>(maxFreq, cnt[s[j] - <span class=\"string\">&#x27;a&#x27;</span>]); </span><br><span class=\"line\">                <span class=\"type\">int</span> minFreq = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">26</span>; k++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cnt[k] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        minFreq = <span class=\"built_in\">min</span>(minFreq, cnt[k]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res += maxFreq - minFreq;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (C*n^2)$</li>\n<li>空间复杂度：$O©$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Madium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/11/LeetCode/1827-%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E4%BD%BF%E6%95%B0%E7%BB%84%E9%80%92%E5%A2%9E/",
            "url": "https://x-17.top/2022/12/11/LeetCode/1827-%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E4%BD%BF%E6%95%B0%E7%BB%84%E9%80%92%E5%A2%9E/",
            "title": "1827. 最少操作使数组递增",
            "date_published": "2022-12-11T10:10:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1827-最少操作使数组递增\"><a class=\"markdownIt-Anchor\" href=\"#1827-最少操作使数组递增\">#</a> <a href=\"https://leetcode.cn/problems/minimum-operations-to-make-the-array-increasing/description/\">1827. 最少操作使数组递增</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minOperations</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            ans += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, nums[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span> - nums[i]);</span><br><span class=\"line\">            nums[i] = <span class=\"built_in\">max</span>(nums[i], nums[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/10/LeetCode/1691-%E5%A0%86%E5%8F%A0%E9%95%BF%E6%96%B9%E4%BD%93%E7%9A%84%E6%9C%80%E5%A4%A7%E9%AB%98%E5%BA%A6/",
            "url": "https://x-17.top/2022/12/10/LeetCode/1691-%E5%A0%86%E5%8F%A0%E9%95%BF%E6%96%B9%E4%BD%93%E7%9A%84%E6%9C%80%E5%A4%A7%E9%AB%98%E5%BA%A6/",
            "title": "1691. 堆叠长方体的最大高度",
            "date_published": "2022-12-10T07:18:37.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1691-堆叠长方体的最大高度\"><a class=\"markdownIt-Anchor\" href=\"#1691-堆叠长方体的最大高度\">#</a> <a href=\"https://leetcode.cn/problems/maximum-height-by-stacking-cuboids/description/\">1691. 堆叠长方体的最大高度</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxHeight</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; cuboids)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = cuboids.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp; v : cuboids) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(cuboids.<span class=\"built_in\">begin</span>(), cuboids.<span class=\"built_in\">end</span>(), [](<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp; a,<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp; b) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">0</span>] + a[<span class=\"number\">1</span>] + a[<span class=\"number\">2</span>] &lt; b[<span class=\"number\">0</span>] + b[<span class=\"number\">1</span>] + b[<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            dp[i] = cuboids[i][<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cuboids[i][<span class=\"number\">0</span>] &gt;= cuboids[j][<span class=\"number\">0</span>] &amp;&amp; </span><br><span class=\"line\">                    cuboids[i][<span class=\"number\">1</span>] &gt;= cuboids[j][<span class=\"number\">1</span>] &amp;&amp; </span><br><span class=\"line\">                    cuboids[i][<span class=\"number\">2</span>] &gt;= cuboids[j][<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"built_in\">max</span>(dp[i], dp[j] + cuboids[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n^2)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/09/LeetCode/1780-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%A1%A8%E7%A4%BA%E6%88%90%E4%B8%89%E7%9A%84%E5%B9%82%E7%9A%84%E5%92%8C/",
            "url": "https://x-17.top/2022/12/09/LeetCode/1780-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%A1%A8%E7%A4%BA%E6%88%90%E4%B8%89%E7%9A%84%E5%B9%82%E7%9A%84%E5%92%8C/",
            "title": "1780. 判断一个数字是否可以表示成三的幂的和",
            "date_published": "2022-12-09T09:16:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1780-判断一个数字是否可以表示成三的幂的和\"><a class=\"markdownIt-Anchor\" href=\"#1780-判断一个数字是否可以表示成三的幂的和\">#</a> <a href=\"https://leetcode.cn/problems/check-if-number-is-a-sum-of-powers-of-three/description/\">1780. 判断一个数字是否可以表示成三的幂的和</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">checkPowersOfThree</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag = <span class=\"number\">16</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = flag - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">pow</span>(<span class=\"number\">3</span>, i) &lt;= n) &#123;</span><br><span class=\"line\">                    n -= <span class=\"built_in\">pow</span>(<span class=\"number\">3</span>, i);</span><br><span class=\"line\">                    flag = i;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/08/LeetCode/1812-%E5%88%A4%E6%96%AD%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B%E6%A3%8B%E7%9B%98%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%A0%BC%E5%AD%90%E7%9A%84%E9%A2%9C%E8%89%B2/",
            "url": "https://x-17.top/2022/12/08/LeetCode/1812-%E5%88%A4%E6%96%AD%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B%E6%A3%8B%E7%9B%98%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%A0%BC%E5%AD%90%E7%9A%84%E9%A2%9C%E8%89%B2/",
            "title": "1812. 判断国际象棋棋盘中一个格子的颜色",
            "date_published": "2022-12-08T09:18:08.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1812-判断国际象棋棋盘中一个格子的颜色\"><a class=\"markdownIt-Anchor\" href=\"#1812-判断国际象棋棋盘中一个格子的颜色\">#</a> <a href=\"https://leetcode.cn/problems/determine-color-of-a-chessboard-square/description/\">1812. 判断国际象棋棋盘中一个格子的颜色</a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">squareIsWhite</span><span class=\"params\">(string c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (c[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;a&#x27;</span> + c[<span class=\"number\">1</span>] - <span class=\"string\">&#x27;1&#x27;</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (1)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/07/LeetCode/1775-%E9%80%9A%E8%BF%87%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C%E7%9B%B8%E7%AD%89/",
            "url": "https://x-17.top/2022/12/07/LeetCode/1775-%E9%80%9A%E8%BF%87%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C%E7%9B%B8%E7%AD%89/",
            "title": "1775. 通过最少操作次数使数组的和相等",
            "date_published": "2022-12-07T09:23:13.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1775-通过最少操作次数使数组的和相等\"><a class=\"markdownIt-Anchor\" href=\"#1775-通过最少操作次数使数组的和相等\">#</a> <a href=\"https://leetcode.cn/problems/equal-sum-arrays-with-minimum-number-of-operations/description/\">1775. 通过最少操作次数使数组的和相等</a></h1>\n<p>给你两个长度可能不等的整数数组 nums1 和 nums2 。两个数组中的所有值都在 1 到 6 之间（包含 1 和 6）。</p>\n<p>每次操作中，你可以选择 任意 数组中的任意一个整数，将它变成 1 到 6 之间 任意 的值（包含 1 和 6）。</p>\n<p>请你返回使 nums1 中所有数的和与 nums2 中所有数的和相等的最少操作次数。如果无法使两个数组的和相等，请返回 -1 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：你可以通过 3 次操作使 nums1 中所有数的和与 nums2 中所有数的和相等。以下数组下标都从 0 开始。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 将 nums2[0] 变为 6 。 nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2] 。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 将 nums1[5] 变为 1 。 nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2] 。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 将 nums1[2] 变为 2 。 nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2] 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,1,1,1,1,1,1], nums2 = [6]</span><br><span class=\"line\">输出：-1</span><br><span class=\"line\">解释：没有办法减少 nums1 的和或者增加 nums2 的和使二者相等。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [6,6], nums2 = [1]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：你可以通过 3 次操作使 nums1 中所有数的和与 nums2 中所有数的和相等。以下数组下标都从 0 开始。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 将 nums1[0] 变为 2 。 nums1 = [2,6], nums2 = [1] 。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 将 nums1[1] 变为 2 。 nums1 = [2,2], nums2 = [1] 。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 将 nums2[0] 变为 4 。 nums1 = [2,2], nums2 = [4] 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums1.length, nums2.length &lt;= $10^5$</li>\n<li>1 &lt;= nums1[i], nums2[i] &lt;= 6</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">help</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; h1, vector&lt;<span class=\"type\">int</span>&gt;&amp; h2, <span class=\"type\">int</span> diff)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">h</span><span class=\"params\">(<span class=\"number\">7</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">7</span>; ++i) &#123;</span><br><span class=\"line\">            h[<span class=\"number\">6</span> - i] += h1[i];</span><br><span class=\"line\">            h[i - <span class=\"number\">1</span>] += h2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">5</span>; i &amp;&amp; diff &gt; <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = <span class=\"built_in\">min</span>((diff + i - <span class=\"number\">1</span>) / i, h[i]);</span><br><span class=\"line\">            res += t;</span><br><span class=\"line\">            diff -= t * i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minOperations</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums1.<span class=\"built_in\">size</span>(), m = nums2.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">6</span> * n &lt; m || <span class=\"number\">6</span> * m &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt1</span><span class=\"params\">(<span class=\"number\">7</span>, <span class=\"number\">0</span>)</span>, <span class=\"title\">cnt2</span><span class=\"params\">(<span class=\"number\">7</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> diff = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; i : nums1) &#123;</span><br><span class=\"line\">            ++cnt1[i];</span><br><span class=\"line\">            diff += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; i : nums2) &#123;</span><br><span class=\"line\">            ++cnt2[i];</span><br><span class=\"line\">            diff -= i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!diff) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (diff &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">help</span>(cnt2, cnt1, diff);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">help</span>(cnt1, cnt2, -diff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n+m)$</li>\n<li>空间复杂度：$O©$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/06/LeetCode/1805-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%95%B4%E6%95%B0%E7%9A%84%E6%95%B0%E7%9B%AE/",
            "url": "https://x-17.top/2022/12/06/LeetCode/1805-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%95%B4%E6%95%B0%E7%9A%84%E6%95%B0%E7%9B%AE/",
            "title": "1805. 字符串中不同整数的数目",
            "date_published": "2022-12-06T10:56:14.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1805-字符串中不同整数的数目\"><a class=\"markdownIt-Anchor\" href=\"#1805-字符串中不同整数的数目\">#</a> <a href=\"https://leetcode.cn/problems/number-of-different-integers-in-a-string/description/\">1805. 字符串中不同整数的数目</a></h1>\n<p>给你一个字符串 word ，该字符串由数字和小写英文字母组成。</p>\n<p>请你用空格替换每个不是数字的字符。例如，“a123bc34d8ef34” 将会变成 &quot;123  34 8  34&quot; 。注意，剩下的这些整数为（相邻彼此至少有一个空格隔开）：“123”、“34”、“8” 和 “34” 。</p>\n<p>返回对 word 完成替换后形成的 不同 整数的数目。</p>\n<p>只有当两个整数的 不含前导零 的十进制表示不同， 才认为这两个整数也不同。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word = &quot;a123bc34d8ef34&quot;</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：不同的整数有 &quot;123&quot;、&quot;34&quot; 和 &quot;8&quot; 。注意，&quot;34&quot; 只计数一次。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word = &quot;leet1234code234&quot;</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word = &quot;a1b01c001&quot;</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：&quot;1&quot;、&quot;01&quot; 和 &quot;001&quot; 视为同一个整数的十进制表示，因为在比较十进制值时会忽略前导零的存在。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= word.length &lt;= 1000</li>\n<li>word 由数字和小写英文字母组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numDifferentIntegers</span><span class=\"params\">(string word)</span> </span>&#123;</span><br><span class=\"line\">        string t = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        unordered_set&lt;string&gt; set;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; word.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (word[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; word[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t == <span class=\"string\">&quot;&quot;</span> || t == <span class=\"string\">&quot;0&quot;</span>) t = word[i];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    t += word[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t != <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">                    set.<span class=\"built_in\">insert</span>(t);</span><br><span class=\"line\">                    t = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"string\">&quot;&quot;</span>) set.<span class=\"built_in\">insert</span>(t);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/05/LeetCode/1687-%E4%BB%8E%E4%BB%93%E5%BA%93%E5%88%B0%E7%A0%81%E5%A4%B4%E8%BF%90%E8%BE%93%E7%AE%B1%E5%AD%90/",
            "url": "https://x-17.top/2022/12/05/LeetCode/1687-%E4%BB%8E%E4%BB%93%E5%BA%93%E5%88%B0%E7%A0%81%E5%A4%B4%E8%BF%90%E8%BE%93%E7%AE%B1%E5%AD%90/",
            "title": "1687. 从仓库到码头运输箱子",
            "date_published": "2022-12-05T10:38:36.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1687-从仓库到码头运输箱子\"><a class=\"markdownIt-Anchor\" href=\"#1687-从仓库到码头运输箱子\">#</a> <a href=\"https://leetcode.cn/problems/delivering-boxes-from-storage-to-ports/description/\">1687. 从仓库到码头运输箱子</a></h1>\n<p>你有一辆货运卡车，你需要用这一辆车把一些箱子从仓库运送到码头。这辆卡车每次运输有 箱子数目的限制 和 总重量的限制 。</p>\n<p>给你一个箱子数组 boxes 和三个整数 portsCount, maxBoxes 和 maxWeight ，其中 boxes [i] = [ports​​i​, weighti] 。</p>\n<ul>\n<li>ports​​i 表示第 i 个箱子需要送达的码头， weightsi 是第 i 个箱子的重量。</li>\n<li>portsCount 是码头的数目。</li>\n<li>maxBoxes 和 maxWeight 分别是卡车每趟运输箱子数目和重量的限制。</li>\n</ul>\n<p>箱子需要按照 数组顺序 运输，同时每次运输需要遵循以下步骤：</p>\n<ul>\n<li>卡车从 boxes 队列中按顺序取出若干个箱子，但不能违反 maxBoxes 和 maxWeight 限制。</li>\n<li>对于在卡车上的箱子，我们需要 按顺序 处理它们，卡车会通过 一趟行程 将最前面的箱子送到目的地码头并卸货。如果卡车已经在对应的码头，那么不需要 额外行程 ，箱子也会立马被卸货。</li>\n<li>卡车上所有箱子都被卸货后，卡车需要 一趟行程 回到仓库，从箱子队列里再取出一些箱子。</li>\n</ul>\n<p>卡车在将所有箱子运输并卸货后，最后必须回到仓库。</p>\n<p>请你返回将所有箱子送到相应码头的 最少行程 次数。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最优策略如下：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车将所有箱子装上车，到达码头 1 ，然后去码头 2 ，然后再回到码头 1 ，最后回到仓库，总共需要 4 趟行程。</span><br><span class=\"line\">所以总行程数为 4 。</span><br><span class=\"line\">注意到第一个和第三个箱子不能同时被卸货，因为箱子需要按顺序处理（也就是第二个箱子需要先被送到码头 2 ，然后才能处理第三个箱子）。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：最优策略如下：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车首先运输第一个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第二、第三、第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第五个箱子，到达码头 3 ，回到仓库，总共 2 趟行程。</span><br><span class=\"line\">总行程数为 2 + 2 + 2 = 6 。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：最优策略如下：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第一和第二个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第三和第四个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第五和第六个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\">总行程数为 2 + 2 + 2 = 6 。</span><br></pre></td></tr></table></figure>\n<p>示例 4：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7</span><br><span class=\"line\">输出：14</span><br><span class=\"line\">解释：最优策略如下：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第一个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第二个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第三和第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第五个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第六和第七个箱子，到达码头 3 ，然后去码头 4 ，然后回到仓库，总共 3 趟行程。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 卡车运输第八和第九个箱子，到达码头 1 ，然后去码头 5 ，然后回到仓库，总共 3 趟行程。</span><br><span class=\"line\">总行程数为 2 + 2 + 2 + 2 + 3 + 3 = 14 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= boxes.length &lt;= $10^5$</li>\n<li>1 &lt;= portsCount, maxBoxes, maxWeight &lt;= $10^5$</li>\n<li>1 &lt;= ports​​i &lt;= portsCount</li>\n<li>1 &lt;= weightsi &lt;= maxWeight</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">boxDelivering</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; boxes, <span class=\"type\">int</span> portsCount, <span class=\"type\">int</span> maxBoxes, <span class=\"type\">int</span> maxWeight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = boxes.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">p</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">w</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">neg</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; <span class=\"title\">W</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            p[i] = boxes[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">            w[i] = boxes[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                neg[i] = neg[i - <span class=\"number\">1</span>] + (p[i - <span class=\"number\">1</span>] != p[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            W[i] = W[i - <span class=\"number\">1</span>] + w[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        deque&lt;<span class=\"type\">int</span>&gt; opt = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">f</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">g</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i - opt.<span class=\"built_in\">front</span>() &gt; maxBoxes || W[i] - W[opt.<span class=\"built_in\">front</span>()] &gt; maxWeight) &#123;</span><br><span class=\"line\">                opt.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            f[i] = g[opt.<span class=\"built_in\">front</span>()] + neg[i] + <span class=\"number\">2</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != n) &#123;</span><br><span class=\"line\">                g[i] = f[i] - neg[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!opt.<span class=\"built_in\">empty</span>() &amp;&amp; g[i] &lt;= g[opt.<span class=\"built_in\">back</span>()]) &#123;</span><br><span class=\"line\">                    opt.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                opt.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/04/LeetCode/1774-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9B%AE%E6%A0%87%E4%BB%B7%E6%A0%BC%E7%9A%84%E7%94%9C%E7%82%B9%E6%88%90%E6%9C%AC/",
            "url": "https://x-17.top/2022/12/04/LeetCode/1774-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9B%AE%E6%A0%87%E4%BB%B7%E6%A0%BC%E7%9A%84%E7%94%9C%E7%82%B9%E6%88%90%E6%9C%AC/",
            "title": "1774. 最接近目标价格的甜点成本",
            "date_published": "2022-12-04T09:10:22.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1774-最接近目标价格的甜点成本\"><a class=\"markdownIt-Anchor\" href=\"#1774-最接近目标价格的甜点成本\">#</a> <a href=\"https://leetcode.cn/problems/closest-dessert-cost/description/\">1774. 最接近目标价格的甜点成本</a></h1>\n<p>你打算做甜点，现在需要购买配料。目前共有 n 种冰激凌基料和 m 种配料可供选购。而制作甜点需要遵循以下几条规则：</p>\n<ul>\n<li>必须选择 一种 冰激凌基料。</li>\n<li>可以添加 一种或多种 配料，也可以不添加任何配料。</li>\n<li>每种类型的配料 最多两份 。</li>\n</ul>\n<p>给你以下三个输入：</p>\n<ul>\n<li>baseCosts ，一个长度为 n 的整数数组，其中每个 baseCosts [i] 表示第 i 种冰激凌基料的价格。</li>\n<li>toppingCosts，一个长度为 m 的整数数组，其中每个 toppingCosts [i] 表示 一份 第 i 种冰激凌配料的价格。</li>\n<li>target ，一个整数，表示你制作甜点的目标价格。<br>\n你希望自己做的甜点总成本尽可能接近目标价格 target 。</li>\n</ul>\n<p>返回最接近 target 的甜点成本。如果有多种方案，返回 成本相对较低 的一种。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：baseCosts = [1,7], toppingCosts = [3,4], target = 10</span><br><span class=\"line\">输出：10</span><br><span class=\"line\">解释：考虑下面的方案组合（所有下标均从 0 开始）：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 选择 1 号基料：成本 7</span><br><span class=\"line\"><span class=\"bullet\">-</span> 选择 1 份 0 号配料：成本 1 x 3 = 3</span><br><span class=\"line\"><span class=\"bullet\">-</span> 选择 0 份 1 号配料：成本 0 x 4 = 0</span><br><span class=\"line\">总成本：7 + 3 + 0 = 10 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：baseCosts = [2,3], toppingCosts = [4,5,100], target = 18</span><br><span class=\"line\">输出：17</span><br><span class=\"line\">解释：考虑下面的方案组合（所有下标均从 0 开始）：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 选择 1 号基料：成本 3</span><br><span class=\"line\"><span class=\"bullet\">-</span> 选择 1 份 0 号配料：成本 1 x 4 = 4</span><br><span class=\"line\"><span class=\"bullet\">-</span> 选择 2 份 1 号配料：成本 2 x 5 = 10</span><br><span class=\"line\"><span class=\"bullet\">-</span> 选择 0 份 2 号配料：成本 0 x 100 = 0</span><br><span class=\"line\">总成本：3 + 4 + 10 + 0 = 17 。不存在总成本为 18 的甜点制作方案。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：baseCosts = [3,10], toppingCosts = [2,5], target = 9</span><br><span class=\"line\">输出：8</span><br><span class=\"line\">解释：可以制作总成本为 8 和 10 的甜点。返回 8 ，因为这是成本更低的方案。</span><br></pre></td></tr></table></figure>\n<p>示例 4：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：baseCosts = [10], toppingCosts = [1], target = 1</span><br><span class=\"line\">输出：10</span><br><span class=\"line\">解释：注意，你可以选择不添加任何配料，但你必须选择一种基料。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>n == baseCosts.length</li>\n<li>m == toppingCosts.length</li>\n<li>1 &lt;= n, m &lt;= 10</li>\n<li>1 &lt;= baseCosts[i], toppingCosts[i] &lt;= $10^4$</li>\n<li>1 &lt;= target &lt;= $10^4$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">closestCost</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; baseCosts, vector&lt;<span class=\"type\">int</span>&gt;&amp; toppingCosts, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = *<span class=\"built_in\">min_element</span>(baseCosts.<span class=\"built_in\">begin</span>(), baseCosts.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt;= target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">can</span><span class=\"params\">(target + <span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">2</span> * target - x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; b : baseCosts) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b &lt;= target) &#123;</span><br><span class=\"line\">                can[b] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                res = <span class=\"built_in\">min</span>(res, b);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; t : toppingCosts) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> count = <span class=\"number\">0</span>; count &lt; <span class=\"number\">2</span>; ++count) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = target; i; --i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (can[i] &amp;&amp; i + t &gt; target) &#123;</span><br><span class=\"line\">                        res = <span class=\"built_in\">min</span>(res, i + t);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i - t &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        can[i] = can[i] | can[i - t];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= res - target; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (can[target - i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target - i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (target*m)$</li>\n<li>空间复杂度：$O (target)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/03/LeetCode/1796-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/",
            "url": "https://x-17.top/2022/12/03/LeetCode/1796-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/",
            "title": "1796. 字符串中第二大的数字",
            "date_published": "2022-12-03T07:12:25.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1796-字符串中第二大的数字\"><a class=\"markdownIt-Anchor\" href=\"#1796-字符串中第二大的数字\">#</a> <a href=\"https://leetcode.cn/problems/second-largest-digit-in-a-string/description/\">1796. 字符串中第二大的数字</a></h1>\n<p>给你一个混合字符串 s ，请你返回 s 中 第二大 的数字，如果不存在第二大的数字，请你返回 -1 。</p>\n<p>混合字符串 由小写英文字母和数字组成。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;dfa12321afd&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：出现在 s 中的数字包括 [1, 2, 3] 。第二大的数字是 2 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abc1111&quot;</span><br><span class=\"line\">输出：-1</span><br><span class=\"line\">解释：出现在 s 中的数字只包含 [1] 。没有第二大的数字。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= s.length &lt;= 500</li>\n<li>s 只包含小写英文字母和（或）数字。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">secondHighest</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        deque&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                    ans.<span class=\"built_in\">push_back</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ans.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s[i] - <span class=\"string\">&#x27;0&#x27;</span> &gt; ans.<span class=\"built_in\">front</span>()) &#123;</span><br><span class=\"line\">                        ans.<span class=\"built_in\">push_front</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] - <span class=\"string\">&#x27;0&#x27;</span> &lt; ans.<span class=\"built_in\">front</span>()) &#123;</span><br><span class=\"line\">                        ans.<span class=\"built_in\">push_back</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ans.<span class=\"built_in\">size</span>() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s[i] - <span class=\"string\">&#x27;0&#x27;</span> &lt; ans.<span class=\"built_in\">back</span>()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] - <span class=\"string\">&#x27;0&#x27;</span> &gt; ans.<span class=\"built_in\">front</span>()) &#123;</span><br><span class=\"line\">                        ans.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">                        ans.<span class=\"built_in\">push_front</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] - <span class=\"string\">&#x27;0&#x27;</span> &lt; ans.<span class=\"built_in\">front</span>() &amp;&amp; s[i] - <span class=\"string\">&#x27;0&#x27;</span> &gt; ans.<span class=\"built_in\">back</span>()) &#123;</span><br><span class=\"line\">                        ans.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">                        ans.<span class=\"built_in\">push_back</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans.<span class=\"built_in\">size</span>() == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> ans.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/02/LeetCode/1769-%E7%A7%BB%E5%8A%A8%E6%89%80%E6%9C%89%E7%90%83%E5%88%B0%E6%AF%8F%E4%B8%AA%E7%9B%92%E5%AD%90%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%95%B0/",
            "url": "https://x-17.top/2022/12/02/LeetCode/1769-%E7%A7%BB%E5%8A%A8%E6%89%80%E6%9C%89%E7%90%83%E5%88%B0%E6%AF%8F%E4%B8%AA%E7%9B%92%E5%AD%90%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%95%B0/",
            "title": "1769. 移动所有球到每个盒子所需的最小操作数",
            "date_published": "2022-12-02T10:29:45.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1769-移动所有球到每个盒子所需的最小操作数\"><a class=\"markdownIt-Anchor\" href=\"#1769-移动所有球到每个盒子所需的最小操作数\">#</a> <a href=\"https://leetcode.cn/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/description/\">1769. 移动所有球到每个盒子所需的最小操作数</a></h1>\n<p>有 n 个盒子。给你一个长度为 n 的二进制字符串 boxes ，其中 boxes [i] 的值为 ‘0’ 表示第 i 个盒子是 空 的，而 boxes [i] 的值为 ‘1’ 表示盒子里有 一个 小球。</p>\n<p>在一步操作中，你可以将 一个 小球从某个盒子移动到一个与之相邻的盒子中。第 i 个盒子和第 j 个盒子相邻需满足 abs (i - j) == 1 。注意，操作执行后，某些盒子中可能会存在不止一个小球。</p>\n<p>返回一个长度为 n 的数组 answer ，其中 answer [i] 是将所有小球移动到第 i 个盒子所需的 最小 操作数。</p>\n<p>每个 answer [i] 都需要根据盒子的 初始状态 进行计算。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxes = &quot;110&quot;</span><br><span class=\"line\">输出：[1,1,3]</span><br><span class=\"line\">解释：每个盒子对应的最小操作数如下：</span><br><span class=\"line\">1) 第 1 个盒子：将一个小球从第 2 个盒子移动到第 1 个盒子，需要 1 步操作。</span><br><span class=\"line\">2) 第 2 个盒子：将一个小球从第 1 个盒子移动到第 2 个盒子，需要 1 步操作。</span><br><span class=\"line\">3) 第 3 个盒子：将一个小球从第 1 个盒子移动到第 3 个盒子，需要 2 步操作。将一个小球从第 2 个盒子移动到第 3 个盒子，需要 1 步操作。共计 3 步操作。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxes = &quot;001011&quot;</span><br><span class=\"line\">输出：[11,8,5,4,3,4]</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>n == boxes.length</li>\n<li>1 &lt;= n &lt;= 2000</li>\n<li>boxes [i] 为 ‘0’ 或 ‘1’</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">minOperations</span><span class=\"params\">(string boxes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = boxes[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;0&#x27;</span>, right = <span class=\"number\">0</span>, operations = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = boxes.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (boxes[i] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">                operations += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">res</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        res[<span class=\"number\">0</span>] = operations;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            operations += left - right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (boxes[i] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res[i] = operations;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/12/01/LeetCode/1779-%E6%89%BE%E5%88%B0%E6%9C%80%E8%BF%91%E7%9A%84%E6%9C%89%E7%9B%B8%E5%90%8C-X-%E6%88%96-Y-%E5%9D%90%E6%A0%87%E7%9A%84%E7%82%B9/",
            "url": "https://x-17.top/2022/12/01/LeetCode/1779-%E6%89%BE%E5%88%B0%E6%9C%80%E8%BF%91%E7%9A%84%E6%9C%89%E7%9B%B8%E5%90%8C-X-%E6%88%96-Y-%E5%9D%90%E6%A0%87%E7%9A%84%E7%82%B9/",
            "title": "1779. 找到最近的有相同 X 或 Y 坐标的点",
            "date_published": "2022-12-01T11:13:37.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1779-找到最近的有相同-x-或-y-坐标的点\"><a class=\"markdownIt-Anchor\" href=\"#1779-找到最近的有相同-x-或-y-坐标的点\">#</a> <a href=\"https://leetcode.cn/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/description/\">1779. 找到最近的有相同 X 或 Y 坐标的点</a></h1>\n<p>给你两个整数 x 和 y ，表示你在一个笛卡尔坐标系下的 (x, y) 处。同时，在同一个坐标系下给你一个数组 points ，其中 points [i] = [ai, bi] 表示在 (ai, bi) 处有一个点。当一个点与你所在的位置有相同的 x 坐标或者相同的 y 坐标时，我们称这个点是 有效的 。</p>\n<p>请返回距离你当前位置 曼哈顿距离 最近的 有效 点的下标（下标从 0 开始）。如果有多个最近的有效点，请返回下标 最小 的一个。如果没有有效点，请返回 -1 。</p>\n<p>两个点 (x1, y1) 和 (x2, y2) 之间的 曼哈顿距离 为 abs (x1 - x2) + abs (y1 - y2) 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：所有点中，[3,1]，[2,4] 和 [4,4] 是有效点。有效点中，[2,4] 和 [4,4] 距离你当前位置的曼哈顿距离最小，都为 1 。[2,4] 的下标最小，所以返回 2 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：x = 3, y = 4, points = [[3,4]]</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">提示：答案可以与你当前所在位置坐标相同。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：x = 3, y = 4, points = [[2,3]]</span><br><span class=\"line\">输出：-1</span><br><span class=\"line\">解释：没有 有效点。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= points.length &lt;= $10^4$</li>\n<li>points[i].length == 2</li>\n<li>1 &lt;= x, y, ai, bi &lt;= $10^4$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nearestValidPoint</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mi = <span class=\"number\">10000</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; points.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (points[i][<span class=\"number\">0</span>] == x &amp;&amp; <span class=\"built_in\">abs</span>(points[i][<span class=\"number\">1</span>]-y) &lt; mi) &#123;</span><br><span class=\"line\">                mi = <span class=\"built_in\">abs</span>(points[i][<span class=\"number\">1</span>] - y);</span><br><span class=\"line\">                ans = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (points[i][<span class=\"number\">1</span>] == y &amp;&amp; <span class=\"built_in\">abs</span>(points[i][<span class=\"number\">0</span>]-x) &lt; mi) &#123;</span><br><span class=\"line\">                mi = <span class=\"built_in\">abs</span>(points[i][<span class=\"number\">0</span>] - x);</span><br><span class=\"line\">                ans = i; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/30/LeetCode/895-%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88/",
            "url": "https://x-17.top/2022/11/30/LeetCode/895-%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88/",
            "title": "895. 最大频率栈",
            "date_published": "2022-11-30T07:56:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"895-最大频率栈\"><a class=\"markdownIt-Anchor\" href=\"#895-最大频率栈\">#</a> <a href=\"https://leetcode.cn/problems/maximum-frequency-stack/description/\">895. 最大频率栈</a></h1>\n<p>设计一个类似堆栈的数据结构，将元素推入堆栈，并从堆栈中弹出出现频率最高的元素。</p>\n<p>实现 FreqStack 类:</p>\n<p>FreqStack () 构造一个空的堆栈。<br>\nvoid push (int val) 将一个整数 val 压入栈顶。<br>\nint pop () 删除并返回堆栈中出现频率最高的元素。<br>\n如果出现频率最高的元素不只一个，则移除并返回最接近栈顶的元素。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;],</span><br><span class=\"line\">[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]</span><br><span class=\"line\">输出：[null,null,null,null,null,null,null,5,7,5,4]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">FreqStack = new FreqStack();</span><br><span class=\"line\">freqStack.push (5);//堆栈为 [5]</span><br><span class=\"line\">freqStack.push (7);//堆栈是 [5,7]</span><br><span class=\"line\">freqStack.push (5);//堆栈是 [5,7,5]</span><br><span class=\"line\">freqStack.push (7);//堆栈是 [5,7,5,7]</span><br><span class=\"line\">freqStack.push (4);//堆栈是 [5,7,5,7,4]</span><br><span class=\"line\">freqStack.push (5);//堆栈是 [5,7,5,7,4,5]</span><br><span class=\"line\">freqStack.pop ();//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,5,7,4]。</span><br><span class=\"line\">freqStack.pop ();//返回 7 ，因为 5 和 7 出现频率最高，但7最接近顶部。堆栈变成 [5,7,5,4]。</span><br><span class=\"line\">freqStack.pop ();//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,4]。</span><br><span class=\"line\">freqStack.pop ();//返回 4 ，因为 4, 5 和 7 出现频率最高，但 4 是最接近顶部的。堆栈变成 [5,7]。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= val &lt;= $10^9$</li>\n<li>push 和 pop 的操作数不大于 $2 * 10^4$。</li>\n<li>输入保证在调用 pop 之前堆栈中至少有一个元素。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FreqStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">FreqStack</span>() &#123;</span><br><span class=\"line\">        maxFreq = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        freq[val]++;</span><br><span class=\"line\">        group[freq[val]].<span class=\"built_in\">push</span>(val);</span><br><span class=\"line\">        maxFreq = <span class=\"built_in\">max</span>(maxFreq, freq[val]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val = group[maxFreq].<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        freq[val]--;</span><br><span class=\"line\">        group[maxFreq].<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (group[maxFreq].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            maxFreq--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; freq;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, stack&lt;<span class=\"type\">int</span>&gt;&gt; group;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxFreq;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (1)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/29/LeetCode/1758-%E7%94%9F%E6%88%90%E4%BA%A4%E6%9B%BF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%95%B0/",
            "url": "https://x-17.top/2022/11/29/LeetCode/1758-%E7%94%9F%E6%88%90%E4%BA%A4%E6%9B%BF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%95%B0/",
            "title": "1758. 生成交替二进制字符串的最少操作数",
            "date_published": "2022-11-29T09:49:05.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1758-生成交替二进制字符串的最少操作数\"><a class=\"markdownIt-Anchor\" href=\"#1758-生成交替二进制字符串的最少操作数\">#</a> <a href=\"https://leetcode.cn/problems/minimum-changes-to-make-alternating-binary-string/description/\">1758. 生成交替二进制字符串的最少操作数</a></h1>\n<p>给你一个仅由字符 ‘0’ 和 ‘1’ 组成的字符串 s 。一步操作中，你可以将任一 ‘0’ 变成 ‘1’ ，或者将 ‘1’ 变成 ‘0’ 。</p>\n<p>交替字符串 定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串 “010” 是交替字符串，而字符串 “0100” 不是。</p>\n<p>返回使 s 变成 交替字符串 所需的 最少 操作数。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;0100&quot;</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：如果将最后一个字符变为 &#x27;1&#x27; ，s 就变成 &quot;0101&quot; ，即符合交替字符串定义。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;10&quot;</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：s 已经是交替字符串。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;1111&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：需要 2 步操作得到 &quot;0101&quot; 或 &quot;1010&quot; 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= s.length &lt;= $10^4$</li>\n<li>s [i] 是 ‘0’ 或 ‘1’</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minOperations</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; i%<span class=\"number\">2</span> == <span class=\"number\">0</span>) ans++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span> &amp;&amp; i%<span class=\"number\">2</span> == <span class=\"number\">1</span>) ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(ans, (<span class=\"type\">int</span>)s.<span class=\"built_in\">length</span>() - ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/28/LeetCode/813-%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC%E5%92%8C%E7%9A%84%E5%88%86%E7%BB%84/",
            "url": "https://x-17.top/2022/11/28/LeetCode/813-%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC%E5%92%8C%E7%9A%84%E5%88%86%E7%BB%84/",
            "title": "813. 最大平均值和的分组",
            "date_published": "2022-11-28T07:32:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"813-最大平均值和的分组\"><a class=\"markdownIt-Anchor\" href=\"#813-最大平均值和的分组\">#</a> <a href=\"https://leetcode.cn/problems/largest-sum-of-averages/description/\">813. 最大平均值和的分组</a></h1>\n<p>给定数组 nums 和一个整数 k 。我们将给定的数组 nums 分成 最多 k 个相邻的非空子数组 。 分数 由每个子数组内的平均值的总和构成。</p>\n<p>注意我们必须使用 nums 数组中的每一个数进行分组，并且分数不一定需要是整数。</p>\n<p>返回我们所能得到的最大 分数 是多少。答案误差在 10-6 内被视为是正确的。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [9,1,2,3,9], k = 3</span><br><span class=\"line\">输出: 20.00000</span><br><span class=\"line\">解释: </span><br><span class=\"line\">nums 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20. </span><br><span class=\"line\">我们也可以把 nums 分成[9, 1], [2], [3, 9]. </span><br><span class=\"line\">这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [1,2,3,4,5,6,7], k = 4</span><br><span class=\"line\">输出: 20.50000</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= 100</li>\n<li>1 &lt;= nums[i] &lt;= $10^4$</li>\n<li>1 &lt;= k &lt;= nums.length</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">largestSumOfAverages</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">prefix</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            prefix[i + <span class=\"number\">1</span>] = prefix[i] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            dp[i] = prefix[i] / i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">2</span>; j &lt;= k; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt;= j; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = j - <span class=\"number\">1</span>; x &lt; i; x++) &#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"built_in\">max</span>(dp[i], dp[x] + (prefix[i] - prefix[x]) / (i - x));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (k*n^2)$</li>\n<li>空间复杂度：$O (k*n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/27/LeetCode/1752-%E6%A3%80%E6%9F%A5%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E7%BB%8F%E6%8E%92%E5%BA%8F%E5%92%8C%E8%BD%AE%E8%BD%AC%E5%BE%97%E5%88%B0/",
            "url": "https://x-17.top/2022/11/27/LeetCode/1752-%E6%A3%80%E6%9F%A5%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E7%BB%8F%E6%8E%92%E5%BA%8F%E5%92%8C%E8%BD%AE%E8%BD%AC%E5%BE%97%E5%88%B0/",
            "title": "1752. 检查数组是否经排序和轮转得到",
            "date_published": "2022-11-27T07:53:37.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1752-检查数组是否经排序和轮转得到\"><a class=\"markdownIt-Anchor\" href=\"#1752-检查数组是否经排序和轮转得到\">#</a> <a href=\"https://leetcode.cn/problems/check-if-array-is-sorted-and-rotated/description/\">1752. 检查数组是否经排序和轮转得到</a></h1>\n<p>给你一个数组 nums 。nums 的源数组中，所有元素与 nums 相同，但按非递减顺序排列。</p>\n<p>如果 nums 能够由源数组轮转若干位置（包括 0 个位置）得到，则返回 true ；否则，返回 false 。</p>\n<p>源数组中可能存在 重复项 。</p>\n<p>注意：我们称数组 A 在轮转 x 个位置后得到长度相同的数组 B ，当它们满足 A [i] == B [(i+x) % A.length] ，其中 % 为取余运算。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,4,5,1,2]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：[1,2,3,4,5] 为有序的源数组。</span><br><span class=\"line\">可以轮转 x = 3 个位置，使新数组从值为 3 的元素开始：[3,4,5,1,2] 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,1,3,4]</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：源数组无法经轮转得到 nums 。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：[1,2,3] 为有序的源数组。</span><br><span class=\"line\">可以轮转 x = 0 个位置（即不轮转）得到 nums 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= 100</li>\n<li>1 &lt;= nums[i] &lt;= 100</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &lt; nums[i<span class=\"number\">-1</span>] &amp;&amp; flag) &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[i] &lt; nums[i<span class=\"number\">-1</span>] &amp;&amp; !flag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &gt;= nums[nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/26/LeetCode/882-%E7%BB%86%E5%88%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/",
            "url": "https://x-17.top/2022/11/26/LeetCode/882-%E7%BB%86%E5%88%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/",
            "title": "882. 细分图中的可到达节点",
            "date_published": "2022-11-26T05:14:44.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"882-细分图中的可到达节点\"><a class=\"markdownIt-Anchor\" href=\"#882-细分图中的可到达节点\">#</a> <a href=\"https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/description/\">882. 细分图中的可到达节点</a></h1>\n<p>给你一个无向图（原始图），图中有 n 个节点，编号从 0 到 n - 1 。你决定将图中的每条边 细分 为一条节点链，每条边之间的新节点数各不相同。</p>\n<p>图用由边组成的二维数组 edges 表示，其中 edges [i] = [ui, vi, cnti] 表示原始图中节点 ui 和 vi 之间存在一条边，cnti 是将边 细分 后的新节点总数。注意，cnti == 0 表示边不可细分。</p>\n<p>要 细分 边 [ui, vi] ，需要将其替换为 (cnti + 1) 条新边，和 cnti 个新节点。新节点为 x1, x2, …, xcnti ，新边为 [ui, x1], [x1, x2], [x2, x3], …, [xcnti+1, xcnti], [xcnti, vi] 。</p>\n<p>现在得到一个 新的细分图 ，请你计算从节点 0 出发，可以到达多少个节点？如果节点间距离是 maxMoves 或更少，则视为 可以到达 。</p>\n<p>给你原始图和 maxMoves ，返回 新的细分图中从节点 0 出发 可到达的节点数 。</p>\n<p>示例 1：<br>\n<img src=\"http://img.x-17.top/leetcode/origfinal.png\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3</span><br><span class=\"line\">输出：13</span><br><span class=\"line\">解释：边的细分情况如上图所示。</span><br><span class=\"line\">可以到达的节点已经用黄色标注出来。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4</span><br><span class=\"line\">输出：23</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：节点 0 与图的其余部分没有连通，所以只有节点 0 可以到达。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, $10^4$)</li>\n<li>edges[i].length == 3</li>\n<li>0 &lt;= $u_i$ &lt; $v_i$ &lt; n</li>\n<li>图中 不存在平行边</li>\n<li>0 &lt;= cnti &lt;= $10^4$</li>\n<li>0 &lt;= maxMoves &lt;= $10^9$</li>\n<li>1 &lt;= n &lt;= 3000</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">encode</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u * n + v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">reachableNodes</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; edges, <span class=\"type\">int</span> maxMoves, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; <span class=\"built_in\">adList</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;edge : edges) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = edge[<span class=\"number\">0</span>], v = edge[<span class=\"number\">1</span>], nodes = edge[<span class=\"number\">2</span>];</span><br><span class=\"line\">            adList[u].<span class=\"built_in\">emplace_back</span>(v, nodes);</span><br><span class=\"line\">            adList[v].<span class=\"built_in\">emplace_back</span>(u, nodes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; used;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; visited;</span><br><span class=\"line\">        <span class=\"type\">int</span> reachableNodes = <span class=\"number\">0</span>;</span><br><span class=\"line\">        priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;, greater&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; pq;</span><br><span class=\"line\">        pq.<span class=\"built_in\">emplace</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!pq.<span class=\"built_in\">empty</span>() &amp;&amp; pq.<span class=\"built_in\">top</span>().first &lt;= maxMoves) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [step, u] = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visited.<span class=\"built_in\">count</span>(u)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            visited.<span class=\"built_in\">emplace</span>(u);</span><br><span class=\"line\">            reachableNodes++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [v, nodes] : adList[u]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nodes + step + <span class=\"number\">1</span> &lt;= maxMoves &amp;&amp; !visited.<span class=\"built_in\">count</span>(v)) &#123;</span><br><span class=\"line\">                    pq.<span class=\"built_in\">emplace</span>(nodes + step + <span class=\"number\">1</span>, v);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                used[<span class=\"built_in\">encode</span>(u, v, n)] = <span class=\"built_in\">min</span>(nodes, maxMoves - step);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;edge : edges) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = edge[<span class=\"number\">0</span>], v = edge[<span class=\"number\">1</span>], nodes = edge[<span class=\"number\">2</span>];</span><br><span class=\"line\">            reachableNodes += <span class=\"built_in\">min</span>(nodes, used[<span class=\"built_in\">encode</span>(u, v, n)] + used[<span class=\"built_in\">encode</span>(v, u, n)]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reachableNodes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (E*logV)$</li>\n<li>空间复杂度：$O (V+E)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/25/LeetCode/809-%E6%83%85%E6%84%9F%E4%B8%B0%E5%AF%8C%E7%9A%84%E6%96%87%E5%AD%97/",
            "url": "https://x-17.top/2022/11/25/LeetCode/809-%E6%83%85%E6%84%9F%E4%B8%B0%E5%AF%8C%E7%9A%84%E6%96%87%E5%AD%97/",
            "title": "809. 情感丰富的文字",
            "date_published": "2022-11-25T05:24:06.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"809-情感丰富的文字\"><a class=\"markdownIt-Anchor\" href=\"#809-情感丰富的文字\">#</a> <a href=\"https://leetcode.cn/problems/expressive-words/description/\">809. 情感丰富的文字</a></h1>\n<p>有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&gt; “heeellooo”, “hi” -&gt; “hiii”。我们将相邻字母都相同的一串字符定义为相同字母组，例如：“h”, “eee”, “ll”, “ooo”。</p>\n<p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到 3 或以上。</p>\n<p>例如，以 “hello” 为例，我们可以对字母组 “o” 扩张得到 “hellooo”，但是无法以同样的方法得到 “helloo” 因为字母组 “oo” 长度小于 3。此外，我们可以进行另一种扩张 “ll” -&gt; “lllll” 以获得 “helllllooo”。如果 s = “helllllooo”，那么查询词 “hello” 是可扩张的，因为可以对它执行这两种扩张操作使得 query = “hello” -&gt; “hellooo” -&gt; “helllllooo” = s。</p>\n<p>输入一组查询单词，输出其中可扩张的单词数量。</p>\n<p>示例：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入： </span><br><span class=\"line\">s = &quot;heeellooo&quot;</span><br><span class=\"line\">words = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：</span><br><span class=\"line\">我们能通过扩张 &quot;hello&quot; 的 &quot;e&quot; 和 &quot;o&quot; 来得到 &quot;heeellooo&quot;。</span><br><span class=\"line\">我们不能通过扩张 &quot;helo&quot; 来得到 &quot;heeellooo&quot; 因为 &quot;ll&quot; 的长度小于 3 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= s.length, words.length &lt;= 100</li>\n<li>1 &lt;= words[i].length &lt;= 100</li>\n<li>s 和所有在 words 中的单词都只由小写字母组成。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">expressiveWords</span><span class=\"params\">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> string&amp; word: words) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">expand</span>(s, word)) &#123;</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">expand</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; s, <span class=\"type\">const</span> string&amp; t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.<span class=\"built_in\">size</span>() &amp;&amp; j &lt; t.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] != t[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">char</span> ch = s[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> cnti = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; s.<span class=\"built_in\">size</span>() &amp;&amp; s[i] == ch) &#123;</span><br><span class=\"line\">                ++cnti;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> cntj = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; t.<span class=\"built_in\">size</span>() &amp;&amp; t[j] == ch) &#123;</span><br><span class=\"line\">                ++cntj;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnti &lt; cntj) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnti != cntj &amp;&amp; cnti &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i == s.<span class=\"built_in\">size</span>() &amp;&amp; j == t.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n|s|+\\sum_i|words_i|)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/24/LeetCode/795-%E5%8C%BA%E9%97%B4%E5%AD%90%E6%95%B0%E7%BB%84%E4%B8%AA%E6%95%B0/",
            "url": "https://x-17.top/2022/11/24/LeetCode/795-%E5%8C%BA%E9%97%B4%E5%AD%90%E6%95%B0%E7%BB%84%E4%B8%AA%E6%95%B0/",
            "title": "795. 区间子数组个数",
            "date_published": "2022-11-24T02:35:01.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"795-区间子数组个数\"><a class=\"markdownIt-Anchor\" href=\"#795-区间子数组个数\">#</a> <a href=\"https://leetcode.cn/problems/number-of-subarrays-with-bounded-maximum/description/\">795. 区间子数组个数</a></h1>\n<p>给你一个整数数组 nums 和两个整数：left 及 right 。找出 nums 中连续、非空且其中最大元素在范围 [left, right] 内的子数组，并返回满足条件的子数组的个数。</p>\n<p>生成的测试用例保证结果符合 32-bit 整数范围。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,1,4,3], left = 2, right = 3</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：满足条件的三个子数组：[2], [2, 1], [3]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,9,2,5,6], left = 2, right = 8</span><br><span class=\"line\">输出：7</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= $10^5$</li>\n<li>0 &lt;= nums[i] &lt;= $10^9$</li>\n<li>0 &lt;= left &lt;= right &lt;= $10^9$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numSubarrayBoundedMax</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">count</span>(nums, right) - <span class=\"built_in\">count</span>(nums, left - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">count</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> lower)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>, cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : nums) &#123;</span><br><span class=\"line\">            cur = x &lt;= lower ? cur + <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            res += cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/23/LeetCode/1742-%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/",
            "url": "https://x-17.top/2022/11/23/LeetCode/1742-%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/",
            "title": "1742. 盒子中小球的最大数量",
            "date_published": "2022-11-23T08:03:49.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1742-盒子中小球的最大数量\"><a class=\"markdownIt-Anchor\" href=\"#1742-盒子中小球的最大数量\">#</a> <a href=\"https://leetcode.cn/problems/maximum-number-of-balls-in-a-box/description/\">1742. 盒子中小球的最大数量</a></h1>\n<p>你在一家生产小球的玩具厂工作，有 n 个小球，编号从 lowLimit 开始，到 highLimit 结束（包括 lowLimit 和 highLimit ，即 n == highLimit - lowLimit + 1）。另有无限数量的盒子，编号从 1 到 infinity 。</p>\n<p>你的工作是将每个小球放入盒子中，其中盒子的编号应当等于小球编号上每位数字的和。例如，编号 321 的小球应当放入编号 3 + 2 + 1 = 6 的盒子，而编号 10 的小球应当放入编号 1 + 0 = 1 的盒子。</p>\n<p>给你两个整数 lowLimit 和 highLimit ，返回放有最多小球的盒子中的小球数量。如果有多个盒子都满足放有最多小球，只需返回其中任一盒子的小球数量。</p>\n<p>示例 1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：lowLimit = 1, highLimit = 10</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：</span><br><span class=\"line\">盒子编号：1 2 3 4 5 6 7 8 9 10 11 ...</span><br><span class=\"line\">小球数量：2 1 1 1 1 1 1 1 1 0  0  ...</span><br><span class=\"line\">编号 1 的盒子放有最多小球，小球数量为 2 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：lowLimit = 5, highLimit = 15</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：</span><br><span class=\"line\">盒子编号：1 2 3 4 5 6 7 8 9 10 11 ...</span><br><span class=\"line\">小球数量：1 1 1 1 2 2 1 1 1 0  0  ...</span><br><span class=\"line\">编号 5 和 6 的盒子放有最多小球，每个盒子中的小球数量都是 2 。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：lowLimit = 19, highLimit = 28</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：</span><br><span class=\"line\">盒子编号：1 2 3 4 5 6 7 8 9 10 11 12 ...</span><br><span class=\"line\">小球数量：0 1 1 1 1 1 1 1 1 2  0  0  ...</span><br><span class=\"line\">编号 10 的盒子放有最多小球，小球数量为 2 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= lowLimit &lt;= highLimit &lt;= $10^5$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countBalls</span><span class=\"params\">(<span class=\"type\">int</span> lowLimit, <span class=\"type\">int</span> highLimit)</span> </span>&#123;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; count;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = lowLimit; i &lt;= highLimit; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> box = <span class=\"number\">0</span>, x = i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x) &#123;</span><br><span class=\"line\">                box += x % <span class=\"number\">10</span>;</span><br><span class=\"line\">                x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count[box]++;</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, count[box]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (nloghighLimit)$</li>\n<li>空间复杂度：$O (loghighLimit)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/22/LeetCode/878-%E7%AC%AC-N-%E4%B8%AA%E7%A5%9E%E5%A5%87%E6%95%B0%E5%AD%97/",
            "url": "https://x-17.top/2022/11/22/LeetCode/878-%E7%AC%AC-N-%E4%B8%AA%E7%A5%9E%E5%A5%87%E6%95%B0%E5%AD%97/",
            "title": "878. 第 N 个神奇数字",
            "date_published": "2022-11-22T12:20:25.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"878-第-n-个神奇数字\"><a class=\"markdownIt-Anchor\" href=\"#878-第-n-个神奇数字\">#</a> <a href=\"https://leetcode.cn/problems/nth-magical-number/description/\">878. 第 N 个神奇数字</a></h1>\n<p>一个正整数如果能被 a 或 b 整除，那么它是神奇的。</p>\n<p>给定三个整数 n , a , b ，返回第 n 个神奇的数字。因为答案可能很大，所以返回答案 对 $10^9 + 7$ 取模 后的值。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 1, a = 2, b = 3</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 4, a = 2, b = 3</span><br><span class=\"line\">输出：6</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= n &lt;= $10^9$</li>\n<li>2 &lt;= a, b &lt;= 4 * $10^4$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nthMagicalNumber</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> l = <span class=\"built_in\">min</span>(a, b);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> r = (<span class=\"type\">long</span> <span class=\"type\">long</span>) n * <span class=\"built_in\">min</span>(a, b);</span><br><span class=\"line\">        <span class=\"type\">int</span> c = <span class=\"built_in\">lcm</span>(a, b);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> cnt = mid / a + mid / b - mid / c;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt &gt;= n) &#123;</span><br><span class=\"line\">                r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r + <span class=\"number\">1</span>) % MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (log (n*max (a,b)))$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/21/LeetCode/808-%E5%88%86%E6%B1%A4/",
            "url": "https://x-17.top/2022/11/21/LeetCode/808-%E5%88%86%E6%B1%A4/",
            "title": "808. 分汤",
            "date_published": "2022-11-21T08:36:49.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"808-分汤\"><a class=\"markdownIt-Anchor\" href=\"#808-分汤\">#</a> <a href=\"https://leetcode.cn/problems/soup-servings/description/\">808. 分汤</a></h1>\n<p>有 A 和 B 两种类型 的汤。一开始每种类型的汤有 n 毫升。有四种分配操作：</p>\n<p>提供 100ml 的 汤 A 和 0ml 的 汤 B 。<br>\n提供 75ml 的 汤 A 和 25ml 的 汤 B 。<br>\n提供 50ml 的 汤 A 和 50ml 的 汤 B 。<br>\n提供 25ml 的 汤 A 和 75ml 的 汤 B 。<br>\n当我们把汤分配给某人之后，汤就没有了。每个回合，我们将从四种概率同为 0.25 的操作中进行分配选择。如果汤的剩余量不足以完成某次操作，我们将尽可能分配。当两种类型的汤都分配完时，停止操作。</p>\n<p>注意 不存在先分配 100 ml 汤 B 的操作。</p>\n<p>需要返回的值： 汤 A 先分配完的概率 +  汤 A 和汤 B 同时分配完的概率 / 2。返回值在正确答案 10-5 的范围内将被认为是正确的。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 50</span><br><span class=\"line\">输出: 0.62500</span><br><span class=\"line\">解释:如果我们选择前两个操作，A 首先将变为空。</span><br><span class=\"line\">对于第三个操作，A 和 B 会同时变为空。</span><br><span class=\"line\">对于第四个操作，B 首先将变为空。</span><br><span class=\"line\">所以 A 变为空的总概率加上 A 和 B 同时变为空的概率的一半是 0.25 <span class=\"emphasis\">*(1 + 1 + 0.5 + 0)= 0.625。</span></span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 100</span><br><span class=\"line\">输出: 0.71875</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>0 &lt;= n &lt;= $10^9$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<pre><code class=\"language-C++\">class Solution &#123;\npublic:\n    double soupServings(int n) &#123;\n        n = ceil((double) n / 25);\n        if (n &gt;= 179) &#123;\n            return 1.0;\n        &#125;\n        vector&lt;vector&lt;double&gt;&gt; dp(n + 1, vector&lt;double&gt;(n + 1));\n        dp[0][0] = 0.5;\n        for (int i = 1; i &lt;= n; i++) &#123;\n            dp[0][i] = 1.0;\n        &#125;\n        for (int i = 1; i &lt;= n; i++) &#123;\n            for (int j = 1; j &lt;= n; j++) &#123;\n                dp[i][j] = (dp[max(0, i - 4)][j] + dp[max(0, i - 3)][max(0, j - 1)] +\n                           dp[max(0, i - 2)][max(0, j - 2)] + dp[max(0, i - 1)][max(0, j - 3)]) / 4.0;\n            &#125;\n        &#125;\n        return dp[n][n];\n    &#125;\n&#125;;\n```​​​​​​​\n\n复杂度分析\n\n- 时间复杂度：$O(C^2)\\$\n- 空间复杂度：$O(C^2)\\$\n</code></pre>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/20/LeetCode/799-%E9%A6%99%E6%A7%9F%E5%A1%94/",
            "url": "https://x-17.top/2022/11/20/LeetCode/799-%E9%A6%99%E6%A7%9F%E5%A1%94/",
            "title": "799. 香槟塔",
            "date_published": "2022-11-20T04:22:37.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"799-香槟塔\"><a class=\"markdownIt-Anchor\" href=\"#799-香槟塔\">#</a> <a href=\"https://leetcode.cn/problems/champagne-tower/description/\">799. 香槟塔</a></h1>\n<p>我们把玻璃杯摆成金字塔的形状，其中 第一层 有 1 个玻璃杯， 第二层 有 2 个，依次类推到第 100 层，每个玻璃杯 (250ml) 将盛有香槟。</p>\n<p>从顶层的第一个玻璃杯开始倾倒一些香槟，当顶层的杯子满了，任何溢出的香槟都会立刻等流量的流向左右两侧的玻璃杯。当左右两边的杯子也满了，就会等流量的流向它们左右两边的杯子，依次类推。（当最底层的玻璃杯满了，香槟会流到地板上）</p>\n<p>例如，在倾倒一杯香槟后，最顶层的玻璃杯满了。倾倒了两杯香槟后，第二层的两个玻璃杯各自盛放一半的香槟。在倒三杯香槟后，第二层的香槟满了 - 此时总共有三个满的玻璃杯。在倒第四杯后，第三层中间的玻璃杯盛放了一半的香槟，他两边的玻璃杯各自盛放了四分之一的香槟，如下图所示。</p>\n<p>现在当倾倒了非负整数杯香槟后，返回第 i 行 j 个玻璃杯所盛放的香槟占玻璃杯容积的比例（ i 和 j 都从 0 开始）。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: poured(倾倒香槟总杯数) = 1, query<span class=\"emphasis\">_glass(杯子的位置数) = 1, query_</span>row(行数) = 1</span><br><span class=\"line\">输出: 0.00000</span><br><span class=\"line\">解释: 我们在顶层（下标是（0，0））倒了一杯香槟后，没有溢出，因此所有在顶层以下的玻璃杯都是空的。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: poured(倾倒香槟总杯数) = 2, query<span class=\"emphasis\">_glass(杯子的位置数) = 1, query_</span>row(行数) = 1</span><br><span class=\"line\">输出: 0.50000</span><br><span class=\"line\">解释: 我们在顶层（下标是（0，0）倒了两杯香槟后，有一杯量的香槟将从顶层溢出，位于（1，0）的玻璃杯和（1，1）的玻璃杯平分了这一杯香槟，所以每个玻璃杯有一半的香槟。</span><br></pre></td></tr></table></figure>\n<p>示例 3:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: poured = 100000009, query<span class=\"emphasis\">_row = 33, query_</span>glass = 17</span><br><span class=\"line\">输出: 1.00000</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>0 &lt;= poured &lt;= $10^9$</li>\n<li>0 &lt;= query_glass &lt;= query_row &lt; 100</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">champagneTower</span><span class=\"params\">(<span class=\"type\">int</span> poured, <span class=\"type\">int</span> query_row, <span class=\"type\">int</span> query_glass)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">double</span>&gt; row = &#123;(<span class=\"type\">double</span>)poured&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= query_row; i++) &#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">nextRow</span><span class=\"params\">(i + <span class=\"number\">1</span>, <span class=\"number\">0.0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; row.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">double</span> volume = row[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (volume &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    nextRow[j] += (volume - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                    nextRow[j + <span class=\"number\">1</span>] += (volume - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            row = nextRow;</span><br><span class=\"line\">        &#125;            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(<span class=\"number\">1.0</span>, row[query_glass]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n^2)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/19/LeetCode/1732-%E6%89%BE%E5%88%B0%E6%9C%80%E9%AB%98%E6%B5%B7%E6%8B%94/",
            "url": "https://x-17.top/2022/11/19/LeetCode/1732-%E6%89%BE%E5%88%B0%E6%9C%80%E9%AB%98%E6%B5%B7%E6%8B%94/",
            "title": "1732. 找到最高海拔",
            "date_published": "2022-11-19T10:30:40.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1732-找到最高海拔\"><a class=\"markdownIt-Anchor\" href=\"#1732-找到最高海拔\">#</a> <a href=\"https://leetcode.cn/problems/find-the-highest-altitude/description/\">1732. 找到最高海拔</a></h1>\n<p>有一个自行车手打算进行一场公路骑行，这条路线总共由 n + 1 个不同海拔的点组成。自行车手从海拔为 0 的点 0 开始骑行。</p>\n<p>给你一个长度为 n 的整数数组 gain ，其中 gain [i] 是点 i 和点 i + 1 的 净海拔高度差（0 &lt;= i &lt; n）。请你返回 最高点的海拔 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：gain = [-5,1,5,0,-7]</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：海拔高度依次为 [0,-5,-4,1,1,-6] 。最高海拔为 1 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：gain = [-4,-3,-2,-1,4,3,2]</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：海拔高度依次为 [0,-4,-7,-9,-10,-6,-3,-1] 。最高海拔为 0 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>n == gain.length</li>\n<li>1 &lt;= n &lt;= 100</li>\n<li>-100 &lt;= gain[i] &lt;= 100</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">largestAltitude</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; gain)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> g : gain) &#123;</span><br><span class=\"line\">            t += g;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(t, ans);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/18/LeetCode/891-%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C/",
            "url": "https://x-17.top/2022/11/18/LeetCode/891-%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C/",
            "title": "891. 子序列宽度之和",
            "date_published": "2022-11-18T03:58:33.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"891-子序列宽度之和\"><a class=\"markdownIt-Anchor\" href=\"#891-子序列宽度之和\">#</a> <a href=\"https://leetcode.cn/problems/sum-of-subsequence-widths/description/\">891. 子序列宽度之和</a></h1>\n<p>一个序列的 宽度 定义为该序列中最大元素和最小元素的差值。</p>\n<p>给你一个整数数组 nums ，返回 nums 的所有非空 子序列 的 宽度之和 。由于答案可能非常大，请返回对 109 + 7 取余 后的结果。</p>\n<p>子序列 定义为从一个数组里删除一些（或者不删除）元素，但不改变剩下元素的顺序得到的数组。例如，[3,6,2,7] 就是数组 [0,3,1,6,2,2,7] 的一个子序列。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,1,3]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：子序列为 [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3] 。</span><br><span class=\"line\">相应的宽度是 0, 0, 0, 1, 1, 2, 2 。</span><br><span class=\"line\">宽度之和是 6 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= $10^5$</li>\n<li>1 &lt;= nums[i] &lt;= $10^5$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumSubseqWidths</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> res = <span class=\"number\">0</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> x = nums[<span class=\"number\">0</span>], y = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; nums.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">            res = (res + nums[j] * (y - <span class=\"number\">1</span>) - x) % mod;</span><br><span class=\"line\">            x = (x * <span class=\"number\">2</span> + nums[j]) % mod;</span><br><span class=\"line\">            y = y * <span class=\"number\">2</span> % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (res + mod) % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (nlogn)$</li>\n<li>空间复杂度：$O (logn)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/17/LeetCode/792-%E5%8C%B9%E9%85%8D%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/",
            "url": "https://x-17.top/2022/11/17/LeetCode/792-%E5%8C%B9%E9%85%8D%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/",
            "title": "792. 匹配子序列的单词数",
            "date_published": "2022-11-17T05:08:43.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"792-匹配子序列的单词数\"><a class=\"markdownIt-Anchor\" href=\"#792-匹配子序列的单词数\">#</a> <a href=\"https://leetcode.cn/problems/number-of-matching-subsequences/description/\">792. 匹配子序列的单词数</a></h1>\n<p>给定字符串 s 和字符串数组 words, 返回  words [i] 中是 s 的子序列的单词个数 。</p>\n<p>字符串的 子序列 是从原始字符串中生成的新字符串，可以从中删去一些字符 (可以是 none)，而不改变其余字符的相对顺序。</p>\n<ul>\n<li>例如， “ace” 是 “abcde” 的子序列。</li>\n</ul>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abcde&quot;, words = [&quot;a&quot;,&quot;bb&quot;,&quot;acd&quot;,&quot;ace&quot;]</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 有三个是 s 的子序列的单词: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;dsahjpjauf&quot;, words = [&quot;ahjpjau&quot;,&quot;ja&quot;,&quot;ahbwzgqnuk&quot;,&quot;tnmlanowax&quot;]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>1 &lt;= s.length &lt;= 5 * $10^4$</li>\n<li>1 &lt;= words.length &lt;= 5000</li>\n<li>1 &lt;= words[i].length &lt;= 50</li>\n<li>words [i] 和 s 都只由小写字母组成。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numMatchingSubseq</span><span class=\"params\">(string s, vector&lt;string&gt; &amp;words)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">pos</span>(<span class=\"number\">26</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            pos[s[i] - <span class=\"string\">&#x27;a&#x27;</span>].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = words.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;w : words) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (w.<span class=\"built_in\">size</span>() &gt; s.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                --res;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> p = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : w) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> &amp;ps = pos[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = <span class=\"built_in\">upper_bound</span>(ps.<span class=\"built_in\">begin</span>(), ps.<span class=\"built_in\">end</span>(), p);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == ps.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                    --res;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                p = *it;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (\\sum_<ruby>i=0}<rp>【</rp><rt>{m-1</rt><rp>】</rp></ruby>size_i*log n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/16/LeetCode/775-%E5%85%A8%E5%B1%80%E5%80%92%E7%BD%AE%E4%B8%8E%E5%B1%80%E9%83%A8%E5%80%92%E7%BD%AE/",
            "url": "https://x-17.top/2022/11/16/LeetCode/775-%E5%85%A8%E5%B1%80%E5%80%92%E7%BD%AE%E4%B8%8E%E5%B1%80%E9%83%A8%E5%80%92%E7%BD%AE/",
            "title": "775. 全局倒置与局部倒置",
            "date_published": "2022-11-16T04:59:50.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"775-全局倒置与局部倒置\"><a class=\"markdownIt-Anchor\" href=\"#775-全局倒置与局部倒置\">#</a> <a href=\"https://leetcode.cn/problems/global-and-local-inversions/description/\">775. 全局倒置与局部倒置</a></h1>\n<p>给你一个长度为 n 的整数数组 nums ，表示由范围 [0, n - 1] 内所有整数组成的一个排列。</p>\n<p>全局倒置 的数目等于满足下述条件不同下标对 (i, j) 的数目：</p>\n<ul>\n<li>\n<p>0 &lt;= i &lt; j &lt; n</p>\n</li>\n<li>\n<p>nums[i] &gt; nums[j]<br>\n 局部倒置 的数目等于满足下述条件的下标 i 的数目：</p>\n</li>\n<li>\n<p>0 &lt;= i &lt; n - 1</p>\n</li>\n<li>\n<p>nums[i] &gt; nums[i + 1]<br>\n 当数组 nums 中 全局倒置 的数量等于 局部倒置 的数量时，返回 true ；否则，返回 false 。</p>\n</li>\n</ul>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,0,2]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：有 1 个全局倒置，和 1 个局部倒置。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,0]</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：有 2 个全局倒置，和 1 个局部倒置。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>n == nums.length</li>\n<li>1 &lt;= n &lt;= $10^5$</li>\n<li>0 &lt;= nums[i] &lt; n</li>\n<li>nums 中的所有整数 互不相同</li>\n<li>nums 是范围 [0, n - 1] 内所有数字组成的一个排列</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isIdealPermutation</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(nums[i] - i) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/15/LeetCode/1710-%E5%8D%A1%E8%BD%A6%E4%B8%8A%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8D%95%E5%85%83%E6%95%B0/",
            "url": "https://x-17.top/2022/11/15/LeetCode/1710-%E5%8D%A1%E8%BD%A6%E4%B8%8A%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8D%95%E5%85%83%E6%95%B0/",
            "title": "1710. 卡车上的最大单元数",
            "date_published": "2022-11-15T04:34:44.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1710-卡车上的最大单元数\"><a class=\"markdownIt-Anchor\" href=\"#1710-卡车上的最大单元数\">#</a> <a href=\"https://leetcode.cn/problems/maximum-units-on-a-truck/description/\">1710. 卡车上的最大单元数</a></h1>\n<p>请你将一些箱子装在 一辆卡车 上。给你一个二维数组 boxTypes ，其中 boxTypes [i] = [numberOfBoxesi, numberOfUnitsPerBoxi] ：</p>\n<ul>\n<li>numberOfBoxesi 是类型 i 的箱子的数量。</li>\n<li>numberOfUnitsPerBoxi 是类型 i 每个箱子可以装载的单元数量。</li>\n</ul>\n<p>整数 truckSize 表示卡车上可以装载 箱子 的 最大数量 。只要箱子数量不超过 truckSize ，你就可以选择任意箱子装到卡车上。</p>\n<p>返回卡车可以装载 单元 的 最大 总数。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4</span><br><span class=\"line\">输出：8</span><br><span class=\"line\">解释：箱子的情况如下：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 1 个第一类的箱子，里面含 3 个单元。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 2 个第二类的箱子，每个里面含 2 个单元。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 3 个第三类的箱子，每个里面含 1 个单元。</span><br><span class=\"line\">可以选择第一类和第二类的所有箱子，以及第三类的一个箱子。</span><br><span class=\"line\">单元总数 = (1 <span class=\"emphasis\">* 3) + (2 *</span> 2) + (1 <span class=\"emphasis\">* 1) = 8</span></span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10</span><br><span class=\"line\">输出：91</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= boxTypes.length &lt;= 1000</li>\n<li>1 &lt;= numberOfBoxesi, numberOfUnitsPerBoxi &lt;= 1000</li>\n<li>1 &lt;= truckSize &lt;= $10^6$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximumUnits</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; boxTypes, <span class=\"type\">int</span> truckSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(boxTypes.<span class=\"built_in\">begin</span>(), boxTypes.<span class=\"built_in\">end</span>(), [](<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; a, <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; b)&#123;<span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] &gt; b[<span class=\"number\">1</span>];&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> box : boxTypes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (truckSize) &#123;</span><br><span class=\"line\">                ans += <span class=\"built_in\">min</span>(box[<span class=\"number\">0</span>], truckSize) * box[<span class=\"number\">1</span>];</span><br><span class=\"line\">                truckSize = <span class=\"built_in\">max</span>(truckSize - box[<span class=\"number\">0</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (nlog (n))$</li>\n<li>空间复杂度：$O (nlog (n))$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/14/LeetCode/805-%E6%95%B0%E7%BB%84%E7%9A%84%E5%9D%87%E5%80%BC%E5%88%86%E5%89%B2/",
            "url": "https://x-17.top/2022/11/14/LeetCode/805-%E6%95%B0%E7%BB%84%E7%9A%84%E5%9D%87%E5%80%BC%E5%88%86%E5%89%B2/",
            "title": "805. 数组的均值分割",
            "date_published": "2022-11-14T08:29:37.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"805-数组的均值分割\"><a class=\"markdownIt-Anchor\" href=\"#805-数组的均值分割\">#</a> <a href=\"https://leetcode.cn/problems/split-array-with-same-average/\">805. 数组的均值分割</a></h1>\n<p>给定你一个整数数组 nums</p>\n<p>我们要将 nums 数组中的每个元素移动到 A 数组 或者 B 数组中，使得 A 数组和 B 数组不为空，并且 average (A) == average (B) 。</p>\n<p>如果可以完成则返回 true ， 否则返回 false  。</p>\n<p>注意：对于数组 arr ,  average (arr) 是 arr 的所有元素的和除以 arr 长度。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 我们可以将数组分割为 [1,4,5,8] 和 [2,3,6,7], 他们的平均值都是4.5。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [3,1]</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= 30</li>\n<li>0 &lt;= nums[i] &lt;= $10^4$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">splitArraySameAverage</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>(), m = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"built_in\">accumulate</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">bool</span> isPossible = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum * i % n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                isPossible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isPossible) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;unordered_set&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(m + <span class=\"number\">1</span>);</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>].<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num: nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = m; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x: dp[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> curr = x + num;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (curr * n == sum * i) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[i].<span class=\"built_in\">emplace</span>(curr);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n^2*sum (nums))$</li>\n<li>空间复杂度：$O (n*sum (nums))$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/13/LeetCode/791-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/",
            "url": "https://x-17.top/2022/11/13/LeetCode/791-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/",
            "title": "791. 自定义字符串排序",
            "date_published": "2022-11-13T04:08:11.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"791-自定义字符串排序\"><a class=\"markdownIt-Anchor\" href=\"#791-自定义字符串排序\">#</a> <a href=\"https://leetcode.cn/problems/custom-sort-string/\">791. 自定义字符串排序</a></h1>\n<p>给定两个字符串 order 和 s 。order 的所有单词都是 唯一 的，并且以前按照一些自定义的顺序排序。</p>\n<p>对 s 的字符进行置换，使其与排序的 order 相匹配。更具体地说，如果在 order 中的字符 x 出现字符 y 之前，那么在排列后的字符串中， x 也应该出现在 y 之前。</p>\n<p>返回 满足这个性质的 s 的任意排列 。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: order = &quot;cba&quot;, s = &quot;abcd&quot;</span><br><span class=\"line\">输出: &quot;cbad&quot;</span><br><span class=\"line\">解释: </span><br><span class=\"line\">“a”、“b”、“c”是按顺序出现的，所以“a”、“b”、“c”的顺序应该是“c”、“b”、“a”。</span><br><span class=\"line\">因为“d”不是按顺序出现的，所以它可以在返回的字符串中的任何位置。“dcba”、“cdba”、“cbda”也是有效的输出。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: order = &quot;cbafg&quot;, s = &quot;abcd&quot;</span><br><span class=\"line\">输出: &quot;cbad&quot;</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>1 &lt;= order.length &lt;= 26</li>\n<li>1 &lt;= s.length &lt;= 200</li>\n<li>order 和 s 由小写英文字母组成</li>\n<li>order 中的所有字符都 不同</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">customSortString</span><span class=\"params\">(string order, string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">val</span><span class=\"params\">(<span class=\"number\">26</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; order.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            val[order[i] - <span class=\"string\">&#x27;a&#x27;</span>] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>(), [&amp;](<span class=\"type\">char</span> c0, <span class=\"type\">char</span> c1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val[c0 - <span class=\"string\">&#x27;a&#x27;</span>] &lt; val[c1 - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (nlogn + C)$</li>\n<li>空间复杂度：$O©$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/12/LeetCode/790-%E5%A4%9A%E7%B1%B3%E8%AF%BA%E5%92%8C%E6%89%98%E7%B1%B3%E8%AF%BA%E5%B9%B3%E9%93%BA/",
            "url": "https://x-17.top/2022/11/12/LeetCode/790-%E5%A4%9A%E7%B1%B3%E8%AF%BA%E5%92%8C%E6%89%98%E7%B1%B3%E8%AF%BA%E5%B9%B3%E9%93%BA/",
            "title": "790. 多米诺和托米诺平铺",
            "date_published": "2022-11-12T07:35:50.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"790-多米诺和托米诺平铺\"><a class=\"markdownIt-Anchor\" href=\"#790-多米诺和托米诺平铺\">#</a> <a href=\"https://leetcode.cn/problems/domino-and-tromino-tiling/description/\">790. 多米诺和托米诺平铺</a></h1>\n<p>有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 “L” 的托米诺形。两种形状都可以旋转。</p>\n<p><img src=\"http://img.x-17.top/leetcode/lc-domino.jpg\" alt=\"\"></p>\n<p>给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 $10^9 + 7$ 取模 的值。</p>\n<p>平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。</p>\n<p>示例 1:</p>\n<p><img src=\"http://img.x-17.top/leetcode/lc-domino1.jpg\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 3</span><br><span class=\"line\">输出: 5</span><br><span class=\"line\">解释: 五种不同的方法如上所示。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 1</span><br><span class=\"line\">输出: 1</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= n &lt;= 1000</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numTilings</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;&gt; <span class=\"built_in\">dp</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;(<span class=\"number\">4</span>));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = (dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + dp[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>]) % mod;</span><br><span class=\"line\">            dp[i][<span class=\"number\">2</span>] = (dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>]) % mod;</span><br><span class=\"line\">            dp[i][<span class=\"number\">3</span>] = (dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + dp[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>] + dp[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>]) % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n][<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/11/LeetCode/1704-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%A4%E5%8D%8A%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BC%BC/",
            "url": "https://x-17.top/2022/11/11/LeetCode/1704-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%A4%E5%8D%8A%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BC%BC/",
            "title": "1704. 判断字符串的两半是否相似",
            "date_published": "2022-11-11T04:12:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1704-判断字符串的两半是否相似\"><a class=\"markdownIt-Anchor\" href=\"#1704-判断字符串的两半是否相似\">#</a> <a href=\"https://leetcode.cn/problems/determine-if-string-halves-are-alike/description/\">1704. 判断字符串的两半是否相似</a></h1>\n<p>给你一个偶数长度的字符串 s 。将其拆分成长度相同的两半，前一半为 a ，后一半为 b 。</p>\n<p>两个字符串 相似 的前提是它们都含有相同数目的元音（‘a’，‘e’，‘i’，‘o’，‘u’，‘A’，‘E’，‘I’，‘O’，‘U’）。注意，s 可能同时含有大写和小写字母。</p>\n<p>如果 a 和 b 相似，返回 true ；否则，返回 false 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;book&quot;</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：a = &quot;bo&quot; 且 b = &quot;ok&quot; 。a 中有 1 个元音，b 也有 1 个元音。所以，a 和 b 相似。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;textbook&quot;</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：a = &quot;text&quot; 且 b = &quot;book&quot; 。a 中有 1 个元音，b 中有 2 个元音。因此，a 和 b 不相似。</span><br><span class=\"line\">注意，元音 o 在 b 中出现两次，记为 2 个。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>2 &lt;= s.length &lt;= 1000</li>\n<li>s.length 是偶数</li>\n<li>s 由 大写和小写 字母组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">halvesAreAlike</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">length</span>() / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;a&#x27;</span> || s[i] == <span class=\"string\">&#x27;A&#x27;</span> || s[i] == <span class=\"string\">&#x27;e&#x27;</span> || s[i] == <span class=\"string\">&#x27;E&#x27;</span> || s[i] == <span class=\"string\">&#x27;i&#x27;</span> || s[i] == <span class=\"string\">&#x27;I&#x27;</span> || s[i] == <span class=\"string\">&#x27;o&#x27;</span> || s[i] == <span class=\"string\">&#x27;O&#x27;</span> || s[i] == <span class=\"string\">&#x27;u&#x27;</span> || s[i] == <span class=\"string\">&#x27;U&#x27;</span>) a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = s.<span class=\"built_in\">length</span>() / <span class=\"number\">2</span>; i &lt; s.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;a&#x27;</span> || s[i] == <span class=\"string\">&#x27;A&#x27;</span> || s[i] == <span class=\"string\">&#x27;e&#x27;</span> || s[i] == <span class=\"string\">&#x27;E&#x27;</span> || s[i] == <span class=\"string\">&#x27;i&#x27;</span> || s[i] == <span class=\"string\">&#x27;I&#x27;</span> || s[i] == <span class=\"string\">&#x27;o&#x27;</span> || s[i] == <span class=\"string\">&#x27;O&#x27;</span> || s[i] == <span class=\"string\">&#x27;u&#x27;</span> || s[i] == <span class=\"string\">&#x27;U&#x27;</span>) b++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">bool</span>)(a == b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/10/LeetCode/864-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/",
            "url": "https://x-17.top/2022/11/10/LeetCode/864-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/",
            "title": "864. 获取所有钥匙的最短路径",
            "date_published": "2022-11-10T03:44:16.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"864-获取所有钥匙的最短路径\"><a class=\"markdownIt-Anchor\" href=\"#864-获取所有钥匙的最短路径\">#</a> <a href=\"https://leetcode.cn/problems/shortest-path-to-get-all-keys/description/\">864. 获取所有钥匙的最短路径</a></h1>\n<p>给定一个二维网格 grid ，其中：</p>\n<ul>\n<li>‘.’ 代表一个空房间</li>\n<li>‘#’ 代表一堵</li>\n<li>‘@’ 是起点</li>\n<li>小写字母代表钥匙</li>\n<li>大写字母代表锁</li>\n</ul>\n<p>我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p>\n<p>假设 k 为 钥匙 / 锁 的个数，且满足 1 &lt;= k &lt;= 6，字母表中的前 k 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p>\n<p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回 -1 。</p>\n<p>示例 1：</p>\n<p><img src=\"http://img.x-17.top/leetcode/lc-keys2.jpg\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：grid = [&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]</span><br><span class=\"line\">输出：8</span><br><span class=\"line\">解释：目标是获得所有钥匙，而不是打开所有锁。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<p><img src=\"http://img.x-17.top/leetcode/lc-key2.jpg\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：grid = [&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]</span><br><span class=\"line\">输出：6</span><br></pre></td></tr></table></figure>\n<p>示例 3:<br>\n<img src=\"http://img.x-17.top/leetcode/lc-keys3.jpg\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: grid = [&quot;@Aa&quot;]</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>m == grid.length</li>\n<li>n == grid[i].length</li>\n<li>1 &lt;= m, n &lt;= 30</li>\n<li>grid [i][j] 只含有 ‘.’, ‘#’, ‘@’, ‘a’-‘f’ 以及 ‘A’-‘F’</li>\n<li>钥匙的数目范围是 [1, 6]</li>\n<li>每个钥匙都对应一个 不同 的字母</li>\n<li>每个钥匙正好打开一个对应的锁</li>\n</ul>\n<h1 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">shortestPathAllKeys</span><span class=\"params\">(vector&lt;string&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = grid.<span class=\"built_in\">size</span>(), n = grid[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> sx = <span class=\"number\">0</span>, sy = <span class=\"number\">0</span>;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; key_to_idx;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;@&#x27;</span>) &#123;</span><br><span class=\"line\">                    sx = i;</span><br><span class=\"line\">                    sy = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">islower</span>(grid[i][j])) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!key_to_idx.<span class=\"built_in\">count</span>(grid[i][j])) &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> idx = key_to_idx.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                        key_to_idx[grid[i][j]] = idx;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        queue&lt;tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; q;</span><br><span class=\"line\">        vector&lt;vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&gt; <span class=\"built_in\">dist</span>(m, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">1</span> &lt;&lt; key_to_idx.<span class=\"built_in\">size</span>(), <span class=\"number\">-1</span>)));</span><br><span class=\"line\">        q.<span class=\"built_in\">emplace</span>(sx, sy, <span class=\"number\">0</span>);</span><br><span class=\"line\">        dist[sx][sy][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [x, y, mask] = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> nx = x + dirs[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"type\">int</span> ny = y + dirs[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] != <span class=\"string\">&#x27;#&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (grid[nx][ny] == <span class=\"string\">&#x27;.&#x27;</span> || grid[nx][ny] == <span class=\"string\">&#x27;@&#x27;</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (dist[nx][ny][mask] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                            dist[nx][ny][mask] = dist[x][y][mask] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            q.<span class=\"built_in\">emplace</span>(nx, ny, mask);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">islower</span>(grid[nx][ny])) &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> idx = key_to_idx[grid[nx][ny]];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (dist[nx][ny][mask | (<span class=\"number\">1</span> &lt;&lt; idx)] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                            dist[nx][ny][mask | (<span class=\"number\">1</span> &lt;&lt; idx)] = dist[x][y][mask] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((mask | (<span class=\"number\">1</span> &lt;&lt; idx)) == (<span class=\"number\">1</span> &lt;&lt; key_to_idx.<span class=\"built_in\">size</span>()) - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> dist[nx][ny][mask | (<span class=\"number\">1</span> &lt;&lt; idx)];</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            q.<span class=\"built_in\">emplace</span>(nx, ny, mask | (<span class=\"number\">1</span> &lt;&lt; idx));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> idx = key_to_idx[<span class=\"built_in\">tolower</span>(grid[nx][ny])];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((mask &amp; (<span class=\"number\">1</span> &lt;&lt; idx)) &amp;&amp; dist[nx][ny][mask] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                            dist[nx][ny][mask] = dist[x][y][mask] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            q.<span class=\"built_in\">emplace</span>(nx, ny, mask);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> dirs[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (mn*2^k)$</li>\n<li>空间复杂度：$O (mn*2^k)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/09/LeetCode/764-%E6%9C%80%E5%A4%A7%E5%8A%A0%E5%8F%B7%E6%A0%87%E5%BF%97/",
            "url": "https://x-17.top/2022/11/09/LeetCode/764-%E6%9C%80%E5%A4%A7%E5%8A%A0%E5%8F%B7%E6%A0%87%E5%BF%97/",
            "title": "764. 最大加号标志",
            "date_published": "2022-11-09T04:03:50.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"764-最大加号标志\"><a class=\"markdownIt-Anchor\" href=\"#764-最大加号标志\">#</a> <a href=\"https://leetcode.cn/problems/largest-plus-sign/description/\">764. 最大加号标志</a></h1>\n<p>在一个 n x n 的矩阵 grid 中，除了在数组 mines 中给出的元素为 0，其他每个元素都为 1。mines [i] = [<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>i</mi></msub><mi mathvariant=\"normal\">$</mi><mo stretchy=\"false\">]</mo><mtext>表示</mtext><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">[</mo></mrow><annotation encoding=\"application/x-tex\">x_i, y_i\\$]表示 grid[</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">$</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">[</span></span></span></span>x_i$][$y_i$] == 0</p>\n<p>返回  grid 中包含 1 的最大的 轴对齐 加号标志的阶数 。如果未找到加号标志，则返回 0 。</p>\n<p>一个 k 阶由 1 组成的 “轴对称” 加号标志 具有中心网格 grid [r][c] == 1 ，以及 4 个从中心向上、向下、向左、向右延伸，长度为 k-1，由 1 组成的臂。注意，只有加号标志的所有网格要求为 1 ，别的网格可能为 0 也可能为 1 。</p>\n<p>示例 1：</p>\n<p><img src=\"http://img.x-17.top/leetcode/plus1-grid.jpg\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 5, mines = [[4, 2]]</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释: 在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<p><img src=\"http://img.x-17.top/leetcode/plus2-grid.jpg\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 1, mines = [[0, 0]]</span><br><span class=\"line\">输出: 0</span><br><span class=\"line\">解释: 没有加号标志，返回 0 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= n &lt;= 500</li>\n<li>1 &lt;= mines.length &lt;= 5000</li>\n<li>0 &lt;= $x_i, y_i$ &lt; n</li>\n<li>每一对 ($x_i, y_i$) 都 不重复</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">orderOfLargestPlusSign</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n, n));</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; banned;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp;vec : mines) &#123;</span><br><span class=\"line\">            banned.<span class=\"built_in\">emplace</span>(vec[<span class=\"number\">0</span>] * n + vec[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">/* left */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (banned.<span class=\"built_in\">count</span>(i * n + j)) &#123;</span><br><span class=\"line\">                    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[i][j] = <span class=\"built_in\">min</span>(dp[i][j], count);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">/* right */</span> </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (banned.<span class=\"built_in\">count</span>(i * n + j)) &#123;</span><br><span class=\"line\">                    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[i][j] = <span class=\"built_in\">min</span>(dp[i][j], count);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">/* up */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (banned.<span class=\"built_in\">count</span>(j * n + i)) &#123;</span><br><span class=\"line\">                    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[j][i] = <span class=\"built_in\">min</span>(dp[j][i], count);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">/* down */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (banned.<span class=\"built_in\">count</span>(j * n + i)) &#123;</span><br><span class=\"line\">                    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[j][i] = <span class=\"built_in\">min</span>(dp[j][i], count);</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, dp[j][i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n^2)$</li>\n<li>空间复杂度：$O (n^2)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/08/LeetCode/1684-%E7%BB%9F%E8%AE%A1%E4%B8%80%E8%87%B4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE/",
            "url": "https://x-17.top/2022/11/08/LeetCode/1684-%E7%BB%9F%E8%AE%A1%E4%B8%80%E8%87%B4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE/",
            "title": "1684. 统计一致字符串的数目",
            "date_published": "2022-11-08T04:10:53.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1684-统计一致字符串的数目\"><a class=\"markdownIt-Anchor\" href=\"#1684-统计一致字符串的数目\">#</a> <a href=\"https://leetcode.cn/problems/count-the-number-of-consistent-strings/description/\">1684. 统计一致字符串的数目</a></h1>\n<p>给你一个由不同字符组成的字符串 allowed 和一个字符串数组 words 。如果一个字符串的每一个字符都在 allowed 中，就称这个字符串是 一致字符串 。</p>\n<p>请你返回 words 数组中 一致字符串 的数目。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：allowed = &quot;ab&quot;, words = [&quot;ad&quot;,&quot;bd&quot;,&quot;aaab&quot;,&quot;baa&quot;,&quot;badab&quot;]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：字符串 &quot;aaab&quot; 和 &quot;baa&quot; 都是一致字符串，因为它们只包含字符 &#x27;a&#x27; 和 &#x27;b&#x27; 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：allowed = &quot;abc&quot;, words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;ab&quot;,&quot;ac&quot;,&quot;bc&quot;,&quot;abc&quot;]</span><br><span class=\"line\">输出：7</span><br><span class=\"line\">解释：所有字符串都是一致的。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：allowed = &quot;cad&quot;, words = [&quot;cc&quot;,&quot;acd&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bac&quot;,&quot;bad&quot;,&quot;ac&quot;,&quot;d&quot;]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：字符串 &quot;cc&quot;，&quot;acd&quot;，&quot;ac&quot; 和 &quot;d&quot; 是一致字符串。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= words.length &lt;= $10^4$</li>\n<li>1 &lt;= allowed.length &lt;= 26</li>\n<li>1 &lt;= words[i].length &lt;= 10</li>\n<li>allowed 中的字符 互不相同 。</li>\n<li>words [i] 和 allowed 只包含小写英文字母。</li>\n</ul>\n<h1 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countConsistentStrings</span><span class=\"params\">(string allowed, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> s : allowed) &#123;</span><br><span class=\"line\">            a |= <span class=\"number\">1</span> &lt;&lt; (s - <span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; words.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> str : words[i]) b |= <span class=\"number\">1</span> &lt;&lt; (str - <span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((a | b) == a) ans++;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n+\\sum m_i)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/07/LeetCode/816-%E6%A8%A1%E7%B3%8A%E5%9D%90%E6%A0%87/",
            "url": "https://x-17.top/2022/11/07/LeetCode/816-%E6%A8%A1%E7%B3%8A%E5%9D%90%E6%A0%87/",
            "title": "816. 模糊坐标",
            "date_published": "2022-11-07T04:09:47.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"816-模糊坐标\"><a class=\"markdownIt-Anchor\" href=\"#816-模糊坐标\">#</a> <a href=\"https://leetcode.cn/problems/ambiguous-coordinates/description/\">816. 模糊坐标</a></h1>\n<p>我们有一些二维坐标，如 “(1, 3)” 或 “(2, 0.5)”，然后我们移除所有逗号，小数点和空格，得到一个字符串 S。返回所有可能的原始字符串到一个列表中。</p>\n<p>原始的坐标表示法不会存在多余的零，所以不会出现类似于 &quot;00&quot;, “0.0”, “0.00”, “1.0”, “001”, &quot;00.01&quot; 或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现 “.1” 形式的数字。</p>\n<p>最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;(123)&quot;</span><br><span class=\"line\">输出: [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;(00011)&quot;</span><br><span class=\"line\">输出:  [&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]</span><br><span class=\"line\">解释: </span><br><span class=\"line\">0.0, 00, 0001 或 00.01 是不被允许的。</span><br></pre></td></tr></table></figure>\n<p>示例 3:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;(0123)&quot;</span><br><span class=\"line\">输出: [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]</span><br></pre></td></tr></table></figure>\n<p>示例 4:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;(100)&quot;</span><br><span class=\"line\">输出: [(10, 0)]</span><br><span class=\"line\">解释: </span><br><span class=\"line\">1.0 是不被允许的。</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>4 &lt;= S.length &lt;= 12.</li>\n<li>S [0] = “(”, S [S.length - 1] = “)”, 且字符串 S 中的其他元素都是数字。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">getPos</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;string&gt; pos;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;0&#x27;</span> || s == <span class=\"string\">&quot;0&quot;</span>) pos.<span class=\"built_in\">push_back</span>(s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">1</span>; p &lt; s.<span class=\"built_in\">size</span>(); ++p) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p != <span class=\"number\">1</span> &amp;&amp; s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;0&#x27;</span>) || s.<span class=\"built_in\">back</span>() == <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            pos.<span class=\"built_in\">push_back</span>(s.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, p) + <span class=\"string\">&quot;.&quot;</span> + s.<span class=\"built_in\">substr</span>(p));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">ambiguousCoordinates</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>;</span><br><span class=\"line\">        vector&lt;string&gt; res;</span><br><span class=\"line\">        s = s.<span class=\"built_in\">substr</span>(<span class=\"number\">1</span>, s.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> l = <span class=\"number\">1</span>; l &lt; n; ++l) &#123;</span><br><span class=\"line\">            vector&lt;string&gt; lt = <span class=\"built_in\">getPos</span>(s.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, l));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lt.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            vector&lt;string&gt; rt = <span class=\"built_in\">getPos</span>(s.<span class=\"built_in\">substr</span>(l));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rt.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; i : lt) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; j : rt) &#123;</span><br><span class=\"line\">                    res.<span class=\"built_in\">push_back</span>(<span class=\"string\">&quot;(&quot;</span> + i + <span class=\"string\">&quot;, &quot;</span> + j + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n^3)$</li>\n<li>空间复杂度：$O (n^3)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/06/LeetCode/1678-%E8%AE%BE%E8%AE%A1-Goal-%E8%A7%A3%E6%9E%90%E5%99%A8/",
            "url": "https://x-17.top/2022/11/06/LeetCode/1678-%E8%AE%BE%E8%AE%A1-Goal-%E8%A7%A3%E6%9E%90%E5%99%A8/",
            "title": "1678. 设计 Goal 解析器",
            "date_published": "2022-11-06T02:11:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1678-设计-goal-解析器\"><a class=\"markdownIt-Anchor\" href=\"#1678-设计-goal-解析器\">#</a> <a href=\"https://leetcode.cn/problems/goal-parser-interpretation/description/\">1678. 设计 Goal 解析器</a></h1>\n<p>请你设计一个可以解释字符串 command 的 Goal 解析器 。command 由 “G”、&quot;()&quot; 和 / 或 “(al)” 按某种顺序组成。Goal 解析器会将 “G” 解释为字符串 “G”、&quot;()&quot; 解释为字符串 “o” ，&quot;(al)&quot; 解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。</p>\n<p>给你字符串 command ，返回 Goal 解析器 对 command 的解释结果。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：command = &quot;G()(al)&quot;</span><br><span class=\"line\">输出：&quot;Goal&quot;</span><br><span class=\"line\">解释：Goal 解析器解释命令的步骤如下所示：</span><br><span class=\"line\">G -&gt; G</span><br><span class=\"line\">() -&gt; o</span><br><span class=\"line\">(al) -&gt; al</span><br><span class=\"line\">最后连接得到的结果是 &quot;Goal&quot;</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：command = &quot;G()()()()(al)&quot;</span><br><span class=\"line\">输出：&quot;Gooooal&quot;</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：command = &quot;(al)G(al)()()G&quot;</span><br><span class=\"line\">输出：&quot;alGalooG&quot;</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= command.length &lt;= 100</li>\n<li>command 由 “G”、&quot;()&quot; 和 / 或 “(al)” 按某种顺序组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">interpret</span><span class=\"params\">(string command)</span> </span>&#123;</span><br><span class=\"line\">        string ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; command.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (command[i] == <span class=\"string\">&#x27;G&#x27;</span>) ans += command[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (command[i] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (command[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;)&#x27;</span>) ans += <span class=\"string\">&quot;o&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> ans += <span class=\"string\">&quot;al&quot;</span>; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/05/LeetCode/1106-%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://x-17.top/2022/11/05/LeetCode/1106-%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "1106. 解析布尔表达式",
            "date_published": "2022-11-05T03:05:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1106-解析布尔表达式\"><a class=\"markdownIt-Anchor\" href=\"#1106-解析布尔表达式\">#</a> <a href=\"https://leetcode.cn/problems/parsing-a-boolean-expression/description/\">1106. 解析布尔表达式</a></h1>\n<p>给你一个以字符串形式表述的 布尔表达式（boolean） expression，返回该式的运算结果。</p>\n<p>有效的表达式需遵循以下约定：</p>\n<ul>\n<li>“t”，运算结果为 True</li>\n<li>“f”，运算结果为 False</li>\n<li>“!(expr)”，运算过程为对内部表达式 expr 进行逻辑 非的运算（NOT）</li>\n<li>“&amp;(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 与的运算（AND）</li>\n<li>“|(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 或的运算（OR）</li>\n</ul>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：expression = &quot;!(f)&quot;</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：expression = &quot;|(f,t)&quot;</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：expression = &quot;&amp;(t,f)&quot;</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p>示例 4：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：expression = &quot;|(&amp;(t,f,t),!(t))&quot;</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= expression.length &lt;= 20000</li>\n<li>expression [i] 由 {’(’, ‘)’, ‘&amp;’, ‘|’, ‘!’, ‘t’, ‘f’, ‘,’} 中的字符组成。</li>\n<li>expression 是以上述形式给出的有效表达式，表示一个布尔值。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">parseBoolExpr</span><span class=\"params\">(string expression)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">char</span>&gt; stk;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = expression.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c = expression[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;,&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c != <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">                stk.<span class=\"built_in\">push</span>(c);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> t = <span class=\"number\">0</span>, f = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (stk.<span class=\"built_in\">top</span>() != <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> val = stk.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (val == <span class=\"string\">&#x27;t&#x27;</span>) &#123;</span><br><span class=\"line\">                        t++;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        f++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">char</span> op = stk.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (op) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;!&#x27;</span>:</span><br><span class=\"line\">                    stk.<span class=\"built_in\">push</span>(f == <span class=\"number\">1</span> ? <span class=\"string\">&#x27;t&#x27;</span> : <span class=\"string\">&#x27;f&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&amp;&#x27;</span>:</span><br><span class=\"line\">                    stk.<span class=\"built_in\">push</span>(f == <span class=\"number\">0</span> ? <span class=\"string\">&#x27;t&#x27;</span> : <span class=\"string\">&#x27;f&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;|&#x27;</span>:</span><br><span class=\"line\">                    stk.<span class=\"built_in\">push</span>(t &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;t&#x27;</span> : <span class=\"string\">&#x27;f&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stk.<span class=\"built_in\">top</span>() == <span class=\"string\">&#x27;t&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/04/LeetCode/754-%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9%E6%95%B0%E5%AD%97/",
            "url": "https://x-17.top/2022/11/04/LeetCode/754-%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9%E6%95%B0%E5%AD%97/",
            "title": "754. 到达终点数字",
            "date_published": "2022-11-04T03:51:34.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"754-到达终点数字\"><a class=\"markdownIt-Anchor\" href=\"#754-到达终点数字\">#</a> <a href=\"https://leetcode.cn/problems/reach-a-number/description/\">754. 到达终点数字</a></h1>\n<p>在一根无限长的数轴上，你站在 0 的位置。终点在 target 的位置。</p>\n<p>你可以做一些数量的移动 numMoves :</p>\n<ul>\n<li>每次你可以选择向左或向右移动。</li>\n<li>第 i 次移动（从  i == 1 开始，到 i == numMoves ），在选择的方向上走 i 步。</li>\n</ul>\n<p>给定整数 target ，返回 到达目标所需的 最小 移动次数 (即最小 numMoves) 。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: target = 2</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释:</span><br><span class=\"line\">第一次移动，从 0 到 1 。</span><br><span class=\"line\">第二次移动，从 1 到 -1 。</span><br><span class=\"line\">第三次移动，从 -1 到 2 。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: target = 3</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释:</span><br><span class=\"line\">第一次移动，从 0 到 1 。</span><br><span class=\"line\">第二次移动，从 1 到 3 。</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>$-10^9 &lt;= target &lt;= 10^9$</li>\n<li>target != 0</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">reachNumber</span><span class=\"params\">(<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        target = <span class=\"built_in\">abs</span>(target);</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (target &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            target -= k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target % <span class=\"number\">2</span> == <span class=\"number\">0</span> ? k : k + <span class=\"number\">1</span> + k % <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/03/LeetCode/1668-%E6%9C%80%E5%A4%A7%E9%87%8D%E5%A4%8D%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://x-17.top/2022/11/03/LeetCode/1668-%E6%9C%80%E5%A4%A7%E9%87%8D%E5%A4%8D%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "1668. 最大重复子字符串",
            "date_published": "2022-11-03T04:21:48.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1668-最大重复子字符串\"><a class=\"markdownIt-Anchor\" href=\"#1668-最大重复子字符串\">#</a> <a href=\"https://leetcode.cn/problems/maximum-repeating-substring/description/\">1668. 最大重复子字符串</a></h1>\n<p>给你一个字符串 sequence ，如果字符串 word 连续重复 k 次形成的字符串是 sequence 的一个子字符串，那么单词 word 的 重复值为 k 。单词 word 的 最大重复值 是单词 word 在 sequence 中最大的重复值。如果 word 不是 sequence 的子串，那么重复值 k 为 0 。</p>\n<p>给你一个字符串 sequence 和 word ，请你返回 最大重复值 k 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：sequence = &quot;ababc&quot;, word = &quot;ab&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：&quot;abab&quot; 是 &quot;ababc&quot; 的子字符串。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：sequence = &quot;ababc&quot;, word = &quot;ba&quot;</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：&quot;ba&quot; 是 &quot;ababc&quot; 的子字符串，但 &quot;baba&quot; 不是 &quot;ababc&quot; 的子字符串。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：sequence = &quot;ababc&quot;, word = &quot;ac&quot;</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：&quot;ac&quot; 不是 &quot;ababc&quot; 的子字符串。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= sequence.length &lt;= 100</li>\n<li>1 &lt;= word.length &lt;= 100</li>\n<li>sequence 和 word 都只包含小写英文字母。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxRepeating</span><span class=\"params\">(string sequence, string word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = sequence.<span class=\"built_in\">size</span>(), m = word.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fail</span><span class=\"params\">(m, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j = fail[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j != <span class=\"number\">-1</span> &amp;&amp; word[j + <span class=\"number\">1</span>] != word[i]) &#123;</span><br><span class=\"line\">                j = fail[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (word[j + <span class=\"number\">1</span>] == word[i]) &#123;</span><br><span class=\"line\">                fail[i] = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">f</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j != <span class=\"number\">-1</span> &amp;&amp; word[j + <span class=\"number\">1</span>] != sequence[i]) &#123;</span><br><span class=\"line\">                j = fail[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (word[j + <span class=\"number\">1</span>] == sequence[i]) &#123;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j == m - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    f[i] = (i &gt;= m ? f[i - m] : <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    j = fail[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"built_in\">max_element</span>(f.<span class=\"built_in\">begin</span>(), f.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (m+n)$</li>\n<li>空间复杂度：$O (m+n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/02/LeetCode/1620-%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E6%9C%80%E5%A5%BD%E7%9A%84%E5%9D%90%E6%A0%87/",
            "url": "https://x-17.top/2022/11/02/LeetCode/1620-%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E6%9C%80%E5%A5%BD%E7%9A%84%E5%9D%90%E6%A0%87/",
            "title": "1620. 网络信号最好的坐标",
            "date_published": "2022-11-02T02:14:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1620-网络信号最好的坐标\"><a class=\"markdownIt-Anchor\" href=\"#1620-网络信号最好的坐标\">#</a> <a href=\"https://leetcode.cn/problems/coordinate-with-maximum-network-quality/\">1620. 网络信号最好的坐标</a></h1>\n<p>给你一个数组 towers 和一个整数 radius 。</p>\n<p>数组  towers  中包含一些网络信号塔，其中 towers [i] = [<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mi>i</mi></msub><mi mathvariant=\"normal\">$</mi><mo stretchy=\"false\">]</mo><mtext> 表示第 </mtext><mi>i</mi><mtext> 个网络信号塔的坐标是 </mtext><mo stretchy=\"false\">(</mo></mrow><annotation encoding=\"application/x-tex\">x_i, y_i, q_i\\$] 表示第 i 个网络信号塔的坐标是 (</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">$</span><span class=\"mclose\">]</span><span class=\"mord\"> </span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord\"> </span><span class=\"mord mathnormal\">i</span><span class=\"mord\"> </span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">网</span><span class=\"mord cjk_fallback\">络</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">塔</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">坐</span><span class=\"mord cjk_fallback\">标</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord\"> </span><span class=\"mopen\">(</span></span></span></span>x_i, y_i$) 且信号强度参数为 $q_i$ 。所有坐标都是在  X-Y 坐标系内的 整数 坐标。两个坐标之间的距离用 欧几里得距离 计算。</p>\n<p>整数 radius 表示一个塔 能到达 的 最远距离 。如果一个坐标跟塔的距离在 radius 以内，那么该塔的信号可以到达该坐标。在这个范围以外信号会很微弱，所以 radius 以外的距离该塔是 不能到达的 。</p>\n<p>如果第 i 个塔能到达 (x, y) ，那么该塔在此处的信号为 ⌊$q_i$ / (1 + d)⌋ ，其中 d 是塔跟此坐标的距离。一个坐标的 信号强度 是所有 能到达 该坐标的塔的信号强度之和。</p>\n<p>请你返回数组 [<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>x</mi></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mi>y</mi></msub><mi mathvariant=\"normal\">$</mi><mo stretchy=\"false\">]</mo><mtext>，表示信号强度最大的整数坐标点 </mtext><mo stretchy=\"false\">(</mo></mrow><annotation encoding=\"application/x-tex\">c_x, c_y\\$] ，表示 信号强度 最大的 整数 坐标点 (</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">$</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">强</span><span class=\"mord cjk_fallback\">度</span><span class=\"mord cjk_fallback\">最</span><span class=\"mord cjk_fallback\">大</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">整</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">坐</span><span class=\"mord cjk_fallback\">标</span><span class=\"mord cjk_fallback\">点</span><span class=\"mord\"> </span><span class=\"mopen\">(</span></span></span></span>c_x, c_y$) 。如果有多个坐标网络信号一样大，请你返回字典序最小的 非负 坐标。</p>\n<p>注意：</p>\n<ul>\n<li>坐标 (x1, y1) 字典序比另一个坐标 (x2, y2) 小，需满足以下条件之一：\n<ul>\n<li>要么 x1 &lt; x2 ，</li>\n<li>要么 x1 == x2 且 y1 &lt; y2 。</li>\n</ul>\n</li>\n<li>⌊val⌋ 表示小于等于 val 的最大整数（向下取整函数）。</li>\n</ul>\n<p>示例 1：<br>\n<img src=\"http://img.x-17.top/leetcode/untitled-diagram.png\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2</span><br><span class=\"line\">输出：[2,1]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">坐标 (2, 1) 信号强度之和为 13</span><br><span class=\"line\"><span class=\"bullet\">-</span> 塔 (2, 1) 强度参数为 7 ，在该点强度为 ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7</span><br><span class=\"line\"><span class=\"bullet\">-</span> 塔 (1, 2) 强度参数为 5 ，在该点强度为 ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2</span><br><span class=\"line\"><span class=\"bullet\">-</span> 塔 (3, 1) 强度参数为 9 ，在该点强度为 ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4</span><br><span class=\"line\">没有别的坐标有更大的信号强度。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：towers = [[23,11,21]], radius = 9</span><br><span class=\"line\">输出：[23,11]</span><br><span class=\"line\">解释：由于仅存在一座信号塔，所以塔的位置信号强度最大。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2</span><br><span class=\"line\">输出：[1,2]</span><br><span class=\"line\">解释：坐标 (1, 2) 的信号强度最大。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= towers.length &lt;= 50</li>\n<li>towers[i].length == 3</li>\n<li>0 &lt;= $x_i, y_i, q_i$ &lt;= 50</li>\n<li>1 &lt;= radius &lt;= 50</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">bestCoordinate</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; towers, <span class=\"type\">int</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> xMax = INT_MIN, yMax = INT_MIN;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp;tower : towers) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = tower[<span class=\"number\">0</span>], y = tower[<span class=\"number\">1</span>];</span><br><span class=\"line\">            xMax = <span class=\"built_in\">max</span>(xMax, x);</span><br><span class=\"line\">            yMax = <span class=\"built_in\">max</span>(yMax, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> cx = <span class=\"number\">0</span>, cy = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxQuality = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt;= xMax; x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> y = <span class=\"number\">0</span>; y &lt;= yMax; y++) &#123;</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; coordinate = &#123;x, y&#125;;</span><br><span class=\"line\">                <span class=\"type\">int</span> quality = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp;tower : towers) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> squaredDistance = <span class=\"built_in\">getSquaredDistance</span>(coordinate, tower);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (squaredDistance &lt;= radius * radius) &#123;</span><br><span class=\"line\">                        <span class=\"type\">double</span> distance = <span class=\"built_in\">sqrt</span>((<span class=\"type\">double</span>)squaredDistance);</span><br><span class=\"line\">                        quality += <span class=\"built_in\">floor</span>((<span class=\"type\">double</span>)tower[<span class=\"number\">2</span>] / (<span class=\"number\">1</span> + distance));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (quality &gt; maxQuality) &#123;</span><br><span class=\"line\">                    cx = x;</span><br><span class=\"line\">                    cy = y;</span><br><span class=\"line\">                    maxQuality = quality;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;cx, cy&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSquaredDistance</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;coordinate, <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;tower)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (tower[<span class=\"number\">0</span>] - coordinate[<span class=\"number\">0</span>]) * (tower[<span class=\"number\">0</span>] - coordinate[<span class=\"number\">0</span>]) + (tower[<span class=\"number\">1</span>] - coordinate[<span class=\"number\">1</span>]) * (tower[<span class=\"number\">1</span>] - coordinate[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/11/01/LeetCode/1662-%E6%A3%80%E6%9F%A5%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/",
            "url": "https://x-17.top/2022/11/01/LeetCode/1662-%E6%A3%80%E6%9F%A5%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/",
            "title": "1662. 检查两个字符串数组是否相等",
            "date_published": "2022-11-01T01:21:09.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1662-检查两个字符串数组是否相等\"><a class=\"markdownIt-Anchor\" href=\"#1662-检查两个字符串数组是否相等\">#</a> <a href=\"https://leetcode.cn/problems/check-if-two-string-arrays-are-equivalent/\">1662. 检查两个字符串数组是否相等</a></h1>\n<p>给你两个字符串数组 word1 和 word2 。如果两个数组表示的字符串相同，返回 true ；否则，返回 false 。</p>\n<p>数组表示的字符串 是由数组中的所有元素 按顺序 连接形成的字符串。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word1 = [&quot;ab&quot;, &quot;c&quot;], word2 = [&quot;a&quot;, &quot;bc&quot;]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：</span><br><span class=\"line\">word1 表示的字符串为 &quot;ab&quot; + &quot;c&quot; -&gt; &quot;abc&quot;</span><br><span class=\"line\">word2 表示的字符串为 &quot;a&quot; + &quot;bc&quot; -&gt; &quot;abc&quot;</span><br><span class=\"line\">两个字符串相同，返回 true</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word1 = [&quot;a&quot;, &quot;cb&quot;], word2 = [&quot;ab&quot;, &quot;c&quot;]</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word1  = [&quot;abc&quot;, &quot;d&quot;, &quot;defg&quot;], word2 = [&quot;abcddefg&quot;]</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>$1 &lt;= word1.length, word2.length &lt;= 10^3$</li>\n<li>$1 &lt;= word1[i].length, word2[i].length &lt;= 10^3$</li>\n<li>$1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 10^3$</li>\n<li>word1 [i] 和 word2 [i] 由小写字母组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">arrayStringsAreEqual</span><span class=\"params\">(vector&lt;string&gt;&amp; word1, vector&lt;string&gt;&amp; word2)</span> </span>&#123;</span><br><span class=\"line\">        string ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; word1.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; word1[i].<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                ans += word1[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = ans.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; word2.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; word2[i].<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &lt; n &amp;&amp; word2[i][j] == ans[num]) num++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num == n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/31/LeetCode/481-%E7%A5%9E%E5%A5%87%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://x-17.top/2022/10/31/LeetCode/481-%E7%A5%9E%E5%A5%87%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "481. 神奇字符串",
            "date_published": "2022-10-31T00:40:05.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"481-神奇字符串\"><a class=\"markdownIt-Anchor\" href=\"#481-神奇字符串\">#</a> <a href=\"https://leetcode.cn/problems/magical-string/\">481. 神奇字符串</a></h1>\n<p>神奇字符串 s 仅由 ‘1’ 和 ‘2’ 组成，并需要遵守下面的规则：</p>\n<ul>\n<li>神奇字符串 s 的神奇之处在于，串联字符串中 ‘1’ 和 ‘2’ 的连续出现次数可以生成该字符串。</li>\n</ul>\n<p>s 的前几个元素是 s = “1221121221221121122……” 。如果将 s 中连续的若干 1 和 2 进行分组，可以得到 “1 22 11 2 1 22 1 22 11 2 11 22 …” 。每组中 1 或者 2 的出现次数分别是 “1 2 2 1 1 2 1 2 2 1 2 2 …” 。上面的出现次数正是 s 自身。</p>\n<p>给你一个整数 n ，返回在神奇字符串 s 的前 n 个数字中 1 的数目。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 6</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：神奇字符串 s 的前 6 个元素是 “122112”，它包含三个 1，因此返回 3 。 </span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 1</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>$1 &lt;= n &lt;= 10^5$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">magicalString</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">string <span class=\"title\">s</span><span class=\"params\">(n, <span class=\"string\">&#x27;0&#x27;</span>)</span></span>;</span><br><span class=\"line\">        s[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;1&#x27;</span>, s[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;2&#x27;</span>, s[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = s[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> num = <span class=\"number\">3</span> - (s[j - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (size &gt; <span class=\"number\">0</span> &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">                s[j] = <span class=\"string\">&#x27;0&#x27;</span> + num;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    ++res;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                --size;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/30/LeetCode/784-%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/",
            "url": "https://x-17.top/2022/10/30/LeetCode/784-%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/",
            "title": "784. 字母大小写全排列",
            "date_published": "2022-10-30T00:16:54.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"784-字母大小写全排列\"><a class=\"markdownIt-Anchor\" href=\"#784-字母大小写全排列\">#</a> <a href=\"https://leetcode.cn/problems/letter-case-permutation/\">784. 字母大小写全排列</a></h1>\n<p>给定一个字符串 s ，通过将字符串 s 中的每个字母转变大小写，我们可以获得一个新的字符串。</p>\n<p>返回 所有可能得到的字符串集合 。以 任意顺序 返回输出。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;a1b2&quot;</span><br><span class=\"line\">输出：[&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;3z4&quot;</span><br><span class=\"line\">输出: [&quot;3z4&quot;,&quot;3Z4&quot;]</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>1 &lt;= s.length &lt;= 12</li>\n<li>s 由小写英文字母、大写英文字母和数字组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">letterCasePermutation</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;string&gt; ans;</span><br><span class=\"line\">        queue&lt;string&gt; qu;</span><br><span class=\"line\">        qu.<span class=\"built_in\">emplace</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!qu.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            string &amp;curr = qu.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.<span class=\"built_in\">size</span>() == s.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                ans.<span class=\"built_in\">emplace_back</span>(curr);</span><br><span class=\"line\">                qu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> pos = curr.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">isalpha</span>(s[pos])) &#123;</span><br><span class=\"line\">                    string next = curr;</span><br><span class=\"line\">                    next.<span class=\"built_in\">push_back</span>(s[pos] ^ <span class=\"number\">32</span>);</span><br><span class=\"line\">                    qu.<span class=\"built_in\">emplace</span>(next);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                curr.<span class=\"built_in\">push_back</span>(s[pos]);                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n*2^n)$</li>\n<li>空间复杂度：$O (n*2^n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/29/LeetCode/1773-%E7%BB%9F%E8%AE%A1%E5%8C%B9%E9%85%8D%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99%E7%9A%84%E7%89%A9%E5%93%81%E6%95%B0%E9%87%8F/",
            "url": "https://x-17.top/2022/10/29/LeetCode/1773-%E7%BB%9F%E8%AE%A1%E5%8C%B9%E9%85%8D%E6%A3%80%E7%B4%A2%E8%A7%84%E5%88%99%E7%9A%84%E7%89%A9%E5%93%81%E6%95%B0%E9%87%8F/",
            "title": "1773. 统计匹配检索规则的物品数量",
            "date_published": "2022-10-29T04:15:28.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1773-统计匹配检索规则的物品数量\"><a class=\"markdownIt-Anchor\" href=\"#1773-统计匹配检索规则的物品数量\">#</a> <a href=\"https://leetcode.cn/problems/count-items-matching-a-rule/\">1773. 统计匹配检索规则的物品数量</a></h1>\n<p>给你一个数组 items ，其中 items [i] = [typei, colori, namei] ，描述第 i 件物品的类型、颜色以及名称。</p>\n<p>另给你一条由两个字符串 ruleKey 和 ruleValue 表示的检索规则。</p>\n<p>如果第 i 件物品能满足下述条件之一，则认为该物品与给定的检索规则 匹配 ：</p>\n<ul>\n<li>ruleKey == “type” 且 ruleValue == $type_i$ 。</li>\n<li>ruleKey == “color” 且 ruleValue == $color_i$ 。</li>\n<li>ruleKey == “name” 且 ruleValue == $name_i$ 。<br>\n统计并返回 匹配检索规则的物品数量 。</li>\n</ul>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：items = [[&quot;phone&quot;,&quot;blue&quot;,&quot;pixel&quot;],[&quot;computer&quot;,&quot;silver&quot;,&quot;lenovo&quot;],[&quot;phone&quot;,&quot;gold&quot;,&quot;iphone&quot;]], ruleKey = &quot;color&quot;, ruleValue = &quot;silver&quot;</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：只有一件物品匹配检索规则，这件物品是 [&quot;computer&quot;,&quot;silver&quot;,&quot;lenovo&quot;] 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：items = [[&quot;phone&quot;,&quot;blue&quot;,&quot;pixel&quot;],[&quot;computer&quot;,&quot;silver&quot;,&quot;phone&quot;],[&quot;phone&quot;,&quot;gold&quot;,&quot;iphone&quot;]], ruleKey = &quot;type&quot;, ruleValue = &quot;phone&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：只有两件物品匹配检索规则，这两件物品分别是 [&quot;phone&quot;,&quot;blue&quot;,&quot;pixel&quot;] 和 [&quot;phone&quot;,&quot;gold&quot;,&quot;iphone&quot;] 。注意，[&quot;computer&quot;,&quot;silver&quot;,&quot;phone&quot;] 未匹配检索规则。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>$1 &lt;= items.length &lt;= 10^4$</li>\n<li>$1 &lt;= type_i.length, color_i.length, name_i.length, ruleValue.length &lt;= 10$</li>\n<li>ruleKey 等于 “type”、“color” 或 “name”</li>\n<li>所有字符串仅由小写字母组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countMatches</span><span class=\"params\">(vector&lt;vector&lt;string&gt;&gt;&amp; items, string ruleKey, string ruleValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ruleKey==<span class=\"string\">&quot;type&quot;</span>)</span><br><span class=\"line\">            flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ruleKey==<span class=\"string\">&quot;color&quot;</span>)</span><br><span class=\"line\">            flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            flag=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;items.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(items[i][flag]==ruleValue)</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/28/LeetCode/907-%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E4%B9%8B%E5%92%8C/",
            "url": "https://x-17.top/2022/10/28/LeetCode/907-%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E4%B9%8B%E5%92%8C/",
            "title": "907. 子数组的最小值之和",
            "date_published": "2022-10-28T04:11:33.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"907-子数组的最小值之和\"><a class=\"markdownIt-Anchor\" href=\"#907-子数组的最小值之和\">#</a> <a href=\"https://leetcode.cn/problems/sum-of-subarray-minimums/\">907. 子数组的最小值之和</a></h1>\n<p>给定一个整数数组 arr，找到 min (b) 的总和，其中 b 的范围为 arr 的每个（连续）子数组。</p>\n<p>由于答案可能很大，因此 返回答案模 $10^9 + 7$ 。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：arr = [3,1,2,4]</span><br><span class=\"line\">输出：17</span><br><span class=\"line\">解释：</span><br><span class=\"line\">子数组为 [3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 </span><br><span class=\"line\">最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：arr = [11,81,94,43,3]</span><br><span class=\"line\">输出：444</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= arr.length &lt;= $3 * 10^4$</li>\n<li>1 &lt;= arr[i] &lt;= $3 * 10^4$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumSubarrayMins</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = arr.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; monoStack;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!monoStack.<span class=\"built_in\">empty</span>() &amp;&amp; arr[monoStack.<span class=\"built_in\">top</span>()] &gt; arr[i]) &#123;</span><br><span class=\"line\">                monoStack.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = monoStack.<span class=\"built_in\">empty</span>() ? (i + <span class=\"number\">1</span>) : (i - monoStack.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">            dp[i] = k * arr[i] + (monoStack.<span class=\"built_in\">empty</span>() ? <span class=\"number\">0</span> : dp[i - k]);</span><br><span class=\"line\">            ans = (ans + dp[i]) % mod;</span><br><span class=\"line\">            monoStack.<span class=\"built_in\">emplace</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/27/LeetCode/1822-%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%A7%AF%E7%9A%84%E7%AC%A6%E5%8F%B7/",
            "url": "https://x-17.top/2022/10/27/LeetCode/1822-%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%A7%AF%E7%9A%84%E7%AC%A6%E5%8F%B7/",
            "title": "1822. 数组元素积的符号",
            "date_published": "2022-10-27T08:02:11.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1822-数组元素积的符号\"><a class=\"markdownIt-Anchor\" href=\"#1822-数组元素积的符号\">#</a> <a href=\"https://leetcode.cn/problems/sign-of-the-product-of-an-array/\">1822. 数组元素积的符号</a></h1>\n<p>已知函数 signFunc (x) 将会根据 x 的正负返回特定值：</p>\n<p>如果 x 是正数，返回 1 。<br>\n如果 x 是负数，返回 -1 。<br>\n如果 x 是等于 0 ，返回 0 。<br>\n给你一个整数数组 nums 。令 product 为数组 nums 中所有元素值的乘积。</p>\n<p>返回 signFunc (product) 。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [-1,-2,-3,-4,3,2,1]</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：数组中所有值的乘积是 144 ，且 signFunc(144) = 1</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,5,0,2,-3]</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：数组中所有值的乘积是 0 ，且 signFunc(0) = 0</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [-1,1,-1,1,-1]</span><br><span class=\"line\">输出：-1</span><br><span class=\"line\">解释：数组中所有值的乘积是 -1 ，且 signFunc(-1) = -1</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= 1000</li>\n<li>-100 &lt;= nums[i] &lt;= 100</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">iszero</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span>?<span class=\"number\">1</span>:n==<span class=\"number\">0</span>?<span class=\"number\">0</span>:<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">arraySign</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> num:nums)&#123;</span><br><span class=\"line\">            ans*=<span class=\"built_in\">iszero</span>(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/26/LeetCode/862-%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-K-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/",
            "url": "https://x-17.top/2022/10/26/LeetCode/862-%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-K-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/",
            "title": "862. 和至少为 K 的最短子数组",
            "date_published": "2022-10-26T04:04:54.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"862-和至少为-k-的最短子数组\"><a class=\"markdownIt-Anchor\" href=\"#862-和至少为-k-的最短子数组\">#</a> <a href=\"https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/\">862. 和至少为 K 的最短子数组</a></h1>\n<p>给你一个整数数组 nums 和一个整数 k ，找出 nums 中和至少为 k 的 最短非空子数组 ，并返回该子数组的长度。如果不存在这样的 子数组 ，返回 -1 。</p>\n<p>子数组 是数组中 连续 的一部分。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1], k = 1</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2], k = 4</span><br><span class=\"line\">输出：-1</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,-1,2], k = 3</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= $10^5$</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">-10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span> &lt;= nums[i] &lt;= $10^5$</li>\n<li>1 &lt;= k &lt;= $10^9$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">shortestSubarray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">long</span>&gt; <span class=\"title\">preSumArr</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            preSumArr[i + <span class=\"number\">1</span>] = preSumArr[i] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        deque&lt;<span class=\"type\">int</span>&gt; qu;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> curSum = preSumArr[i];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!qu.<span class=\"built_in\">empty</span>() &amp;&amp; curSum - preSumArr[qu.<span class=\"built_in\">front</span>()] &gt;= k) &#123;</span><br><span class=\"line\">                res = <span class=\"built_in\">min</span>(res, i - qu.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">                qu.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!qu.<span class=\"built_in\">empty</span>() &amp;&amp; preSumArr[qu.<span class=\"built_in\">back</span>()] &gt;= curSum) &#123;</span><br><span class=\"line\">                qu.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            qu.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res &lt; n + <span class=\"number\">1</span> ? res : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/25/LeetCode/934-%E6%9C%80%E7%9F%AD%E7%9A%84%E6%A1%A5/",
            "url": "https://x-17.top/2022/10/25/LeetCode/934-%E6%9C%80%E7%9F%AD%E7%9A%84%E6%A1%A5/",
            "title": "934. 最短的桥",
            "date_published": "2022-10-25T01:36:49.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"934-最短的桥\"><a class=\"markdownIt-Anchor\" href=\"#934-最短的桥\">#</a> <a href=\"https://leetcode.cn/problems/shortest-bridge/\">934. 最短的桥</a></h1>\n<p>给你一个大小为 n x n 的二元矩阵 grid ，其中 1 表示陆地，0 表示水域。</p>\n<p>岛 是由四面相连的 1 形成的一个最大组，即不会与非组内的任何其他 1 相连。grid 中 恰好存在两座岛 。</p>\n<p>你可以将任意数量的 0 变为 1 ，以使两座岛连接起来，变成 一座岛 。</p>\n<p>返回必须翻转的 0 的最小数目。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：grid = [[0,1],[1,0]]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：grid = [[0,1,0],[0,0,0],[0,0,1]]</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>n == grid.length == grid[i].length</li>\n<li>2 &lt;= n &lt;= 100</li>\n<li>grid [i][j] 为 0 或 1</li>\n<li>grid 中恰有两个岛</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">shortestBridge</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = grid.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; dirs = &#123;&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;&#125;;</span><br><span class=\"line\">        vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; island;</span><br><span class=\"line\">        queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; qu;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    qu.<span class=\"built_in\">emplace</span>(i, j);</span><br><span class=\"line\">                    grid[i][j] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!qu.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">auto</span> [x, y] = qu.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                        qu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                        island.<span class=\"built_in\">emplace_back</span>(x, y);</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> nx = x + dirs[k][<span class=\"number\">0</span>];</span><br><span class=\"line\">                            <span class=\"type\">int</span> ny = y + dirs[k][<span class=\"number\">1</span>];</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                qu.<span class=\"built_in\">emplace</span>(nx, ny);</span><br><span class=\"line\">                                grid[nx][ny] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp;[x, y] : island) &#123;</span><br><span class=\"line\">                        qu.<span class=\"built_in\">emplace</span>(x, y);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">int</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!qu.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> sz = qu.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; i++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">auto</span> [x, y] = qu.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                            qu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">                                <span class=\"type\">int</span> nx = x + dirs[k][<span class=\"number\">0</span>];</span><br><span class=\"line\">                                <span class=\"type\">int</span> ny = y + dirs[k][<span class=\"number\">1</span>];</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; n) &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (grid[nx][ny] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                        qu.<span class=\"built_in\">emplace</span>(nx, ny);</span><br><span class=\"line\">                                        grid[nx][ny] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grid[nx][ny] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">return</span> step;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        step++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n^2)$</li>\n<li>空间复杂度：$O (n^2)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/24/LeetCode/915-%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84/",
            "url": "https://x-17.top/2022/10/24/LeetCode/915-%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84/",
            "title": "915. 分割数组",
            "date_published": "2022-10-24T02:45:33.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"915-分割数组\"><a class=\"markdownIt-Anchor\" href=\"#915-分割数组\">#</a> <a href=\"https://leetcode.cn/problems/partition-array-into-disjoint-intervals/\">915. 分割数组</a></h1>\n<p>给定一个数组 nums ，将其划分为两个连续子数组 left 和 right， 使得：</p>\n<p>left 中的每个元素都小于或等于 right 中的每个元素。<br>\nleft 和 right 都是非空的。<br>\nleft 的长度要尽可能小。<br>\n在完成这样的分组后返回 left 的 长度 。</p>\n<p>用例可以保证存在这样的划分方法。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,0,3,8,6]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：left = [5,0,3]，right = [8,6]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,1,1,0,6,12]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：left = [1,1,1,0]，right = [6,12]</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>2 &lt;= nums.length &lt;= $10^5$</li>\n<li>0 &lt;= nums[i] &lt;= $10^6$</li>\n<li>可以保证至少有一种方法能够按题目所描述的那样对 nums 进行划分。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">partitionDisjoint</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ma</span><span class=\"params\">(nums.size()+<span class=\"number\">2</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mi</span><span class=\"params\">(nums.size()+<span class=\"number\">2</span>,<span class=\"number\">100000000</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            ma[i+<span class=\"number\">1</span>]=<span class=\"built_in\">max</span>(nums[i],ma[i]);</span><br><span class=\"line\">            mi[nums.<span class=\"built_in\">size</span>()-i]=<span class=\"built_in\">min</span>(nums[nums.<span class=\"built_in\">size</span>()-i<span class=\"number\">-1</span>],mi[nums.<span class=\"built_in\">size</span>()-i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=nums.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ma[i]&lt;=mi[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/23/LeetCode/1768-%E4%BA%A4%E6%9B%BF%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://x-17.top/2022/10/23/LeetCode/1768-%E4%BA%A4%E6%9B%BF%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "1768. 交替合并字符串",
            "date_published": "2022-10-23T04:29:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1768-交替合并字符串\"><a class=\"markdownIt-Anchor\" href=\"#1768-交替合并字符串\">#</a> <a href=\"https://leetcode.cn/problems/merge-strings-alternately/\">1768. 交替合并字符串</a></h1>\n<p>给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p>\n<p>返回 合并后的字符串 。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word1 = &quot;abc&quot;, word2 = &quot;pqr&quot;</span><br><span class=\"line\">输出：&quot;apbqcr&quot;</span><br><span class=\"line\">解释：字符串合并情况如下所示：</span><br><span class=\"line\">word1：  a   b   c</span><br><span class=\"line\">word2：    p   q   r</span><br><span class=\"line\">合并后：  a p b q c r</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word1 = &quot;ab&quot;, word2 = &quot;pqrs&quot;</span><br><span class=\"line\">输出：&quot;apbqrs&quot;</span><br><span class=\"line\">解释：注意，word2 比 word1 长，&quot;rs&quot; 需要追加到合并后字符串的末尾。</span><br><span class=\"line\">word1：  a   b </span><br><span class=\"line\">word2：    p   q   r   s</span><br><span class=\"line\">合并后：  a p b q   r   s</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：word1 = &quot;abcd&quot;, word2 = &quot;pq&quot;</span><br><span class=\"line\">输出：&quot;apbqcd&quot;</span><br><span class=\"line\">解释：注意，word1 比 word2 长，&quot;cd&quot; 需要追加到合并后字符串的末尾。</span><br><span class=\"line\">word1：  a   b   c   d</span><br><span class=\"line\">word2：    p   q </span><br><span class=\"line\">合并后：  a p b q c   d</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= word1.length, word2.length &lt;= 100</li>\n<li>word1 和 word2 由小写英文字母组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">mergeAlternately</span><span class=\"params\">(string word1, string word2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        string ans=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;word1.<span class=\"built_in\">size</span>()||j&lt;word2.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&lt;word2.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">                    ans+=word2[j];</span><br><span class=\"line\">                    j++;</span><br><span class=\"line\">                    flag=<span class=\"number\">1</span>-flag;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    ans+=word1[i];</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&lt;word1.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">                    ans+=word1[i];</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                    flag=<span class=\"number\">1</span>-flag;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    ans+=word2[j];</span><br><span class=\"line\">                    j++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (m+n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/22/LeetCode/1235-%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/",
            "url": "https://x-17.top/2022/10/22/LeetCode/1235-%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/",
            "title": "1235. 规划兼职工作",
            "date_published": "2022-10-22T00:35:21.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1235-规划兼职工作\"><a class=\"markdownIt-Anchor\" href=\"#1235-规划兼职工作\">#</a> <a href=\"https://leetcode.cn/problems/maximum-profit-in-job-scheduling/\">1235. 规划兼职工作</a></h1>\n<p>你打算利用空闲时间来做兼职工作赚些零花钱。</p>\n<p>这里有 n 份兼职工作，每份工作预计从 startTime [i] 开始到 endTime [i] 结束，报酬为 profit [i]。</p>\n<p>给你一份兼职工作表，包含开始时间 startTime，结束时间 endTime 和预计报酬 profit 三个数组，请你计算并返回可以获得的最大报酬。</p>\n<p>注意，时间上出现重叠的 2 份工作不能同时进行。</p>\n<p>如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。</p>\n<p></p>\n<p>示例 1：</p>\n<p><img src=\"http://img.x-17.top/leetcode/sample1_1584.png\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]</span><br><span class=\"line\">输出：120</span><br><span class=\"line\">解释：</span><br><span class=\"line\">我们选出第 1 份和第 4 份工作， </span><br><span class=\"line\">时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<p><img src=\"http://img.x-17.top/leetcode/sample22_1584.png\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]</span><br><span class=\"line\">输出：150</span><br><span class=\"line\">解释：</span><br><span class=\"line\">我们选择第 1，4，5 份工作。 </span><br><span class=\"line\">共获得报酬 150 = 20 + 70 + 60。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<p><img src=\"http://img.x-17.top/leetcode/sample3_1584.png\" alt=\"\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]</span><br><span class=\"line\">输出：6</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= startTime.length == endTime.length == profit.length &lt;= $5 * 10^4$</li>\n<li>1 &lt;= startTime[i] &lt; endTime[i] &lt;= $10^9$</li>\n<li>1 &lt;= profit[i] &lt;= $10^4$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">jobScheduling</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;startTime, vector&lt;<span class=\"type\">int</span>&gt; &amp;endTime, vector&lt;<span class=\"type\">int</span>&gt; &amp;profit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = startTime.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">jobs</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            jobs[i] = &#123;startTime[i], endTime[i], profit[i]&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(jobs.<span class=\"built_in\">begin</span>(), jobs.<span class=\"built_in\">end</span>(), [](<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;job1, <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;job2) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> job1[<span class=\"number\">1</span>] &lt; job2[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = <span class=\"built_in\">upper_bound</span>(jobs.<span class=\"built_in\">begin</span>(), jobs.<span class=\"built_in\">begin</span>() + i - <span class=\"number\">1</span>, jobs[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>], [&amp;](<span class=\"type\">int</span> st, <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;job) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> st &lt; job[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;) - jobs.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>], dp[k] + jobs[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (nlogn)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/21/LeetCode/901-%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/",
            "url": "https://x-17.top/2022/10/21/LeetCode/901-%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/",
            "title": "901. 股票价格跨度",
            "date_published": "2022-10-21T00:37:37.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"901-股票价格跨度\"><a class=\"markdownIt-Anchor\" href=\"#901-股票价格跨度\">#</a> <a href=\"https://leetcode.cn/problems/online-stock-span/\">901. 股票价格跨度</a></h1>\n<p>编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p>\n<p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p>\n<p>例如，如果未来 7 天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。</p>\n<p></p>\n<p>示例：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]]</span><br><span class=\"line\">输出：[null,1,1,1,2,1,4,6]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">首先，初始化 S = StockSpanner()，然后：</span><br><span class=\"line\">S.next(100) 被调用并返回 1，</span><br><span class=\"line\">S.next(80) 被调用并返回 1，</span><br><span class=\"line\">S.next(60) 被调用并返回 1，</span><br><span class=\"line\">S.next(70) 被调用并返回 2，</span><br><span class=\"line\">S.next(60) 被调用并返回 1，</span><br><span class=\"line\">S.next(75) 被调用并返回 4，</span><br><span class=\"line\">S.next(85) 被调用并返回 6。</span><br><span class=\"line\"></span><br><span class=\"line\">注意 (例如) S.next(75) 返回 4，因为截至今天的最后 4 个价格</span><br><span class=\"line\">(包括今天的价格 75) 小于或等于今天的价格。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>调用 StockSpanner.next (int price) 时，将有 1 &lt;= price &lt;= $10^5$。</li>\n<li>每个测试用例最多可以调用  10000 次 StockSpanner.next。</li>\n<li>在所有测试用例中，最多调用 150000 次 StockSpanner.next。</li>\n<li>此问题的总时间限制减少了 50%。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StockSpanner</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">StockSpanner</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;stk.<span class=\"built_in\">emplace</span>(<span class=\"number\">-1</span>, INT_MAX);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;idx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"type\">int</span> price)</span> </span>&#123;</span><br><span class=\"line\">        idx++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (price &gt;= stk.<span class=\"built_in\">top</span>().second) &#123;</span><br><span class=\"line\">            stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = idx - stk.<span class=\"built_in\">top</span>().first;</span><br><span class=\"line\">        stk.<span class=\"built_in\">emplace</span>(idx, price);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    stack&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; stk; </span><br><span class=\"line\">    <span class=\"type\">int</span> idx;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/20/LeetCode/779-%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/",
            "url": "https://x-17.top/2022/10/20/LeetCode/779-%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/",
            "title": "779. 第K个语法符号",
            "date_published": "2022-10-20T00:00:20.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"779-第k个语法符号\"><a class=\"markdownIt-Anchor\" href=\"#779-第k个语法符号\">#</a> <a href=\"https://leetcode.cn/problems/k-th-symbol-in-grammar/\">779. 第 K 个语法符号</a></h1>\n<p>我们构建了一个包含 n 行 ( 索引从 1  开始 ) 的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的 0 替换为 01，1 替换为 10。</p>\n<ul>\n<li>例如，对于 n = 3 ，第 1 行是 0 ，第 2 行是 01 ，第 3 行是 0110 。</li>\n</ul>\n<p>给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 1, k = 1</span><br><span class=\"line\">输出: 0</span><br><span class=\"line\">解释: 第一行：0</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 2, k = 1</span><br><span class=\"line\">输出: 0</span><br><span class=\"line\">解释: </span><br><span class=\"line\">第一行: 0 </span><br><span class=\"line\">第二行: 01</span><br></pre></td></tr></table></figure>\n<p>示例 3:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 2, k = 2</span><br><span class=\"line\">输出: 1</span><br><span class=\"line\">解释:</span><br><span class=\"line\">第一行: 0</span><br><span class=\"line\">第二行: 01</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>1 &lt;= n &lt;= 30</li>\n<li>1 &lt;= k &lt;= $2^n - 1$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>这道题和腾讯笔试题很像。<br>\n本质上每一次操作都是在上一行基础上添加其按位取反后的结果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kthGrammar</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            k &amp;= k - <span class=\"number\">1</span>;</span><br><span class=\"line\">            res ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (logk)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/19/LeetCode/1700-%E6%97%A0%E6%B3%95%E5%90%83%E5%8D%88%E9%A4%90%E7%9A%84%E5%AD%A6%E7%94%9F%E6%95%B0%E9%87%8F/",
            "url": "https://x-17.top/2022/10/19/LeetCode/1700-%E6%97%A0%E6%B3%95%E5%90%83%E5%8D%88%E9%A4%90%E7%9A%84%E5%AD%A6%E7%94%9F%E6%95%B0%E9%87%8F/",
            "title": "1700. 无法吃午餐的学生数量",
            "date_published": "2022-10-19T00:03:42.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1700-无法吃午餐的学生数量\"><a class=\"markdownIt-Anchor\" href=\"#1700-无法吃午餐的学生数量\">#</a> <a href=\"https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/\">1700. 无法吃午餐的学生数量</a></h1>\n<p>学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>\n餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p>\n<ul>\n<li>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。</li>\n<li>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>\n这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</li>\n</ul>\n<p>给你两个整数数组 students 和 sandwiches ，其中 sandwiches [i] 是栈里面第 i​​​​​​ 个三明治的类型（i = 0 是栈的顶部）， students [j] 是初始队列里第 j​​​​​​ 名学生对三明治的喜好（j = 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：students = [1,1,0,0], sandwiches = [0,1,0,1]</span><br><span class=\"line\">输出：0 </span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,0,0,1]。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,0,1,1]。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [0,1,1]，三明治栈为 sandwiches = [1,0,1]。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,1,0]。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1,0]，三明治栈为 sandwiches = [0,1]。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,1]。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1]，三明治栈为 sandwiches = [1]。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = []，三明治栈为 sandwiches = []。</span><br><span class=\"line\">所以所有学生都有三明治吃。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= students.length, sandwiches.length &lt;= 100</li>\n<li>students.length == sandwiches.length</li>\n<li>sandwiches [i] 要么是 0 ，要么是 1 。</li>\n<li>students [i] 要么是 0 ，要么是 1 。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>根据题意模拟即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countStudents</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; students, vector&lt;<span class=\"type\">int</span>&gt;&amp; sandwiches)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a[<span class=\"number\">2</span>]=&#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;students.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            a[students[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sandwiches.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[sandwiches[i]])&#123;</span><br><span class=\"line\">                a[sandwiches[i]]--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[<span class=\"number\">0</span>]+a[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/18/LeetCode/902-%E6%9C%80%E5%A4%A7%E4%B8%BA-N-%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/",
            "url": "https://x-17.top/2022/10/18/LeetCode/902-%E6%9C%80%E5%A4%A7%E4%B8%BA-N-%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/",
            "title": "902. 最大为 N 的数字组合",
            "date_published": "2022-10-17T23:58:48.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"902-最大为-n-的数字组合\"><a class=\"markdownIt-Anchor\" href=\"#902-最大为-n-的数字组合\">#</a> <a href=\"https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/\">902. 最大为 N 的数字组合</a></h1>\n<p>给定一个按 非递减顺序 排列的数字数组 digits 。你可以用任意次数 digits [i] 来写的数字。例如，如果 digits = [‘1’,‘3’,‘5’]，我们可以写数字，如 ‘13’, ‘551’, 和 ‘1351315’。</p>\n<p>返回 可以生成的小于或等于给定整数 n 的正整数的个数 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：digits = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], n = 100</span><br><span class=\"line\">输出：20</span><br><span class=\"line\">解释：</span><br><span class=\"line\">可写出的 20 个数字是：</span><br><span class=\"line\">1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：digits = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], n = 1000000000</span><br><span class=\"line\">输出：29523</span><br><span class=\"line\">解释：</span><br><span class=\"line\">我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，</span><br><span class=\"line\">81 个四位数字，243 个五位数字，729 个六位数字，</span><br><span class=\"line\">2187 个七位数字，6561 个八位数字和 19683 个九位数字。</span><br><span class=\"line\">总共，可以使用D中的数字写出 29523 个整数。</span><br></pre></td></tr></table></figure>\n<p>示例 3:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：digits = [&quot;7&quot;], n = 8</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= digits.length &lt;= 9</li>\n<li>digits[i].length == 1</li>\n<li>digits [i] 是从 ‘1’ 到 ‘9’ 的数</li>\n<li>digits 中的所有值都 不同</li>\n<li>digits 按 非递减顺序 排列</li>\n<li>1 &lt;= n &lt;= $10^9$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>数位 DP</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">atMostNGivenDigitSet</span><span class=\"params\">(vector&lt;string&gt;&amp; digits, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        string s = <span class=\"built_in\">to_string</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> m = digits.<span class=\"built_in\">size</span>(), k = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(k + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (digits[j][<span class=\"number\">0</span>] == s[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    dp[i][<span class=\"number\">1</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (digits[j][<span class=\"number\">0</span>] &lt; s[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    dp[i][<span class=\"number\">0</span>] += dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                dp[i][<span class=\"number\">0</span>] += m + dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] * m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[k][<span class=\"number\">0</span>] + dp[k][<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：$O (klogn)$</li>\n<li>空间复杂度：$O (logn)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/17/LeetCode/904-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/",
            "url": "https://x-17.top/2022/10/17/LeetCode/904-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/",
            "title": "904. 水果成篮",
            "date_published": "2022-10-16T23:32:21.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"904-水果成篮\"><a class=\"markdownIt-Anchor\" href=\"#904-水果成篮\">#</a> <a href=\"https://leetcode.cn/problems/fruit-into-baskets/\">904. 水果成篮</a></h1>\n<p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits [i] 是第 i 棵树上的水果 种类 。</p>\n<p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p>\n<p>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。<br>\n你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>\n一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>\n给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：fruits = [1,2,1]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：可以采摘全部 3 棵树。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：fruits = [0,1,2,2]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：可以采摘 [1,2,2] 这三棵树。</span><br><span class=\"line\">如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：fruits = [1,2,3,2,2]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：可以采摘 [2,3,2,2] 这四棵树。</span><br><span class=\"line\">如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。</span><br></pre></td></tr></table></figure>\n<p>示例 4：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]</span><br><span class=\"line\">输出：5</span><br><span class=\"line\">解释：可以采摘 [1,2,1,1,2] 这五棵树。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>$1 &lt;= fruits.length &lt;= 10^5$</li>\n<li>$0 &lt;= fruits[i] &lt; fruits.length$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>滑动窗口加哈希表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">totalFruit</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = fruits.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; n; ++right) &#123;</span><br><span class=\"line\">            ++cnt[fruits[right]];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cnt.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = cnt.<span class=\"built_in\">find</span>(fruits[left]);</span><br><span class=\"line\">                --it-&gt;second;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it-&gt;second == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    cnt.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ++left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/16/LeetCode/886-%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95/",
            "url": "https://x-17.top/2022/10/16/LeetCode/886-%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95/",
            "title": "886. 可能的二分法",
            "date_published": "2022-10-16T00:18:27.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"886-可能的二分法\"><a class=\"markdownIt-Anchor\" href=\"#886-可能的二分法\">#</a> <a href=\"https://leetcode.cn/problems/possible-bipartition/https://leetcode.cn/problems/possible-bipartition/\">886. 可能的二分法</a></h1>\n<p>给定一组 n 人（编号为 1, 2, …, n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p>\n<p>给定整数 n 和数组 dislikes ，其中 dislikes [i] = [ai, bi] ，表示不允许将编号为 ai 和  bi 的人归入同一组。当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 4, dislikes = [[1,2],[1,3],[2,4]]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：group1 [1,4], group2 [2,3]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 3, dislikes = [[1,2],[1,3],[2,3]]</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= n &lt;= 2000</li>\n<li>0 &lt;= dislikes.length &lt;= $10^4$</li>\n<li>dislikes[i].length == 2</li>\n<li>1 &lt;= dislikes[i][j] &lt;= n</li>\n<li>ai &lt; bi</li>\n<li>dislikes 中每一组都 不同</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>染色法加深搜</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> curnode, <span class=\"type\">int</span> nowcolor, vector&lt;<span class=\"type\">int</span>&gt;&amp; color, <span class=\"type\">const</span> vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; g)</span> </span>&#123;</span><br><span class=\"line\">        color[curnode] = nowcolor;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; nextnode : g[curnode]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (color[nextnode] &amp;&amp; color[nextnode] == color[curnode]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!color[nextnode] &amp;&amp; !<span class=\"built_in\">dfs</span>(nextnode, <span class=\"number\">3</span> ^ nowcolor, color, g)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">possibleBipartition</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; dislikes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">color</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">g</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; p : dislikes) &#123;</span><br><span class=\"line\">            g[p[<span class=\"number\">0</span>]].<span class=\"built_in\">push_back</span>(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            g[p[<span class=\"number\">1</span>]].<span class=\"built_in\">push_back</span>(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (color[i] == <span class=\"number\">0</span> &amp;&amp; !<span class=\"built_in\">dfs</span>(i, <span class=\"number\">1</span>, color, g)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n+m)$</li>\n<li>空间复杂度：$O (n+m)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/15/LeetCode/1441-%E7%94%A8%E6%A0%88%E6%93%8D%E4%BD%9C%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/",
            "url": "https://x-17.top/2022/10/15/LeetCode/1441-%E7%94%A8%E6%A0%88%E6%93%8D%E4%BD%9C%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/",
            "title": "1441. 用栈操作构建数组",
            "date_published": "2022-10-15T00:10:19.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1441-用栈操作构建数组\"><a class=\"markdownIt-Anchor\" href=\"#1441-用栈操作构建数组\">#</a> <a href=\"https://leetcode.cn/problems/build-an-array-with-stack-operations/\">1441. 用栈操作构建数组</a></h1>\n<p>给你一个数组 target 和一个整数 n。每次迭代，需要从  list = {1 , 2 , 3 …, n} 中依次读取一个数字。</p>\n<p>请使用下述操作来构建目标数组 target ：</p>\n<ul>\n<li>“Push”：从 list 中读取一个新元素， 并将其推入数组中。</li>\n<li>“Pop”：删除数组中的最后一个元素。</li>\n<li>如果目标数组构建完成，就停止读取更多元素。<br>\n题目数据保证目标数组严格递增，并且只包含 1 到 n 之间的数字。</li>\n</ul>\n<p>请返回构建目标数组所用的操作序列。如果存在多个可行方案，返回任一即可。</p>\n<p></p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：target = [1,3], n = 3</span><br><span class=\"line\">输出：[&quot;Push&quot;,&quot;Push&quot;,&quot;Pop&quot;,&quot;Push&quot;]</span><br><span class=\"line\">解释： </span><br><span class=\"line\">读取 1 并自动推入数组 -&gt; [1]</span><br><span class=\"line\">读取 2 并自动推入数组，然后删除它 -&gt; [1]</span><br><span class=\"line\">读取 3 并自动推入数组 -&gt; [1,3]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：target = [1,2,3], n = 3</span><br><span class=\"line\">输出：[&quot;Push&quot;,&quot;Push&quot;,&quot;Push&quot;]</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：target = [1,2], n = 4</span><br><span class=\"line\">输出：[&quot;Push&quot;,&quot;Push&quot;]</span><br><span class=\"line\">解释：只需要读取前 2 个数字就可以停止。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= target.length &lt;= 100</li>\n<li>1 &lt;= n &lt;= 100</li>\n<li>1 &lt;= target[i] &lt;= n</li>\n<li>target 严格递增</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>这道题其实就是模拟压栈出栈操作，使得一个从 1 到 n 的递增序列最终成为在栈中的 target 序列。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">buildArray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; target, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;string&gt; ans;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;target.<span class=\"built_in\">size</span>();)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target[i]==flag)&#123;</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(<span class=\"string\">&quot;Push&quot;</span>);</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(<span class=\"string\">&quot;Push&quot;</span>);</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(<span class=\"string\">&quot;Pop&quot;</span>);</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/14/LeetCode/940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97-II/",
            "url": "https://x-17.top/2022/10/14/LeetCode/940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97-II/",
            "title": "940. 不同的子序列 II",
            "date_published": "2022-10-14T00:30:40.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"940-不同的子序列-ii\"><a class=\"markdownIt-Anchor\" href=\"#940-不同的子序列-ii\">#</a> <a href=\"https://leetcode.cn/problems/distinct-subsequences-ii/\">940. 不同的子序列 II</a></h1>\n<p>给定一个字符串 s，计算 s 的 不同非空子序列 的个数。因为结果可能很大，所以返回答案需要对 $10^9 + 7$ 取余 。</p>\n<p>字符串的 子序列 是经由原字符串删除一些（也可能不删除）字符但不改变剩余字符相对位置的一个新字符串。</p>\n<ul>\n<li>例如，“ace” 是 “abcde” 的一个子序列，但 “aec” 不是。</li>\n</ul>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abc&quot;</span><br><span class=\"line\">输出：7</span><br><span class=\"line\">解释：7 个不同的子序列分别是 &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, 以及 &quot;abc&quot;。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;aba&quot;</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：6 个不同的子序列分别是 &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; 以及 &quot;aba&quot;。</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;aaa&quot;</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：3 个不同的子序列分别是 &quot;a&quot;, &quot;aa&quot; 以及 &quot;aaa&quot;。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= s.length &lt;= 2000</li>\n<li>s 仅由小写英文字母组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>这题用到了动态规划，我们可以用一个长度为 26 的数组存储每一个字母位于末位时含有的不重复子序列个数，最初我们将其初始化为 0，对于第 i 位的字母，以它为最后一位的子序列数就是其前缀的不重复子序列数量 + 1 个，而这其中重复的子序列个数，就是我们存储的这个字母前一次为子序列最后一位时不重复子序列的个数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">distinctSubseqII</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">g</span><span class=\"params\">(<span class=\"number\">26</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">length</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> m=s[i]-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> n=g[m];</span><br><span class=\"line\">            g[m]=ans+<span class=\"number\">1</span>;</span><br><span class=\"line\">            ans=((ans+g[m]-n)%(<span class=\"type\">int</span>)(<span class=\"number\">1e9</span>+<span class=\"number\">7</span>)+(<span class=\"type\">int</span>)(<span class=\"number\">1e9</span>+<span class=\"number\">7</span>))%(<span class=\"type\">int</span>)(<span class=\"number\">1e9</span>+<span class=\"number\">7</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：$O (n+|\\sum|)$</li>\n<li>空间复杂度：$O (|\\sum|)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/13/LeetCode/769-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/",
            "url": "https://x-17.top/2022/10/13/LeetCode/769-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/",
            "title": "769. 最多能完成排序的块",
            "date_published": "2022-10-12T23:37:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"769-最多能完成排序的块\"><a class=\"markdownIt-Anchor\" href=\"#769-最多能完成排序的块\">#</a> <a href=\"https://leetcode.cn/problems/max-chunks-to-make-sorted/\">769. 最多能完成排序的块</a></h1>\n<p>给定一个长度为 n 的整数数组 arr ，它表示在 [0, n - 1] 范围内的整数的排列。</p>\n<p>我们将 arr 分割成若干 块 (即分区)，并对每个块单独排序。将它们连接起来后，使得连接的结果和按升序排序后的原数组相同。</p>\n<p>返回数组能分成的最多块数量。</p>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: arr = [4,3,2,1,0]</span><br><span class=\"line\">输出: 1</span><br><span class=\"line\">解释:</span><br><span class=\"line\">将数组分成2块或者更多块，都无法得到所需的结果。</span><br><span class=\"line\">例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: arr = [1,0,2,3,4]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释:</span><br><span class=\"line\">我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。</span><br><span class=\"line\">然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>n == arr.length</li>\n<li>1 &lt;= n &lt;= 10</li>\n<li>0 &lt;= arr[i] &lt; n</li>\n<li>arr 中每个元素都 不同</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>其实只要理解题意，这道题很简单，无非就是要我们依次找出数组前缀排序后与原数组排序后相同；又因为数组中的数为 [0,n-1] 并且只有 n 个数，那么一定不会重复；因此我们只需要找出当前前缀最大值和前缀最后一位下标是否相等即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxChunksToSorted</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            m=<span class=\"built_in\">max</span>(arr[i],m);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m==i)&#123;</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/12/LeetCode/817-%E9%93%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/",
            "url": "https://x-17.top/2022/10/12/LeetCode/817-%E9%93%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/",
            "title": "817. 链表组件",
            "date_published": "2022-10-11T23:47:40.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"817-链表组件\"><a class=\"markdownIt-Anchor\" href=\"#817-链表组件\">#</a> <a href=\"https://leetcode.cn/problems/linked-list-components/\">817. 链表组件</a></h1>\n<p>给定链表头结点  <code>head</code> ，该链表上的每个结点都有一个 唯一的整型值 。同时给定列表  <code>nums</code> ，该列表是上述链表中整型值的一个子集。</p>\n<p>返回列表  <code>nums</code>  中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表  <code>nums</code>  中）构成的集合。</p>\n<p></p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom1.jpg\" alt=\"\"></p>\n<p>输入: head = [0,1,2,3], nums = [0,1,3]<br>\n 输出: 2<br>\n 解释：链表中，0 和 1 是相连接的，且 nums 中不包含 2，所以 [0, 1] 是 nums 的一个组件，同理 [3] 也是一个组件，故返回 2。<br>\n示例 2：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom2.jpg\" alt=\"\"></p>\n<p>输入: head = [0,1,2,3,4], nums = [0,3,1,4]<br>\n 输出: 2<br>\n 解释：链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</p>\n<p>提示：</p>\n<ul>\n<li>链表中节点数为 n</li>\n<li>1 &lt;= n &lt;= 104</li>\n<li>0 &lt;= Node.val &lt; n</li>\n<li>Node.val 中所有值 不同</li>\n<li>1 &lt;= nums.length &lt;= n</li>\n<li>0 &lt;= nums[i] &lt; n</li>\n<li>nums 中所有值 不同</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>根据题意，我们只需要找出数组中的 在链表中是连续的数 的组数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numComponents</span><span class=\"params\">(ListNode* head, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            m.<span class=\"built_in\">emplace</span>(nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag&amp;&amp;m.<span class=\"built_in\">count</span>(head-&gt;val))&#123;</span><br><span class=\"line\">                flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">                head=head-&gt;next;</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!flag&amp;&amp;m.<span class=\"built_in\">count</span>(head-&gt;val))&#123;</span><br><span class=\"line\">                head=head-&gt;next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                head=head-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (m)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/11/LeetCode/1790-%E4%BB%85%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E6%8D%A2%E8%83%BD%E5%90%A6%E4%BD%BF%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89/",
            "url": "https://x-17.top/2022/10/11/LeetCode/1790-%E4%BB%85%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E6%8D%A2%E8%83%BD%E5%90%A6%E4%BD%BF%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89/",
            "title": "1790. 仅执行一次字符串交换能否使两个字符串相等",
            "date_published": "2022-10-11T00:22:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"1790-仅执行一次字符串交换能否使两个字符串相等\"><a class=\"markdownIt-Anchor\" href=\"#1790-仅执行一次字符串交换能否使两个字符串相等\">#</a> <a href=\"https://leetcode.cn/problems/check-if-one-string-swap-can-make-strings-equal/\">1790. 仅执行一次字符串交换能否使两个字符串相等</a></h1>\n<p>给你长度相等的两个字符串  <code>s1</code>  和  <code>s2</code>  。一次 字符串交换 操作的步骤如下：选出某个字符串中的两个下标（不必不同），并交换这两个下标所对应的字符。</p>\n<p>如果对 其中一个字符串 执行 最多一次字符串交换 就可以使两个字符串相等，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n<p>示例 1：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s1 = &quot;bank&quot;, s2 = &quot;kanb&quot;</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：例如，交换 s2 中的第一个和最后一个字符可以得到 &quot;bank&quot;</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s1 = &quot;attack&quot;, s2 = &quot;defend&quot;</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：一次字符串交换无法使两个字符串相等</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s1 = &quot;kelb&quot;, s2 = &quot;kelb&quot;</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：两个字符串已经相等，所以不需要进行字符串交换</span><br></pre></td></tr></table></figure>\n<p>示例 4：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s1 = &quot;abcd&quot;, s2 = &quot;dcba&quot;</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= s1.length, s2.length &lt;= 100</li>\n<li>s1.length == s2.length</li>\n<li>s1 和 s2 仅由小写英文字母组成</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>只需要按照题意模拟即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">areAlmostEqual</span><span class=\"params\">(string s1, string s2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> flag1,flag2;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1.<span class=\"built_in\">length</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t==<span class=\"number\">1</span>&amp;&amp;s1[i]!=s2[i])&#123;</span><br><span class=\"line\">                flag1=s1[i];</span><br><span class=\"line\">                flag2=s2[i];</span><br><span class=\"line\">                t=<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t==<span class=\"number\">0</span>&amp;&amp;s1[i]!=s2[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(flag1==s2[i]&amp;&amp;flag2==s1[i])&#123;</span><br><span class=\"line\">                    t=<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t==<span class=\"number\">-1</span>&amp;&amp;s1[i]!=s2[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Easy"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/10/LeetCode/801-%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/",
            "url": "https://x-17.top/2022/10/10/LeetCode/801-%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/",
            "title": "801. 使序列递增的最小交换次数",
            "date_published": "2022-10-09T23:34:41.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"801-使序列递增的最小交换次数\"><a class=\"markdownIt-Anchor\" href=\"#801-使序列递增的最小交换次数\">#</a> <a href=\"https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/\">801. 使序列递增的最小交换次数</a></h1>\n<p>我们有两个长度相等且不为空的整型数组 nums1 和 nums2 。在一次操作中，我们可以交换 nums1 [i] 和 nums2 [i] 的元素。</p>\n<ul>\n<li>例如，如果 nums1 = [1,2,3,8] ， nums2 =[5,6,7,4] ，你可以交换 i = 3 处的元素，得到 nums1 =[1,2,3,4] 和 nums2 =[5,6,7,8] 。<br>\n返回 使 nums1 和 nums2 严格递增 所需操作的最小次数 。</li>\n</ul>\n<p>数组 arr 严格递增 且  arr [0] &lt; arr [1] &lt; arr [2] &lt; … &lt; arr [arr.length - 1] 。</p>\n<p>注意：</p>\n<ul>\n<li>用例保证可以实现操作。</li>\n</ul>\n<p>示例 1:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums1 = [1,3,5,4], nums2 = [1,2,3,7]</span><br><span class=\"line\">输出: 1</span><br><span class=\"line\">解释: </span><br><span class=\"line\">交换 A[3] 和 B[3] 后，两个数组如下:</span><br><span class=\"line\">A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]</span><br><span class=\"line\">两个数组均为严格递增的。</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]</span><br><span class=\"line\">输出: 1</span><br></pre></td></tr></table></figure>\n<p>提示:</p>\n<ul>\n<li>$2 &lt;= nums1.length &lt;= 10^5$</li>\n<li>$nums2.length == nums1.length$</li>\n<li>$0 &lt;= nums1[i], nums2[i] &lt;= 2 * 10^5$</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>首先，在位置 i 会出现不需要交换，需要交换和不能交换三种情况，即如下两式其中一个成立或者同时成立</p>\n<ol>\n<li>$nums_1 [i] &gt; nums_1 [i-1] 且 nums_2 [i] &gt; nums_2 [i-1] $</li>\n<li>$nums_1 [i] &gt; nums_2 [i-1] 且 nums_2 [i] &gt; nums_1 [i-1] $</li>\n</ol>\n<p>因此，<br>\n用 <code>dp[i][0]</code>  表示到第 i 位满足要求且第 i 位不进行交换；<br>\n用 <code>dp[i][1]</code>  表示到第 i 位满足要求且第 i 位进行交换；<br>\n当满足式 1 而不满足式 2 时，有</p>\n$\n\\begin{cases}\ndp[i][0] = dp[i-1][0]\\\\\ndp[i][1] = dp[i-1][1] + 1\n\\end{cases}\n$\n<p>当满足式 2 而不满足式 1 时，有</p>\n$\n\\begin{cases}\ndp[i][0] = dp[i-1][1]\\\\\ndp[i][1] = dp[i-1][0] + 1\n\\end{cases}\n$\n<p>当两式同时满足时，有</p>\n$\n\\begin{cases}\ndp[i][0] = min\\{dp[i-1][0],dp[i-1][1]\\}\\\\\ndp[i][1] = min\\{dp[i-1][1],dp[i-1][0]\\} + 1\n\\end{cases}\n$\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSwap</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums1.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> at = a, bt = b;</span><br><span class=\"line\">            a = b = n;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[i] &gt; nums1[i - <span class=\"number\">1</span>] &amp;&amp; nums2[i] &gt; nums2[i - <span class=\"number\">1</span>])  &#123;</span><br><span class=\"line\">                a = <span class=\"built_in\">min</span>(a, at);</span><br><span class=\"line\">                b = <span class=\"built_in\">min</span>(b, bt + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[i - <span class=\"number\">1</span>] &amp;&amp; nums2[i] &gt; nums1[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                a = <span class=\"built_in\">min</span>(a, bt);</span><br><span class=\"line\">                b = <span class=\"built_in\">min</span>(b, at + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Hard"
            ]
        },
        {
            "id": "https://x-17.top/2022/10/09/LeetCode/856-%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0/",
            "url": "https://x-17.top/2022/10/09/LeetCode/856-%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0/",
            "title": "856. 括号的分数",
            "date_published": "2022-10-09T00:11:15.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"856-括号的分数\"><a class=\"markdownIt-Anchor\" href=\"#856-括号的分数\">#</a> <a href=\"https://leetcode.cn/problems/score-of-parentheses/\">856. 括号的分数</a></h1>\n<p>给定一个平衡括号字符串 S，按下述规则计算该字符串的分数：</p>\n<ul>\n<li>\n<p>() 得 1 分。</p>\n</li>\n<li>\n<p>AB 得 A + B 分，其中 A 和 B 是平衡括号字符串。</p>\n</li>\n<li>\n<p>(A) 得 2 * A 分，其中 A 是平衡括号字符串。</p>\n</li>\n</ul>\n<p>示例 1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入： &quot;()&quot;</span><br><span class=\"line\">输出： 1</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入： &quot;(())&quot;</span><br><span class=\"line\">输出： 2</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入： &quot;()()&quot;</span><br><span class=\"line\">输出： 2</span><br></pre></td></tr></table></figure>\n<p>示例 4：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入： &quot;(()(()))&quot;</span><br><span class=\"line\">输出： 6</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>\n<p>S 是平衡括号字符串，且只含有 ( 和 ) 。</p>\n</li>\n<li>\n<p>2 &lt;= S.length &lt;= 50</p>\n</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>根据题意，我们可以求每组 &quot;()“对应的深度 d，那么 $2^d$ 就是这组”()&quot; 所贡献的分数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">scoreOfParentheses</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>,flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">length</span>();i++)&#123;</span><br><span class=\"line\">            flag+=(s[i]==<span class=\"string\">&#x27;(&#x27;</span>?<span class=\"number\">1</span>:<span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;s[i<span class=\"number\">-1</span>]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                ans+=<span class=\"number\">1</span>&lt;&lt;flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：$O (n)$</li>\n<li>空间复杂度：$O (1)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/09/05/LeetCode/652-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/",
            "url": "https://x-17.top/2022/09/05/LeetCode/652-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/",
            "title": "652. 寻找重复的子树",
            "date_published": "2022-09-05T00:13:56.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"652-寻找重复的子树\"><a class=\"markdownIt-Anchor\" href=\"#652-寻找重复的子树\">#</a> <a href=\"https://leetcode.cn/problems/find-duplicate-subtrees/\">652. 寻找重复的子树</a></h1>\n<p>给定一棵二叉树 root，返回所有重复的子树。 对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。 如果两棵树具有相同的结构和相同的结点值，则它们是重复的。 示例 1： <img src=\"https://assets.leetcode.com/uploads/2020/08/16/e1.jpg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：root = [1,2,3,4,null,2,4,null,null,4]</span><br><span class=\"line\">输出：[[2,4],[4]]</span><br></pre></td></tr></table></figure>\n<p>示例 2： <img src=\"https://assets.leetcode.com/uploads/2020/08/16/e2.jpg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：root = [2,1,1]</span><br><span class=\"line\">输出：[[1]]</span><br></pre></td></tr></table></figure>\n<p>示例 3： <img src=\"https://assets.leetcode.com/uploads/2020/08/16/e33.jpg\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：root = [2,2,2,3,null,3,null]</span><br><span class=\"line\">输出：[[2,3],[3]]</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>树中的结点数在 \\([1,10^4]\\) 范围内。</li>\n<li>-200 &lt;= Node.val &lt;= 200</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>emmm, 这是中等题？ 参考<a href=\"https://leetcode.cn/problems/find-duplicate-subtrees/solution/xun-zhao-zhong-fu-de-zi-shu-by-leetcode-zoncw/\">官方题解</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector <span class=\"title\">findDuplicateSubtrees</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;repeat.<span class=\"built_in\">begin</span>(), repeat.<span class=\"built_in\">end</span>()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">dfs</span><span class=\"params\">(TreeNode* node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        string serial = <span class=\"built_in\">to_string</span>(node-&gt;val) + <span class=\"string\">&quot;(&quot;</span> + <span class=\"built_in\">dfs</span>(node-&gt;left) + <span class=\"string\">&quot;)(&quot;</span> + <span class=\"built_in\">dfs</span>(node-&gt;right) + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> it = seen.<span class=\"built_in\">find</span>(serial); it != seen.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            repeat.<span class=\"built_in\">insert</span>(it-&gt;second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            seen[serial] = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serial;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    unordered_map seen;</span><br><span class=\"line\">    unordered_set repeat;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度 $O (n)$</li>\n<li>空间复杂度 $O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        },
        {
            "id": "https://x-17.top/2022/09/03/LeetCode/646-%E6%9C%80%E9%95%BF%E6%95%B0%E5%AF%B9%E9%93%BE/",
            "url": "https://x-17.top/2022/09/03/LeetCode/646-%E6%9C%80%E9%95%BF%E6%95%B0%E5%AF%B9%E9%93%BE/",
            "title": "646. 最长数对链",
            "date_published": "2022-09-03T07:26:13.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"646-最长数对链\"><a class=\"markdownIt-Anchor\" href=\"#646-最长数对链\">#</a> <a href=\"https://leetcode.cn/problems/maximum-length-of-pair-chain/\">646. 最长数对链</a></h1>\n<p>给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。 现在，我们定义一种跟随关系，当且仅当 b &lt;c 时，数对 (c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。 给定一个数对集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。 示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：[[1,2], [2,3], [3,4]]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：最长的数对链是 [1,2] -&gt; [3,4]</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>给出数对的个数在 [1, 1000] 范围内。</li>\n</ul>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>动态规划</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findLongestChain</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(pairs.<span class=\"built_in\">begin</span>(),pairs.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"function\">vector <span class=\"title\">dp</span><span class=\"params\">(pairs.size(),<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;pairs.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pairs[i][<span class=\"number\">0</span>]&gt;pairs[j][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    dp[i]=<span class=\"built_in\">max</span>(dp[i],dp[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[pairs.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度 $O (n^2)$</li>\n<li>空间复杂度 $O (n)$</li>\n</ul>\n",
            "tags": [
                "每日一题",
                "Medium"
            ]
        }
    ]
}